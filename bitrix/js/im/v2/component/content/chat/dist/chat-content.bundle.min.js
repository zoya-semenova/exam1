this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(t,e,n,a,i,s,o,r,l,d,c,h,g,u,m,C,p,v,I,_,b,T,E,M,S,f,L,y,A,x,B){"use strict";const N={chatHeader:64,pinnedMessages:53,blockedTextarea:50,dropAreaOffset:16};const P={video:{id:"video",locCode:"IM_CONTENT_CHAT_HEADER_VIDEOCALL",start:t=>{d.Messenger.startVideoCall(t)}},audio:{id:"audio",locCode:"IM_CONTENT_CHAT_HEADER_CALL_MENU_AUDIO",start:t=>{d.Messenger.startVideoCall(t,false)}},beta:{id:"beta",locCode:"IM_CONTENT_CHAT_HEADER_CALL_MENU_BETA_2",start:t=>{const e=v.Core.getStore().getters["chats/get"](t);c.CallManager.getInstance().createBetaCallRoom(e.chatId)}}};let O=t=>t,D;var H=babelHelpers.classPrivateFieldLooseKey("getDelimiter");var k=babelHelpers.classPrivateFieldLooseKey("getVideoCallItem");var w=babelHelpers.classPrivateFieldLooseKey("getAudioCallItem");var R=babelHelpers.classPrivateFieldLooseKey("getPersonalPhoneItem");var $=babelHelpers.classPrivateFieldLooseKey("getWorkPhoneItem");var U=babelHelpers.classPrivateFieldLooseKey("getInnerPhoneItem");var F=babelHelpers.classPrivateFieldLooseKey("getZoomItem");var X=babelHelpers.classPrivateFieldLooseKey("getUserPhoneHtml");var z=babelHelpers.classPrivateFieldLooseKey("isCallAvailable");var G=babelHelpers.classPrivateFieldLooseKey("getUser");var q=babelHelpers.classPrivateFieldLooseKey("isUser");var j=babelHelpers.classPrivateFieldLooseKey("requestCreateZoomConference");class K extends o.BaseMenu{constructor(){super();Object.defineProperty(this,j,{value:st});Object.defineProperty(this,q,{value:it});Object.defineProperty(this,G,{value:at});Object.defineProperty(this,z,{value:nt});Object.defineProperty(this,X,{value:et});Object.defineProperty(this,F,{value:tt});Object.defineProperty(this,U,{value:Q});Object.defineProperty(this,$,{value:Y});Object.defineProperty(this,R,{value:Z});Object.defineProperty(this,w,{value:W});Object.defineProperty(this,k,{value:J});Object.defineProperty(this,H,{value:V});this.id="bx-im-chat-header-call-menu"}getMenuOptions(){return{...super.getMenuOptions(),className:this.getMenuClassName(),angle:true,offsetLeft:4,offsetTop:5}}getMenuClassName(){return"bx-im-messenger__scope bx-im-chat-header-call-button__scope"}getMenuItems(){return[babelHelpers.classPrivateFieldLooseBase(this,k)[k](),babelHelpers.classPrivateFieldLooseBase(this,w)[w](),babelHelpers.classPrivateFieldLooseBase(this,F)[F](),babelHelpers.classPrivateFieldLooseBase(this,H)[H](),babelHelpers.classPrivateFieldLooseBase(this,R)[R](),babelHelpers.classPrivateFieldLooseBase(this,$)[$](),babelHelpers.classPrivateFieldLooseBase(this,U)[U]()]}}function V(){return{delimiter:true}}function J(){const t=babelHelpers.classPrivateFieldLooseBase(this,z)[z](this.context.dialogId);return{text:S.Loc.getMessage("IM_CONTENT_CHAT_HEADER_VIDEOCALL"),onclick:()=>{if(!t){return}P.video.start(this.context.dialogId);this.emit(K.events.onMenuItemClick,P.video);this.menuInstance.close()},disabled:!t}}function W(){const t=babelHelpers.classPrivateFieldLooseBase(this,z)[z](this.context.dialogId);return{text:S.Loc.getMessage("IM_CONTENT_CHAT_HEADER_CALL_MENU_AUDIO"),onclick:()=>{if(!t){return}P.audio.start(this.context.dialogId);this.emit(K.events.onMenuItemClick,P.audio);this.menuInstance.close()},disabled:!t}}function Z(){if(!babelHelpers.classPrivateFieldLooseBase(this,q)[q]()){return null}const{phones:t}=babelHelpers.classPrivateFieldLooseBase(this,G)[G]();if(!t.personalMobile){return null}const e=S.Loc.getMessage("IM_CONTENT_CHAT_HEADER_CALL_MENU_PERSONAL_PHONE");return{className:"menu-popup-no-icon bx-im-chat-header-call-button-menu__item",html:babelHelpers.classPrivateFieldLooseBase(this,X)[X](e,t.personalMobile),onclick:()=>{d.Messenger.startPhoneCall(t.personalMobile);this.menuInstance.close()}}}function Y(){if(!babelHelpers.classPrivateFieldLooseBase(this,q)[q]()){return null}const{phones:t}=babelHelpers.classPrivateFieldLooseBase(this,G)[G]();if(!t.workPhone){return null}const e=S.Loc.getMessage("IM_CONTENT_CHAT_HEADER_CALL_MENU_WORK_PHONE");return{className:"menu-popup-no-icon bx-im-chat-header-call-button-menu__item",html:babelHelpers.classPrivateFieldLooseBase(this,X)[X](e,t.workPhone),onclick:()=>{d.Messenger.startPhoneCall(t.workPhone);this.menuInstance.close()}}}function Q(){if(!babelHelpers.classPrivateFieldLooseBase(this,q)[q]()){return null}const{phones:t}=babelHelpers.classPrivateFieldLooseBase(this,G)[G]();if(!t.innerPhone){return null}const e=S.Loc.getMessage("IM_CONTENT_CHAT_HEADER_CALL_MENU_INNER_PHONE_MSGVER_1");return{className:"menu-popup-no-icon bx-im-chat-header-call-button-menu__item",html:babelHelpers.classPrivateFieldLooseBase(this,X)[X](e,t.innerPhone),onclick:()=>{d.Messenger.startPhoneCall(t.innerPhone);this.menuInstance.close()}}}function tt(){const t=l.FeatureManager.isFeatureAvailable(l.Feature.zoomActive);if(!t){return null}const e=["bx-im-chat-header-call-button-menu__zoom","menu-popup-no-icon"];const n=l.FeatureManager.isFeatureAvailable(l.Feature.zoomAvailable);if(!n){e.push("--disabled")}return{className:e.join(" "),text:S.Loc.getMessage("IM_CONTENT_CHAT_HEADER_CALL_MENU_ZOOM"),onclick:()=>{if(!n){BX.UI.InfoHelper.show("limit_video_conference_zoom");return}babelHelpers.classPrivateFieldLooseBase(this,j)[j](this.context.dialogId);this.menuInstance.close()}}}function et(t,e){return S.Tag.render(D||(D=O`
			<span class="bx-im-chat-header-call-button-menu__phone_container">
				<span class="bx-im-chat-header-call-button-menu__phone_title">${0}</span>
				<span class="bx-im-chat-header-call-button-menu__phone_number">${0}</span>
			</span>
		`),t,e)}function nt(t){if(v.Core.getStore().getters["recent/calls/hasActiveCall"](t)&&c.CallManager.getInstance().getCurrentCallDialogId()===t){return true}if(v.Core.getStore().getters["recent/calls/hasActiveCall"]()){return false}const e=c.CallManager.getInstance().chatCanBeCalled(t);const n=b.PermissionManager.getInstance().canPerformAction(y.ChatActionType.call,t);return e&&n}function at(){if(!babelHelpers.classPrivateFieldLooseBase(this,q)[q]()){return null}return v.Core.getStore().getters["users/get"](this.context.dialogId)}function it(){return this.context.type===y.ChatType.user}function st(t){r.runAction(y.RestMethod.imV2CallZoomCreate,{data:{dialogId:t}}).catch((t=>{let e=S.Loc.getMessage("IM_CONTENT_CHAT_HEADER_CALL_MENU_ZOOM_CREATE_ERROR");const n=t.some((t=>t.code==="ZOOM_CONNECTED_ERROR"));if(n){const t=`/company/personal/user/${v.Core.getUserId()}/social_services/`;e=S.Loc.getMessage("IM_CONTENT_CHAT_HEADER_CALL_MENU_ZOOM_CONNECT_ERROR").replace("#HREF_START#",`<a href=${t}>`).replace("#HREF_END#","</>")}BX.UI.Notification.Center.notify({content:e})}))}K.events={onMenuItemClick:"onMenuItemClick"};const ot={directives:{hint:h.hint},props:{dialogId:{type:String,required:true}},emits:[],data(){return{lastCallType:""}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},isConference(){return this.dialog.type===y.ChatType.videoconf},callButtonText(){const t=P[this.lastCallType].locCode;return this.loc(t)},hasActiveCurrentCall(){return c.CallManager.getInstance().hasActiveCurrentCall(this.dialogId)},hasActiveAnotherCall(){return c.CallManager.getInstance().hasActiveAnotherCall(this.dialogId)},isActive(){if(this.hasActiveCurrentCall){return true}if(this.hasActiveAnotherCall){return false}return c.CallManager.getInstance().chatCanBeCalled(this.dialogId)},userLimit(){return c.CallManager.getInstance().getCallUserLimit()},isChatUserLimitExceeded(){return c.CallManager.getInstance().isChatUserLimitExceeded(this.dialogId)},hintContent(){if(this.isChatUserLimitExceeded){return{text:`\u0412 \u0437\u0432\u043e\u043d\u043a\u0435 \u043c\u043e\u0433\u0443\u0442 \u0443\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 ${this.userLimit} \u0447\u0435\u043b\u043e\u0432\u0435\u043a`,popupOptions:{bindOptions:{position:"bottom"},angle:{position:"top"},targetContainer:document.body,offsetLeft:63,offsetTop:0}}}return null}},created(){this.lastCallType=this.getLastCallChoice();this.subscribeToMenuItemClick()},methods:{startVideoCall(){if(!this.isActive){return}d.Messenger.startVideoCall(this.dialogId)},subscribeToMenuItemClick(){this.getCallMenu().subscribe(K.events.onMenuItemClick,(t=>{const{id:e}=t.getData();this.saveLastCallChoice(e)}))},getCallMenu(){if(!this.callMenu){this.callMenu=new K}return this.callMenu},onButtonClick(){if(!this.isActive){return}P[this.lastCallType].start(this.dialogId)},onMenuClick(){if(!this.shouldShowMenu()){return}this.getCallMenu().openMenu(this.dialog,this.$refs.menu)},onStartConferenceClick(){if(!this.isActive){return}d.Messenger.openConference({code:this.dialog.public.code})},getLastCallChoice(){const t=s.LocalStorageManager.getInstance().get(y.LocalStorageKey.lastCallType,P.video.id);if(t===P.beta.id){return P.video.id}return t},saveLastCallChoice(t){this.lastCallType=t;s.LocalStorageManager.getInstance().set(y.LocalStorageKey.lastCallType,t)},shouldShowMenu(){return this.isActive},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div\n\t\t\tv-if="isConference"\n\t\t\tclass="bx-im-chat-header-call-button__scope bx-im-chat-header-call-button__container --conference"\n\t\t\t:class="{'--disabled': !isActive}"\n\t\t\t@click="onStartConferenceClick"\n\t\t>\n\t\t\t<div class="bx-im-chat-header-call-button__text">\n\t\t\t\t{{ loc('IM_CONTENT_CHAT_HEADER_START_CONFERENCE') }}\n\t\t\t</div>\n\t\t</div>\n\t\t<div\n\t\t\tv-else\n\t\t\tclass="bx-im-chat-header-call-button__scope bx-im-chat-header-call-button__container"\n\t\t\t:class="{'--disabled': !isActive}"\n\t\t\tv-hint="hintContent"\n\t\t\t@click="onButtonClick"\n\t\t>\n\t\t\t<div class="bx-im-chat-header-call-button__text">\n\t\t\t\t{{ callButtonText }}\n\t\t\t</div>\n\t\t\t<div class="bx-im-chat-header-call-button__separator"></div>\n\t\t\t<div class="bx-im-chat-header-call-button__chevron_container" @click.stop="onMenuClick">\n\t\t\t\t<div class="bx-im-chat-header-call-button__chevron" ref="menu"></div>\n\t\t\t</div>\n\t\t</div>\n\t`};const rt={[y.ChatEntityLinkType.tasks]:{className:"--task",loc:S.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_TASK")},[y.ChatEntityLinkType.calendar]:{className:"--calendar",loc:S.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_MEETING_MSGVER_1")},[y.ChatEntityLinkType.sonetGroup]:{className:"--group",loc:S.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_GROUP_MSGVER_1")},[y.ChatEntityLinkType.mail]:{className:"--mail",loc:S.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_MAIL_MSGVER_1")},[y.ChatEntityLinkType.contact]:{className:"--crm",loc:S.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_CONTACT")},[y.ChatEntityLinkType.deal]:{className:"--crm",loc:S.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_DEAL")},[y.ChatEntityLinkType.lead]:{className:"--crm",loc:S.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_LEAD")},[y.ChatEntityLinkType.dynamic]:{className:"--crm",loc:S.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_DYNAMIC_ELEMENT")}};const lt={name:"EntityLink",props:{dialogId:{type:String,required:true}},data(){return{}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},entityType(){return this.dialog.entityLink.type},entityUrl(){return this.dialog.entityLink.url},containerClassName(){var t,e;return(t=(e=rt[this.entityType])==null?void 0:e.className)!=null?t:""},linkText(){var t,e;return(t=(e=rt[this.entityType])==null?void 0:e.loc)!=null?t:"Open entity"}},template:`\n\t\t<a :href="entityUrl" class="bx-im-chat-header-entity-link__container" :class="containerClassName" target="_blank">\n\t\t\t<div class="bx-im-chat-header-entity-link__icon"></div>\n\t\t\t<div class="bx-im-chat-header-entity-link__text">{{ linkText }}</div>\n\t\t\t<div class="bx-im-chat-header-entity-link__arrow"></div>\n\t\t</a>\n\t`};const dt={[y.ChatType.openChannel]:"IM_CONTENT_CHAT_HEADER_CHANNEL_USER_COUNT",[y.ChatType.channel]:"IM_CONTENT_CHAT_HEADER_CHANNEL_USER_COUNT",[y.ChatType.generalChannel]:"IM_CONTENT_CHAT_HEADER_CHANNEL_USER_COUNT",default:"IM_CONTENT_CHAT_HEADER_USER_COUNT"};const ct={name:"GroupChatTitle",components:{EditableChatTitle:x.EditableChatTitle,EntityLink:lt,LineLoader:x.LineLoader,FadeAnimation:g.FadeAnimation},props:{dialogId:{type:String,required:true}},emits:["membersClick","newTitle"],data(){return{}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},hasEntityLink(){var t;return Boolean((t=this.dialog.entityLink)==null?void 0:t.url)},userCounterPhraseCode(){var t;return(t=dt[this.dialog.type])!=null?t:dt.default},userCounterText(){return S.Loc.getMessagePlural(this.userCounterPhraseCode,this.dialog.userCounter,{"#COUNT#":this.dialog.userCounter})}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-chat-header__info">\n\t\t\t<EditableChatTitle :dialogId="dialogId" @newTitleSubmit="$emit('newTitle', $event)" />\n\t\t\t<LineLoader v-if="!dialog.inited" :width="50" :height="16" />\n\t\t\t<FadeAnimation :duration="100">\n\t\t\t\t<div v-if="dialog.inited" class="bx-im-chat-header__subtitle_container">\n\t\t\t\t\t<div\n\t\t\t\t\t\t:title="loc('IM_CONTENT_CHAT_HEADER_OPEN_MEMBERS')"\n\t\t\t\t\t\t@click="$emit('membersClick')"\n\t\t\t\t\t\tclass="bx-im-chat-header__subtitle_content --click"\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ userCounterText }}\n\t\t\t\t\t</div>\n\t\t\t\t\t<EntityLink v-if="hasEntityLink" :dialogId="dialogId" />\n\t\t\t\t</div>\n\t\t\t</FadeAnimation>\n\t\t</div>\n\t`};const ht=60*1e3;const gt={name:"UserTitle",components:{ChatTitle:x.ChatTitle},props:{dialogId:{type:String,required:true}},data(){return{userLastOnlineText:""}},computed:{userPosition(){return this.$store.getters["users/getPosition"](this.dialogId)},userLastOnline(){return this.$store.getters["users/getLastOnline"](this.dialogId)},userLink(){return u.Utils.user.getProfileLink(this.dialogId)}},watch:{userLastOnline(t){this.userLastOnlineText=t}},created(){this.updateUserOnline();this.userLastOnlineInterval=setInterval(this.updateUserOnline,ht)},beforeUnmount(){clearInterval(this.userLastOnlineInterval)},methods:{updateUserOnline(){this.userLastOnlineText=this.$store.getters["users/getLastOnline"](this.dialogId)}},template:`\n\t\t<div class="bx-im-chat-header__info">\n\t\t\t<div class="bx-im-chat-header__title --user">\n\t\t\t\t<a :href="userLink" target="_blank" class="bx-im-chat-header__title_container">\n\t\t\t\t\t<ChatTitle :dialogId="dialogId" />\n\t\t\t\t</a>\n\t\t\t\t<span class="bx-im-chat-header__user-status">{{ userLastOnlineText }}</span>\n\t\t\t</div>\n\t\t\t<div class="bx-im-chat-header__subtitle_container">\n\t\t\t\t<div class="bx-im-chat-header__subtitle_content">{{ userPosition }}</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const ut={name:"MultidialogChatTitle",components:{EditableChatTitle:x.EditableChatTitle,ChatTitle:x.ChatTitle},props:{dialogId:{type:String,required:true}},emits:["newTitle"],computed:{isSupportBot(){return this.$store.getters["users/bots/isSupport"](this.dialogId)},subtitle(){return this.$Bitrix.Loc.getMessage("IM_CONTENT_CHAT_HEADER_SUPPORT_SUBTITLE")}},template:`\n\t\t<div class="bx-im-chat-header__info">\n\t\t\t<ChatTitle v-if="isSupportBot" :dialogId="dialogId" />\n\t\t\t<EditableChatTitle v-else :dialogId="dialogId" @newTitleSubmit="$emit('newTitle', $event)" />\n\t\t\t<div class="bx-im-chat-header__subtitle_container">\n\t\t\t\t<div class="bx-im-chat-header__subtitle_content">{{ subtitle }}</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const mt=Object.freeze({group:"group",user:"user",multidialog:"multidialog"});const Ct={name:"ChatHeader",components:{ChatAvatar:x.ChatAvatar,AddToChat:i.AddToChat,CallButton:ot,GroupChatTitle:ct,UserChatTitle:gt,MultidialogChatTitle:ut,LineLoader:x.LineLoader,FadeAnimation:g.FadeAnimation},props:{dialogId:{type:String,default:""},currentSidebarPanel:{type:String,default:""}},emits:["toggleRightPanel","toggleSearchPanel","toggleMembersPanel"],data(){return{showAddToChatPopup:false}},computed:{AvatarSize:()=>x.AvatarSize,user(){return this.$store.getters["users/get"](this.dialogId,true)},dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},isInited(){return this.dialog.inited},isUser(){return this.dialog.type===y.ChatType.user},isBot(){if(!this.isUser){return false}return this.user.bot===true},isChat(){return!this.isUser},chatId(){return this.dialog.chatId},userLink(){return u.Utils.user.getProfileLink(this.dialogId)},showCallButton(){if(this.isBot||this.isSupport){return false}return b.PermissionManager.getInstance().canPerformAction(y.ChatActionType.call,this.dialogId)},showInviteButton(){if(this.isBot){return false}return b.PermissionManager.getInstance().canPerformAction(y.ChatActionType.extend,this.dialogId)},showSidebarButton(){return b.PermissionManager.getInstance().canPerformAction(y.ChatActionType.openSidebar,this.dialogId)},canChangeAvatar(){return b.PermissionManager.getInstance().canPerformAction(y.ChatActionType.avatar,this.dialogId)},isSidebarOpened(){return this.currentSidebarPanel.length>0},isMessageSearchActive(){return this.currentSidebarPanel===y.SidebarDetailBlock.messageSearch},headerTitleComponentName(){return`${this.chatTitle}ChatTitle`},isSupport(){return this.$store.getters["sidebar/multidialog/isSupport"](this.dialogId)},chatTitle(){if(this.isSupport){return mt.multidialog}if(this.isUser){return mt.user}return mt.group},hasUserLink(){return this.isUser&&!this.isSupport}},methods:{toggleRightPanel(){if(this.currentSidebarPanel){f.EventEmitter.emit(y.EventType.sidebar.close,{panel:""});return}f.EventEmitter.emit(y.EventType.sidebar.open,{panel:y.SidebarDetailBlock.main,dialogId:this.dialogId})},toggleSearchPanel(){if(this.isMessageSearchActive){f.EventEmitter.emit(y.EventType.sidebar.close,{panel:y.SidebarDetailBlock.messageSearch});return}f.EventEmitter.emit(y.EventType.sidebar.open,{panel:y.SidebarDetailBlock.messageSearch,dialogId:this.dialogId})},onMembersClick(){if(!this.isInited){return}if(this.currentSidebarPanel===y.SidebarDetailBlock.members){f.EventEmitter.emit(y.EventType.sidebar.close,{panel:y.SidebarDetailBlock.members});return}f.EventEmitter.emit(y.EventType.sidebar.open,{panel:y.SidebarDetailBlock.members,dialogId:this.dialogId})},onNewTitleSubmit(t){this.getChatService().renameChat(this.dialogId,t).catch((()=>{BX.UI.Notification.Center.notify({content:this.loc("IM_CONTENT_CHAT_HEADER_RENAME_ERROR")})}))},getChatService(){if(!this.chatService){this.chatService=new B.ChatService}return this.chatService},openInvitePopup(){this.showAddToChatPopup=true},onAvatarClick(){if(!this.isChat||!this.canChangeAvatar){return}this.$refs.avatarInput.click()},async onAvatarSelect(t){const e=t.target;const n=e.files[0];if(!n){return}const a=await this.getChatService().prepareAvatar(n);if(!a){return}void this.getChatService().changeAvatar(this.dialog.chatId,a)},loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div class="bx-im-chat-header__scope bx-im-chat-header__container">\n\t\t\t<div class="bx-im-chat-header__left">\n\t\t\t\t<slot name="left">\n\t\t\t\t\t<div class="bx-im-chat-header__avatar" :class="{'--can-change': canChangeAvatar}" @click="onAvatarClick">\n\t\t\t\t\t\t<a v-if="hasUserLink" :href="userLink" target="_blank">\n\t\t\t\t\t\t\t<ChatAvatar :avatarDialogId="dialogId" :contextDialogId="dialogId" :size="AvatarSize.L" />\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<ChatAvatar v-else :avatarDialogId="dialogId" :contextDialogId="dialogId" :size="AvatarSize.L" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<input \n\t\t\t\t\t\ttype="file" \n\t\t\t\t\t\t@change="onAvatarSelect" \n\t\t\t\t\t\taccept="image/*" \n\t\t\t\t\t\tclass="bx-im-chat-header__avatar_input" \n\t\t\t\t\t\tref="avatarInput"\n\t\t\t\t\t>\n\t\t\t\t\t<component\n\t\t\t\t\t\t:is="headerTitleComponentName"\n\t\t\t\t\t\t:dialogId="dialogId"\n\t\t\t\t\t\t@membersClick="onMembersClick"\n\t\t\t\t\t\t@newTitle="onNewTitleSubmit"\n\t\t\t\t\t/>\n\t\t\t\t</slot>\n\t\t\t</div>\n\t\t\t<LineLoader v-if="!isInited" :width="45" :height="22" />\n\t\t\t<FadeAnimation :duration="100">\n\t\t\t\t<div v-if="isInited" class="bx-im-chat-header__right">\n\t\t\t\t\t<slot name="before-actions"></slot>\n\t\t\t\t\t<CallButton v-if="showCallButton" :dialogId="dialogId" />\n\t\t\t\t\t<div\n\t\t\t\t\t\tv-if="showInviteButton"\n\t\t\t\t\t\t:title="loc('IM_CONTENT_CHAT_HEADER_OPEN_INVITE_POPUP_TITLE')"\n\t\t\t\t\t\t:class="{'--active': showAddToChatPopup}"\n\t\t\t\t\t\tclass="bx-im-chat-header__icon --add-people"\n\t\t\t\t\t\t@click="openInvitePopup" \n\t\t\t\t\t\tref="add-members"\n\t\t\t\t\t></div>\n\t\t\t\t\t<div \n\t\t\t\t\t\t:title="loc('IM_CONTENT_CHAT_HEADER_OPEN_SEARCH')"\n\t\t\t\t\t\t:class="{'--active': isMessageSearchActive}"\n\t\t\t\t\t\tclass="bx-im-chat-header__icon --search" \n\t\t\t\t\t\t@click="toggleSearchPanel"\n\t\t\t\t\t></div>\n\t\t\t\t\t<div\n\t\t\t\t\t\tv-if="showSidebarButton"\n\t\t\t\t\t\tclass="bx-im-chat-header__icon --panel"\n\t\t\t\t\t\t:title="loc('IM_CONTENT_CHAT_HEADER_OPEN_SIDEBAR')"\n\t\t\t\t\t\t:class="{'--active': isSidebarOpened}"\n\t\t\t\t\t\t@click="toggleRightPanel" \n\t\t\t\t\t></div>\n\t\t\t\t</div>\n\t\t\t</FadeAnimation>\n\t\t\t<AddToChat\n\t\t\t\t:bindElement="$refs['add-members'] || {}"\n\t\t\t\t:dialogId="dialogId"\n\t\t\t\t:showPopup="showAddToChatPopup"\n\t\t\t\t:popupConfig="{offsetTop: 15, offsetLeft: -300}"\n\t\t\t\t@close="showAddToChatPopup = false"\n\t\t\t/>\n\t\t</div>\n\t`};const pt={props:{dialogId:{type:String,required:true},container:{type:Object,required:true}},data(){return{showDropArea:false,lastDropAreaEnterTarget:null}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},hasPinnedMessages(){return this.$store.getters["messages/pin/getPinned"](this.dialog.chatId).length>0},dropAreaStyles(){let t=N.dropAreaOffset+N.chatHeader;if(this.hasPinnedMessages){t+=N.pinnedMessages}return{top:`${t}px`}}},watch:{container:{immediate:true,handler(t){if(!S.Type.isElementNode(t)){return}this.bindEvents()}}},beforeUnmount(){this.unbindEvents()},methods:{bindEvents(){S.Event.bind(this.container,"dragenter",this.onDragEnter);S.Event.bind(this.container,"dragleave",this.onDragLeave);S.Event.bind(this.container,"dragover",this.onDragOver);S.Event.bind(this.container,"drop",this.onDrop)},unbindEvents(){S.Event.unbind(this.container,"dragenter",this.onDragEnter);S.Event.unbind(this.container,"dragleave",this.onDragLeave);S.Event.unbind(this.container,"dragover",this.onDragOver);S.Event.unbind(this.container,"drop",this.onDrop)},async onDragEnter(t){t.stopPropagation();t.preventDefault();const e=await m.hasDataTransferOnlyFiles(t.dataTransfer,false);if(!e){return}this.lastDropAreaEnterTarget=t.target;this.showDropArea=true},onDragLeave(t){t.stopPropagation();t.preventDefault();if(this.lastDropAreaEnterTarget!==t.target){return}this.showDropArea=false},onDragOver(t){t.preventDefault()},async onDrop(t){t.preventDefault();const e=C.ChannelManager.isChannel(this.dialogId);const n=await this.getUploadingService().uploadFromDragAndDrop({event:t,dialogId:this.dialogId,sendAsFile:false,autoUpload:!e});if(e){f.EventEmitter.emit(y.EventType.textarea.openUploadPreview,{uploaderId:n})}this.showDropArea=false},getUploadingService(){if(!this.uploadingService){this.uploadingService=B.UploadingService.getInstance()}return this.uploadingService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<Transition name="drop-area-fade">\n\t\t\t<div v-if="showDropArea" :style="dropAreaStyles" class="bx-im-content-chat-drop-area__container bx-im-content-chat-drop-area__scope">\n\t\t\t\t<div class="bx-im-content-chat-drop-area__box">\n\t\t\t\t\t<span class="bx-im-content-chat-drop-area__icon"></span>\n\t\t\t\t\t<label class="bx-im-content-chat-drop-area__label-text">\n\t\t\t\t\t\t{{ loc('IM_CONTENT_DROP_AREA') }}\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Transition>\n\t`};const vt="rgba(0, 0, 0, 0.1)";const It="rgba(0, 0, 0, 0.2)";const _t="#fff";const bt={components:{ChatButton:x.Button},props:{dialogId:{type:String,required:true}},data(){return{}},computed:{ButtonSize:()=>x.ButtonSize,dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},isMuted(){return this.dialog.muteList.includes(v.Core.getUserId())},buttonText(){const t=this.loc("IM_CONTENT_BLOCKED_TEXTAREA_ENABLE_NOTIFICATIONS");const e=this.loc("IM_CONTENT_BLOCKED_TEXTAREA_DISABLE_NOTIFICATIONS");return this.isMuted?t:e},buttonColorScheme(){return{borderColor:y.Color.transparent,backgroundColor:vt,iconColor:_t,textColor:_t,hoverColor:It}}},methods:{onButtonClick(){if(this.isMuted){this.getChatService().unmuteChat(this.dialogId);return}this.getChatService().muteChat(this.dialogId)},getChatService(){if(!this.chatService){this.chatService=new B.ChatService}return this.chatService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-chat__textarea_placeholder">\n\t\t\t<ChatButton\n\t\t\t\t:size="ButtonSize.XL"\n\t\t\t\t:customColorScheme="buttonColorScheme"\n\t\t\t\t:text="buttonText"\n\t\t\t\t:isRounded="true"\n\t\t\t\t@click="onButtonClick"\n\t\t\t/>\n\t\t</div>\n\t`};const Tt={components:{ChatButton:x.Button},props:{dialogId:{type:String,required:true}},data(){return{}},computed:{ButtonSize:()=>x.ButtonSize,ButtonColor:()=>x.ButtonColor},methods:{onButtonClick(){this.getChatService().joinChat(this.dialogId)},getChatService(){if(!this.chatService){this.chatService=new B.ChatService}return this.chatService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-chat__textarea_placeholder">\n\t\t\t<ChatButton\n\t\t\t\t:size="ButtonSize.XL"\n\t\t\t\t:color="ButtonColor.Primary"\n\t\t\t\t:text="loc('IM_CONTENT_BLOCKED_TEXTAREA_JOIN_CHAT')"\n\t\t\t\t:isRounded="true"\n\t\t\t\t@click="onButtonClick"\n\t\t\t/>\n\t\t</div>\n\t`};const Et={name:"LoadingBar",data(){return{}},template:`\n\t\t<div class="bx-im-content-chat__loading-bar"></div>\n\t`};const Mt={mounted(t,e){e.instance.textareaResizeManager.observeTextarea(t)},beforeUnmount(t,e){e.instance.textareaResizeManager.unobserveTextarea(t)}};const St={name:"BaseChatContent",components:{ChatHeader:Ct,ChatDialog:M.ChatDialog,ChatTextarea:A.ChatTextarea,ChatSidebar:a.ChatSidebar,DropArea:pt,MutePanel:bt,JoinPanel:Tt,LoadingBar:Et},directives:{"textarea-observer":Mt},props:{dialogId:{type:String,default:""}},data(){return{currentSidebarPanel:"",textareaHeight:0,showLoadingBar:false}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},canSend(){return b.PermissionManager.getInstance().canPerformAction(y.ChatActionType.send,this.dialog.dialogId)},isGuest(){return this.dialog.role===y.UserRole.guest},hasCommentsOnTop(){return this.$store.getters["messages/comments/areOpenedForChannel"](this.dialogId)},containerClasses(){const t=this.$store.getters["application/settings/get"](y.Settings.appearance.alignment);return[`--${t}-align`]},backgroundStyle(){return p.ThemeManager.getCurrentBackgroundStyle()},dialogContainerStyle(){let t=this.textareaHeight;if(!this.canSend){t=N.blockedTextarea}return{height:`calc(100% - ${N.chatHeader}px - ${t}px)`}}},watch:{textareaHeight(t,e){if(!this.dialog.inited||e===0){return}f.EventEmitter.emit(y.EventType.dialog.scrollToBottom,{chatId:this.dialog.chatId,animation:false})}},created(){this.initTextareaResizeManager();this.bindEvents()},beforeUnmount(){this.unbindEvents()},methods:{initTextareaResizeManager(){this.textareaResizeManager=new n.ResizeManager;this.textareaResizeManager.subscribe(n.ResizeManager.events.onHeightChange,this.onTextareaHeightChange)},onTextareaMount(){const t=this.$refs["textarea-container"];this.textareaHeight=t.clientHeight},onTextareaHeightChange(t){const{newHeight:e}=t.getData();this.textareaHeight=e},onChangeSidebarPanel({panel:t}){this.currentSidebarPanel=t},onShowLoadingBar(t){const{dialogId:e}=t.getData();if(e!==this.dialogId){return}this.showLoadingBar=true},onHideLoadingBar(t){const{dialogId:e}=t.getData();if(e!==this.dialogId){return}this.showLoadingBar=false},bindEvents(){f.EventEmitter.subscribe(y.EventType.dialog.showLoadingBar,this.onShowLoadingBar);f.EventEmitter.subscribe(y.EventType.dialog.hideLoadingBar,this.onHideLoadingBar)},unbindEvents(){f.EventEmitter.unsubscribe(y.EventType.dialog.showLoadingBar,this.onShowLoadingBar);f.EventEmitter.unsubscribe(y.EventType.dialog.hideLoadingBar,this.onHideLoadingBar)},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-chat__scope bx-im-content-chat__container" :class="containerClasses" :style="backgroundStyle">\n\t\t\t<div class="bx-im-content-chat__content" ref="content">\n\t\t\t\t<slot name="header" :currentSidebarPanel="currentSidebarPanel">\n\t\t\t\t\t<ChatHeader :dialogId="dialogId" :key="dialogId" :currentSidebarPanel="currentSidebarPanel"/>\n\t\t\t\t</slot>\n\t\t\t\t<div :style="dialogContainerStyle" class="bx-im-content-chat__dialog_container">\n\t\t\t\t\t<Transition name="loading-bar-transition">\n\t\t\t\t\t\t<LoadingBar v-if="showLoadingBar" />\n\t\t\t\t\t</Transition>\n\t\t\t\t\t<div class="bx-im-content-chat__dialog_content">\n\t\t\t\t\t\t<slot name="dialog">\n\t\t\t\t\t\t\t<ChatDialog :dialogId="dialogId" :key="dialogId" />\n\t\t\t\t\t\t</slot>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\x3c!-- Textarea --\x3e\n\t\t\t\t<div v-if="canSend" v-textarea-observer class="bx-im-content-chat__textarea_container" ref="textarea-container">\n\t\t\t\t\t<slot name="textarea" :onTextareaMount="onTextareaMount">\n\t\t\t\t\t\t<ChatTextarea \n\t\t\t\t\t\t\t:dialogId="dialogId" \n\t\t\t\t\t\t\t:key="dialogId" \n\t\t\t\t\t\t\t:withAudioInput="false" \n\t\t\t\t\t\t\t@mounted="onTextareaMount" \n\t\t\t\t\t\t/>\n\t\t\t\t\t</slot>\n\t\t\t\t</div>\n\t\t\t\t<slot v-else-if="isGuest" name="join-panel">\n\t\t\t\t\t<JoinPanel :dialogId="dialogId" />\n\t\t\t\t</slot>\n\t\t\t\t<MutePanel v-else :dialogId="dialogId" />\n\t\t\t\t\x3c!-- End textarea --\x3e\n\t\t\t\t<DropArea :dialogId="dialogId" :container="$refs.content || {}" :key="dialogId" />\n\t\t\t</div>\n\t\t\t<ChatSidebar\n\t\t\t\tv-if="dialogId.length > 0" \n\t\t\t\t:originDialogId="dialogId"\n\t\t\t\t:isActive="!hasCommentsOnTop"\n\t\t\t\t@changePanel="onChangeSidebarPanel" \n\t\t\t/>\n\t\t</div>\n\t`};const ft={name:"CommentsButton",props:{dialogId:{type:String,required:true},counter:{type:Number,required:true}},data(){return{}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)}},template:`\n\t\t<div class="bx-im-dialog-channel__comments-button">\n\t\t\t<div class="bx-im-dialog-channel__comments-button_counter">\n\t\t\t\t{{ counter }}\n\t\t\t</div>\n\t\t</div>\n\t`};class Lt extends L.MessageMenu{getMenuItems(){return[this.getCopyItem(),this.getCopyLinkItem(),this.getCopyFileItem(),this.getPinItem(),this.getForwardItem(),this.getDelimiter(),this.getMarkItem(),this.getFavoriteItem(),this.getDelimiter(),this.getDownloadFileItem(),this.getSaveToDisk(),this.getDelimiter(),this.getEditItem(),this.getDeleteItem()]}}const yt={name:"ChannelMessageList",components:{MessageList:L.MessageList},props:{dialogId:{type:String,required:true}},computed:{ChannelMessageMenu:()=>Lt},template:`\n\t\t<MessageList :dialogId="dialogId" :messageMenuClass="ChannelMessageMenu" />\n\t`};const At={name:"ChannelDialog",components:{ChatDialog:M.ChatDialog,ChannelMessageList:yt,CommentsButton:ft},props:{dialogId:{type:String,required:true}},data(){return{lastScrolledChatId:0}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},layout(){return this.$store.getters["application/getLayout"]},isGuest(){return this.dialog.role===y.UserRole.guest},isChatLayout(){return this.layout.name===y.Layout.chat.name},channelComments(){return this.$store.getters["counters/getChannelComments"](this.dialog.chatId)},totalChannelCommentsCounter(){let t=0;Object.values(this.channelComments).forEach((e=>{t+=e}));return t},showCommentsButton(){return this.isChatLayout&&this.totalChannelCommentsCounter>0}},beforeUnmount(){this.readAllChannelComments()},methods:{async onCommentsButtonClick(){const t=this.getNextChatIdToJump();this.lastScrolledChatId=t;const e=this.$store.getters["messages/comments/getMessageIdByChatId"](t);if(e){this.$refs.dialog.goToMessageContext(e,{position:M.ScrollManager.scrollPosition.messageBottom});return}await this.goToMessageContextByCommentsChatId(t)},async goToMessageContextByCommentsChatId(t){this.$refs.dialog.showLoadingBar();const e=await this.$refs.dialog.getMessageService().loadContextByChatId(t).catch((t=>{console.error("ChannelDialog: goToMessageContextByCommentsChatId error",t)}));this.$refs.dialog.hideLoadingBar();if(!e){console.error("ChannelDialog: no messageId after loading context")}await this.$nextTick();this.$refs.dialog.getScrollManager().scrollToMessage(e,{position:M.ScrollManager.scrollPosition.messageBottom});await this.$nextTick();this.$refs.dialog.highlightMessage(e)},getNextChatIdToJump(){const t=this.getCommentsChatIds();t.sort(((t,e)=>t-e));if(this.lastScrolledChatId===0){return t[0]}const e=t.filter((t=>t>this.lastScrolledChatId));if(e.length===0){return t[0]}return e[0]},getCommentsChatIds(){return Object.keys(this.channelComments).map((t=>Number(t)))},readAllChannelComments(){B.CommentsService.readAllChannelComments(this.dialogId)}},template:`\n\t\t<ChatDialog ref="dialog" :dialogId="dialogId" :resetOnExit="isGuest">\n\t\t\t<template #message-list>\n\t\t\t\t<ChannelMessageList :dialogId="dialogId" />\n\t\t\t</template>\n\t\t\t<template #additional-float-button>\n\t\t\t\t<Transition name="float-button-transition">\n\t\t\t\t\t<CommentsButton\n\t\t\t\t\t\tv-if="showCommentsButton"\n\t\t\t\t\t\t:dialogId="dialogId"\n\t\t\t\t\t\t:counter="totalChannelCommentsCounter"\n\t\t\t\t\t\t@click="onCommentsButtonClick"\n\t\t\t\t\t\tkey="comments"\n\t\t\t\t\t/>\n\t\t\t\t</Transition>\n\t\t\t</template>\n\t\t</ChatDialog>\n\t`};const xt={name:"ChannelHeader",components:{ChatHeader:Ct},props:{dialogId:{type:String,default:""},currentSidebarPanel:{type:String,default:""}},template:`\n\t\t<ChatHeader :dialogId="dialogId" :currentSidebarPanel="currentSidebarPanel" />\n\t`};const Bt={components:{ChatButton:x.Button},props:{dialogId:{type:String,required:true}},computed:{ButtonSize:()=>x.ButtonSize,ButtonColor:()=>x.ButtonColor},methods:{onButtonClick(){this.getChatService().joinChat(this.dialogId)},getChatService(){if(!this.chatService){this.chatService=new B.ChatService}return this.chatService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-chat__textarea_placeholder">\n\t\t\t<ChatButton\n\t\t\t\t:size="ButtonSize.XL"\n\t\t\t\t:color="ButtonColor.Primary"\n\t\t\t\t:text="loc('IM_CONTENT_BLOCKED_TEXTAREA_JOIN_CHANNEL_V2')"\n\t\t\t\t:isRounded="true"\n\t\t\t\t@click="onButtonClick"\n\t\t\t/>\n\t\t</div>\n\t`};const Nt={name:"ChannelTextarea",components:{ChatTextarea:A.ChatTextarea},props:{dialogId:{type:String,default:""}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<ChatTextarea\n\t\t\t:dialogId="dialogId"\n\t\t\t:placeholder="this.loc('IM_CONTENT_CHANNEL_TEXTAREA_PLACEHOLDER')"\n\t\t\t:withCreateMenu="false"\n\t\t\t:withMarket="false"\n\t\t\t:withAudioInput="false"\n\t\t\tclass="bx-im-channel-send-panel__container"\n\t\t/>\n\t`};const Pt={name:"ChannelContent",components:{BaseChatContent:St,ChannelHeader:xt,ChannelDialog:At,ChannelTextarea:Nt,JoinPanel:Bt},props:{dialogId:{type:String,required:true}},template:`\n\t\t<BaseChatContent :dialogId="dialogId">\n\t\t\t<template #header="{ currentSidebarPanel }">\n\t\t\t\t<ChannelHeader :dialogId="dialogId" :currentSidebarPanel="currentSidebarPanel" :key="dialogId" />\n\t\t\t</template>\n\t\t\t<template #dialog>\n\t\t\t\t<ChannelDialog :dialogId="dialogId" :key="dialogId" />\n\t\t\t</template>\n\t\t\t<template #join-panel>\n\t\t\t\t<JoinPanel :dialogId="dialogId" />\n\t\t\t</template>\n\t\t\t<template #textarea="{ onTextareaMount }">\n\t\t\t\t<ChannelTextarea :dialogId="dialogId" :key="dialogId" @mounted="onTextareaMount" />\n\t\t\t</template>\n\t\t</BaseChatContent>\n\t`};const Ot={data(){return{}},computed:{iconClass(){return this.isEmptyRecent?"--empty":"--default"},text(){if(this.isEmptyRecent){return this.loc("IM_CONTENT_CHAT_NO_CHATS_START_MESSAGE")}if(this.isChannelLayout){return this.loc("IM_CONTENT_CHANNEL_START_MESSAGE_V3")}return this.loc("IM_CONTENT_CHAT_START_MESSAGE_V2")},subtext(){if(this.isChannelLayout){return this.loc("IM_CONTENT_CHANNEL_START_MESSAGE_SUBTITLE")}return""},isEmptyRecent(){return B.RecentService.getInstance().getCollection().length===0},isChannelLayout(){return this.layout.name===y.Layout.channel.name},layout(){return this.$store.getters["application/getLayout"]},backgroundStyle(){return p.ThemeManager.getCurrentBackgroundStyle()}},methods:{loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div class="bx-im-content-chat-start__container" :style="backgroundStyle">\n\t\t\t<div class="bx-im-content-chat-start__content">\n\t\t\t\t<div class="bx-im-content-chat-start__icon" :class="iconClass"></div>\n\t\t\t\t<div class="bx-im-content-chat-start__title">\n\t\t\t\t\t{{ text }}\n\t\t\t\t</div>\n\t\t\t\t<div v-if="subtext" class="bx-im-content-chat-start__subtitle">\n\t\t\t\t\t{{ subtext }}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};class Dt{async updateLastActivityDate(t){if(this.isPullServerWithUserStatusSupport()){const e=await this.getUserActivityFromPull(t);if(!e){return Promise.resolve()}return this.updateUserModel(t,{lastActivityDate:e})}const e=await this.requestUserData(t);return this.updateUserModel(t,e)}async getUserActivityFromPull(t){const e=await v.Core.getPullClient().getUsersLastSeen([t]).catch((t=>{console.error("UserService: error getting user activity from P&P",t)}));if(!S.Type.isNumber(e[t])){return null}const n=e[t]*1e3;return new Date(Date.now()-n)}async requestUserData(t){T.Logger.warn(`UserService: get actual user data for - ${t}`);const e=await v.Core.getRestClient().callMethod(y.RestMethod.imUserGet,{ID:t}).catch((t=>{console.error("UserService: error getting user data",t)}));return e.data()}async updateUserModel(t,e){T.Logger.warn("UserService: update user data",e);return v.Core.getStore().dispatch("users/update",{id:t,fields:e})}isPullServerWithUserStatusSupport(){return v.Core.getPullClient().isJsonRpc()}}const Ht={name:"ChatOpener",components:{BaseChatContent:St,ChannelContent:Pt,EmptyState:Ot},props:{dialogId:{type:String,required:true}},emits:["close"],data(){return{}},computed:{layout(){return this.$store.getters["application/getLayout"]},dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},isUser(){return this.dialog.type===y.ChatType.user},isChannel(){return C.ChannelManager.isChannel(this.dialogId)},isGuest(){return this.dialog.role===y.UserRole.guest}},watch:{dialogId(t,e){T.Logger.warn(`ChatContent: switching from ${e||"empty"} to ${t}`);this.onChatChange()}},created(){if(!this.dialogId){return}this.onChatChange()},methods:{async onChatChange(){if(this.dialogId===""){return}if(u.Utils.dialog.isExternalId(this.dialogId)){const t=await this.getChatService().prepareDialogId(this.dialogId);void e.LayoutManager.getInstance().setLayout({name:y.Layout.chat.name,entityId:t,contextId:this.layout.contextId});return}if(this.dialog.inited){T.Logger.warn(`ChatContent: chat ${this.dialogId} is already loaded`);if(this.isUser){const t=parseInt(this.dialog.dialogId,10);void this.getUserService().updateLastActivityDate(t)}else if(this.isChannel&&!this.isGuest){T.Logger.warn(`ChatContent: channel ${this.dialogId} is loaded, loading comments metadata`);void this.getChatService().loadCommentInfo(this.dialogId)}_.Analytics.getInstance().onOpenChat(this.dialog);return}if(this.dialog.loading){T.Logger.warn(`ChatContent: chat ${this.dialogId} is loading`);return}if(this.layout.contextId){await this.loadChatWithContext();_.Analytics.getInstance().onOpenChat(this.dialog);return}await this.loadChat();_.Analytics.getInstance().onOpenChat(this.dialog)},async loadChatWithContext(){T.Logger.warn(`ChatContent: loading chat ${this.dialogId} with context - ${this.layout.contextId}`);await this.getChatService().loadChatWithContext(this.dialogId,this.layout.contextId).catch((t=>{this.handleChatLoadError(t);T.Logger.error(t);d.Messenger.openChat()}));T.Logger.warn(`ChatContent: chat ${this.dialogId} is loaded with context of ${this.layout.contextId}`)},async loadChat(){T.Logger.warn(`ChatContent: loading chat ${this.dialogId}`);await this.getChatService().loadChatWithMessages(this.dialogId).catch((t=>{this.handleChatLoadError(t);T.Logger.error(t);d.Messenger.openChat()}));T.Logger.warn(`ChatContent: chat ${this.dialogId} is loaded`)},handleChatLoadError(t){const[e]=t;if(e.code==="ACCESS_DENIED"){this.showNotification(this.loc("IM_CONTENT_CHAT_ACCESS_ERROR"))}else if(e.code==="MESSAGE_NOT_FOUND"){this.showNotification(this.loc("IM_CONTENT_CHAT_CONTEXT_MESSAGE_NOT_FOUND"))}},showNotification(t){BX.UI.Notification.Center.notify({content:t})},getChatService(){if(!this.chatService){this.chatService=new B.ChatService}return this.chatService},getUserService(){if(!this.userService){this.userService=new Dt}return this.userService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-default-chat__container">\n\t\t\t<EmptyState v-if="!dialogId" />\n\t\t\t<ChannelContent v-else-if="isChannel" :dialogId="dialogId" />\n\t\t\t<BaseChatContent\n\t\t\t\tv-else\n\t\t\t\t:dialogId="dialogId"\n\t\t\t\tclass="bx-im-content-comments__container"\n\t\t\t/>\n\t\t</div>\n\t`};const kt={name:"SubscribeToggle",components:{Toggle:x.Toggle},props:{dialogId:{type:String,required:true}},data(){return{}},computed:{ToggleSize:()=>x.ToggleSize,dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},postMessageId(){return this.$store.getters["messages/comments/getMessageIdByChatId"](this.dialog.chatId)},isSubscribed(){return this.$store.getters["messages/comments/isUserSubscribed"](this.postMessageId)}},methods:{onToggleClick(){if(this.isSubscribed){B.CommentsService.unsubscribe(this.postMessageId);return}B.CommentsService.subscribe(this.postMessageId)},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div @click="onToggleClick" class="bx-im-comments-header-follow__container">\n\t\t\t<div class="bx-im-comments-header-follow__text">{{ loc('IM_CONTENT_COMMENTS_FOLLOW_TOGGLE_TEXT') }}</div>\n\t\t\t<Toggle :size="ToggleSize.M" :isEnabled="isSubscribed" />\n\t\t</div>\n\t`};const wt={name:"CommentsHeader",components:{ChatHeader:Ct,ChatAvatar:x.ChatAvatar,SubscribeToggle:kt},props:{dialogId:{type:String,default:""},channelId:{type:String,required:true},currentSidebarPanel:{type:String,default:""}},computed:{AvatarSize:()=>x.AvatarSize,channel(){return this.$store.getters["chats/get"](this.channelId,true)},showSubscribeToggle(){return b.PermissionManager.getInstance().canPerformAction(y.ChatActionType.subscribeToComments,this.dialogId)}},methods:{onBackClick(){f.EventEmitter.emit(y.EventType.dialog.closeComments)},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<ChatHeader\n\t\t\t:dialogId="dialogId"\n\t\t\t:currentSidebarPanel="currentSidebarPanel"\n\t\t\tclass="bx-im-comment-header__container"\n\t\t>\n\t\t\t<template #left>\n\t\t\t\t<div @click="onBackClick" class="bx-im-comment-header__back"></div>\n\t\t\t\t<div class="bx-im-comment-header__info">\n\t\t\t\t\t<div class="bx-im-comment-header__title">{{ loc('IM_CONTENT_COMMENTS_HEADER_TITLE') }}</div>\n\t\t\t\t\t<div class="bx-im-comment-header__subtitle">\n\t\t\t\t\t\t<div class="bx-im-comment-header__subtitle_avatar">\n\t\t\t\t\t\t\t<ChatAvatar :avatarDialogId="channelId" :contextDialogId="channelId" :size="AvatarSize.XS" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="bx-im-comment-header__subtitle_text">{{ channel.name }}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t\t<template v-if="showSubscribeToggle" #before-actions>\n\t\t\t\t<SubscribeToggle :dialogId="dialogId" />\n\t\t\t</template>\n\t\t</ChatHeader>\n\t`};const Rt={name:"CommentsDialogLoader",data(){return{}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-comments-dialog-loader__container">\n\t\t\t<div class="bx-im-comments-dialog-loader__spinner"></div>\n\t\t</div>\n\t`};class $t extends L.MessageMenu{getMenuItems(){if(this.isPostMessage()){return[this.getCopyItem(),this.getCopyFileItem(),this.getDelimiter(),this.getDownloadFileItem(),this.getSaveToDisk(),this.getDelimiter(),this.getOpenInChannelItem()]}return[this.getReplyItem(),this.getCopyItem(),this.getCopyFileItem(),this.getDelimiter(),this.getFavoriteItem(),this.getDelimiter(),this.getCreateItem(),this.getDelimiter(),this.getDownloadFileItem(),this.getSaveToDisk(),this.getDelimiter(),this.getEditItem(),this.getDeleteItem()]}getOpenInChannelItem(){return{text:S.Loc.getMessage("IM_CONTENT_COMMENTS_MESSAGE_MENU_OPEN_IN_CHANNEL"),onclick:()=>{f.EventEmitter.emit(y.EventType.dialog.closeComments);this.menuInstance.close()}}}isPostMessage(){const{dialogId:t}=this.store.getters["chats/getByChatId"](this.context.chatId);return t!==this.context.dialogId}}const Ut={name:"CommentsMessageList",components:{MessageList:L.MessageList,CommentsDialogLoader:Rt,AuthorGroup:L.AuthorGroup,...L.MessageComponents},props:{dialogId:{type:String,required:true}},computed:{CommentsMessageMenu:()=>$t,dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},showPostMessage(){return this.dialog.inited&&!this.dialog.hasPrevPage},postMessageId(){return this.$store.getters["messages/comments/getMessageIdByChatId"](this.dialog.chatId)},postMessage(){return this.$store.getters["messages/getById"](this.postMessageId)},postAuthorGroup(){if(!this.dialog.inited){return null}const t=new L.CollectionManager(this.dialogId);return t.formatAuthorGroup(this.postMessage)}},methods:{onPostMessageMouseUp(t,e){this.$refs.messageList.onMessageMouseUp(t,e)},getMessageComponentName(t){return new L.MessageComponentManager(t).getName()}},template:`\n\t\t<MessageList\n\t\t\t:dialogId="dialogId"\n\t\t\t:messageMenuClass="CommentsMessageMenu"\n\t\t\tref="messageList"\n\t\t>\n\t\t\t<template #loader>\n\t\t\t\t<CommentsDialogLoader />\n\t\t\t</template>\n\t\t\t<template v-if="showPostMessage" #before-messages>\n\t\t\t\t<div class="bx-im-comments-message-list__channel-post">\n\t\t\t\t\t<AuthorGroup :item="postAuthorGroup" :contextDialogId="dialogId">\n\t\t\t\t\t\t<template #message>\n\t\t\t\t\t\t\t<component\n\t\t\t\t\t\t\t\t:is="getMessageComponentName(postMessage)"\n\t\t\t\t\t\t\t\t:item="postMessage"\n\t\t\t\t\t\t\t\t:dialogId="dialogId"\n\t\t\t\t\t\t\t\t:key="postMessage.id"\n\t\t\t\t\t\t\t\t@mouseup="onPostMessageMouseUp(postMessage, $event)"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t</component>\n\t\t\t\t\t\t</template>\n\t\t\t\t\t</AuthorGroup>\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t</MessageList>\n\t`};const Ft={name:"CommentsDialog",components:{ChatDialog:M.ChatDialog,CommentsMessageList:Ut,PinnedMessages:M.PinnedMessages},props:{dialogId:{type:String,required:true}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},dialogInited(){return this.dialog.inited},postMessageId(){return this.$store.getters["messages/comments/getMessageIdByChatId"](this.dialog.chatId)},postMessage(){return this.$store.getters["messages/getById"](this.postMessageId)}},methods:{async goToPostMessageContext(){const t=this.$refs.dialog;const e=this.dialogInited&&!this.dialog.hasPrevPage;if(e){await t.getScrollManager().animatedScrollToMessage(this.postMessageId);t.highlightMessage(this.postMessageId);return}t.showLoadingBar();await t.getMessageService().loadFirstPage().catch((t=>{T.Logger.error("goToMessageContext error",t)}));await this.$nextTick();t.hideLoadingBar();t.getScrollManager().scrollToMessage(this.postMessageId);await this.$nextTick();t.highlightMessage(this.postMessageId)},onPinnedPostMessageClick(){this.goToPostMessageContext()}},template:`\n\t\t<ChatDialog ref="dialog" :dialogId="dialogId" :saveScrollOnExit="false" :resetOnExit="true">\n\t\t\t<template v-if="dialogInited" #pinned-panel>\n\t\t\t\t<PinnedMessages\n\t\t\t\t\t:dialogId="dialogId"\n\t\t\t\t\t:messages="[postMessage]"\n\t\t\t\t\t@messageClick="onPinnedPostMessageClick"\n\t\t\t\t/>\n\t\t\t</template>\n\t\t\t<template #message-list>\n\t\t\t\t<CommentsMessageList :dialogId="dialogId" />\n\t\t\t</template>\n\t\t</ChatDialog>\n\t`};const Xt={name:"CommentsTextarea",components:{ChatTextarea:A.ChatTextarea},props:{dialogId:{type:String,default:""}},template:`\n\t\t<ChatTextarea\n\t\t\t:dialogId="dialogId"\n\t\t\t:withMarket="false"\n\t\t\t:withAudioInput="false"\n\t\t\tclass="bx-im-comments-send-panel__container"\n\t\t/>\n\t`};const zt={components:{ChatButton:x.Button},props:{dialogId:{type:String,required:true}},computed:{ButtonSize:()=>x.ButtonSize,ButtonColor:()=>x.ButtonColor},methods:{onButtonClick(){this.getChatService().joinChat(this.dialogId)},getChatService(){if(!this.chatService){this.chatService=new B.ChatService}return this.chatService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-chat__textarea_placeholder">\n\t\t\t<ChatButton\n\t\t\t\t:size="ButtonSize.XL"\n\t\t\t\t:color="ButtonColor.Primary"\n\t\t\t\t:text="loc('IM_CONTENT_BLOCKED_TEXTAREA_JOIN_CHANNEL_V2')"\n\t\t\t\t:isRounded="true"\n\t\t\t\t@click="onButtonClick"\n\t\t\t/>\n\t\t</div>\n\t`};const Gt={name:"CommentsContent",components:{BaseChatContent:St,CommentsHeader:wt,CommentsDialog:Ft,CommentsTextarea:Xt,JoinPanel:zt},props:{dialogId:{type:String,required:true},channelId:{type:String,required:true}},template:`\n\t\t<BaseChatContent :dialogId="dialogId">\n\t\t\t<template #header="{ currentSidebarPanel }">\n\t\t\t\t<CommentsHeader\n\t\t\t\t\t:dialogId="dialogId"\n\t\t\t\t\t:channelId="channelId"\n\t\t\t\t\t:currentSidebarPanel="currentSidebarPanel"\n\t\t\t\t\t:key="dialogId"\n\t\t\t\t/>\n\t\t\t</template>\n\t\t\t<template #dialog>\n\t\t\t\t<CommentsDialog :dialogId="dialogId" :key="dialogId" />\n\t\t\t</template>\n\t\t\t<template #join-panel>\n\t\t\t\t<JoinPanel :dialogId="dialogId" />\n\t\t\t</template>\n\t\t\t<template #textarea="{ onTextareaMount }">\n\t\t\t\t<CommentsTextarea :dialogId="dialogId" :key="dialogId" @mounted="onTextareaMount" />\n\t\t\t</template>\n\t\t</BaseChatContent>\n\t`};const qt={name:"CommentsOpener",components:{CommentsContent:Gt},props:{postId:{type:Number,required:true},channelId:{type:String,required:true}},emits:["close"],data(){return{}},computed:{dialog(){return this.$store.getters["chats/getByChatId"](this.commentsChatId)},commentInfo(){return this.$store.getters["messages/comments/getByMessageId"](this.postId)},commentsChatId(){return this.commentInfo.chatId},commentsDialogId(){if(!this.dialog){return""}return this.dialog.dialogId}},created(){this.onCreated()},methods:{async onCreated(){await this.loadChat();_.Analytics.getInstance().onOpenChat(this.dialog)},async loadChat(){T.Logger.warn(`CommentsContent: loading comments for post ${this.postId}`);await this.getChatService().loadComments(this.postId).catch((t=>{this.handleChatLoadError(t);T.Logger.error(t);this.$emit("close")}));T.Logger.warn(`CommentsContent: comments for post ${this.postId} are loaded`)},handleChatLoadError(t){const[e]=t;if(e.code==="ACCESS_DENIED"){this.showNotification(this.loc("IM_CONTENT_CHAT_ACCESS_ERROR"))}},showNotification(t){BX.UI.Notification.Center.notify({content:t})},getChatService(){if(!this.chatService){this.chatService=new B.ChatService}return this.chatService}},template:`\n\t\t<div class="bx-im-content-comments__container">\n\t\t\t<CommentsContent :dialogId="commentsDialogId" :channelId="channelId" />\n\t\t</div>\n\t`};const jt={name:"ChatContent",components:{ChatOpener:Ht,CommentsOpener:qt},props:{entityId:{type:String,default:""}},data(){return{commentsPostId:0,commentsAnimationFlag:false}},computed:{layout(){return this.$store.getters["application/getLayout"]},showComments(){return this.$store.getters["messages/comments/areOpened"]}},watch:{layout(){this.closeComments()}},created(){f.EventEmitter.subscribe(y.EventType.dialog.openComments,this.onOpenComments);f.EventEmitter.subscribe(y.EventType.dialog.closeComments,this.onCloseComments)},beforeUnmount(){f.EventEmitter.unsubscribe(y.EventType.dialog.openComments,this.onOpenComments);f.EventEmitter.unsubscribe(y.EventType.dialog.closeComments,this.onCloseComments)},methods:{onOpenComments(t){const{messageId:e}=t.getData();this.commentsPostId=e;this.commentsAnimationFlag=true;this.$store.dispatch("messages/comments/setOpened",{channelDialogId:this.entityId})},onCloseComments(){this.closeComments()},closeComments(){this.commentsPostId=0;this.$store.dispatch("messages/comments/setClosed")},onCommentsAnimationEnd(){this.commentsAnimationFlag=false}},template:`\n\t\t<ChatOpener :dialogId="entityId" :class="{'--comments-show-animation': commentsAnimationFlag}" />\n\t\t<Transition name="comments-content" @after-enter="onCommentsAnimationEnd">\n\t\t\t<CommentsOpener\n\t\t\t\tv-if="showComments"\n\t\t\t\t:postId="commentsPostId"\n\t\t\t\t:channelId="entityId"\n\t\t\t/>\n\t\t</Transition>\n\t`};t.ChatContent=jt})(this.BX.Messenger.v2.Component.Content=this.BX.Messenger.v2.Component.Content||{},BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Component,BX.Messenger.v2.Component.EntitySelector,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Vue3.Directives,BX.Messenger.v2.Component.Animation,BX.Messenger.v2.Lib,BX.UI.Uploader,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Application,BX,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Model,BX.Messenger.v2.Component.Dialog,BX,BX.Event,BX.Messenger.v2.Component,BX.Messenger.v2.Const,BX.Messenger.v2.Component,BX.Messenger.v2.Component.Elements,BX.Messenger.v2.Provider.Service);
//# sourceMappingURL=chat-content.bundle.map.js