this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(t,e,n,i,o,a,s,r,l,d,c,h,g,C,p,u,m,_,T,I,v,b){"use strict";const E="im-add-to-chat-hint-popup";const M={name:"AddToChatHint",components:{MessengerPopup:T.MessengerPopup},props:{bindElement:{type:Object,required:true}},emits:["close","hide"],computed:{POPUP_ID:()=>E,config(){return{darkMode:true,bindElement:this.bindElement,angle:true,width:346,closeIcon:true,offsetLeft:8,className:"bx-im-copilot-add-to-chat-hint__scope",contentBorderRadius:0}}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<MessengerPopup\n\t\t\tv-slot="{enableAutoHide, disableAutoHide}"\n\t\t\t:config="config"\n\t\t\t@close="$emit('close')"\n\t\t\t:id="POPUP_ID"\n\t\t>\n\t\t\t<div class="bx-im-copilot-add-to-chat-hint__title">\n\t\t\t\t{{ loc('IM_CONTENT_COPILOT_ADD_TO_CHAT_HINT_TITLE') }}\n\t\t\t</div>\n\t\t\t<br />\n\t\t\t<div class="bx-im-copilot-add-to-chat-hint__description">\n\t\t\t\t{{ loc('IM_CONTENT_COPILOT_ADD_TO_CHAT_HINT_DESCRIPTION') }}\n\t\t\t</div>\n\t\t\t<br />\n\t\t\t<button class="bx-im-copilot-add-to-chat-hint__hide" @click="$emit('hide')">\n\t\t\t\t{{ loc('IM_CONTENT_COPILOT_ADD_TO_CHAT_HINT_HIDE') }}\n\t\t\t</button>\n\t\t</MessengerPopup>\n\t`};const S={name:"ChatHeader",components:{EditableChatTitle:T.EditableChatTitle,AddToChat:d.AddToChat,ChatAvatar:T.ChatAvatar,AddToChatHint:M},props:{dialogId:{type:String,default:""},currentSidebarPanel:{type:String,default:""}},data(){return{showAddToChatPopup:false,showAddToChatHint:false}},computed:{AvatarSize:()=>T.AvatarSize,dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},chatId(){return this.dialog.chatId},userCounter(){return I.Loc.getMessagePlural("IM_CONTENT_COPILOT_HEADER_USER_COUNT",this.dialog.userCounter,{"#COUNT#":this.dialog.userCounter})},isInited(){return this.dialog.inited},isGroupCopilotChat(){return this.dialog.userCounter>2},isSidebarOpened(){return this.currentSidebarPanel.length>0},copilotRole(){const t=this.$store.getters["copilot/chats/getRole"](this.dialogId);if(!t){return""}return t.name}},mounted(){this.showAddToChatHint=l.PromoManager.getInstance().needToShow(g.PromoId.addUsersToCopilotChat)},methods:{onNewTitleSubmit(t){this.getChatService().renameChat(this.dialogId,t).catch((()=>{BX.UI.Notification.Center.notify({content:this.loc("IM_CONTENT_COPILOT_HEADER_RENAME_ERROR")})}))},getChatService(){if(!this.chatService){this.chatService=new C.ChatService}return this.chatService},loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)},openAddToChatPopup(){this.showAddToChatPopup=true},onMembersClick(){if(!this.isInited){return}if(this.currentSidebarPanel===g.SidebarDetailBlock.members){r.EventEmitter.emit(g.EventType.sidebar.close,{panel:g.SidebarDetailBlock.members});return}r.EventEmitter.emit(g.EventType.sidebar.open,{panel:g.SidebarDetailBlock.members,dialogId:this.dialogId})},toggleRightPanel(){if(this.currentSidebarPanel){r.EventEmitter.emit(g.EventType.sidebar.close,{panel:""});return}r.EventEmitter.emit(g.EventType.sidebar.open,{panel:g.SidebarDetailBlock.main,dialogId:this.dialogId})},onHintHide(){void l.PromoManager.getInstance().markAsWatched(g.PromoId.addUsersToCopilotChat);this.showAddToChatHint=false}},template:`\n\t\t<div class="bx-im-copilot-header__container">\n\t\t\t<div class="bx-im-copilot-header__left">\n\t\t\t\t<div class="bx-im-copilot-header__avatar">\n\t\t\t\t\t<ChatAvatar\n\t\t\t\t\t\t:avatarDialogId="dialogId"\n\t\t\t\t\t\t:contextDialogId="dialogId"\n\t\t\t\t\t\t:withSpecialTypes="false"\n\t\t\t\t\t\t:size="AvatarSize.L"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-copilot-header__info">\n\t\t\t\t\t<EditableChatTitle :dialogId="dialogId" @newTitleSubmit="onNewTitleSubmit" />\n\t\t\t\t\t<div \n\t\t\t\t\t\tv-if="isGroupCopilotChat"\n\t\t\t\t\t\t:title="loc('IM_CONTENT_COPILOT_HEADER_OPEN_MEMBERS_TITLE')"\n\t\t\t\t\t\t@click="onMembersClick"\n\t\t\t\t\t\tclass="bx-im-copilot-header__subtitle --click"\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ userCounter }}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-else class="bx-im-copilot-header__subtitle">\n\t\t\t\t\t\t{{ copilotRole }}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="bx-im-copilot-header__right">\n\t\t\t\t<div\n\t\t\t\t\t:title="loc('IM_CONTENT_COPILOT_HEADER_OPEN_INVITE_POPUP_TITLE')"\n\t\t\t\t\t:class="{'--active': showAddToChatPopup}"\n\t\t\t\t\tclass="bx-im-copilot-header__icon --add-users"\n\t\t\t\t\t@click="openAddToChatPopup"\n\t\t\t\t\tref="add-users"\n\t\t\t\t>\n\t\t\t\t\t<AddToChatHint\n\t\t\t\t\t\tv-if="showAddToChatHint"\n\t\t\t\t\t\t:bindElement="$refs['add-users']"\n\t\t\t\t\t\t@close="showAddToChatHint = false"\n\t\t\t\t\t\t@hide="onHintHide"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\tclass="bx-im-copilot-header__icon --panel"\n\t\t\t\t\t:title="loc('IM_CONTENT_CHAT_HEADER_OPEN_SIDEBAR')"\n\t\t\t\t\t:class="{'--active': isSidebarOpened}"\n\t\t\t\t\t@click="toggleRightPanel"\n\t\t\t\t></div>\n\t\t\t</div>\n\t\t\t<AddToChat\n\t\t\t\t:bindElement="$refs['add-users'] || {}"\n\t\t\t\t:dialogId="dialogId"\n\t\t\t\t:showPopup="showAddToChatPopup"\n\t\t\t\t:popupConfig="{offsetTop: 15, offsetLeft: -300}"\n\t\t\t\t@close="showAddToChatPopup = false"\n\t\t\t/>\n\t\t</div>\n\t`};const f="#fff";const x="#eee";const y="rgba(82, 92, 105, 0.9)";const O={name:"EmptyState",components:{ChatButton:T.Button,CopilotRolesDialog:T.CopilotRolesDialog},data(){return{isCreatingChat:false,showRolesDialog:false}},computed:{ButtonSize:()=>T.ButtonSize,preparedText(){return this.loc("IM_CONTENT_COPILOT_EMPTY_STATE_MESSAGE_MSGVER_1",{"#BR#":"\n"})},buttonColorScheme(){return{borderColor:g.Color.transparent,backgroundColor:f,iconColor:y,textColor:y,hoverColor:x}}},methods:{onCreateChatClick(){this.showRolesDialog=true},async createChat(t){const e=t.code;this.isCreatingChat=true;this.showRolesDialog=false;const n=await this.getCopilotService().createChat({roleCode:e}).catch((()=>{this.isCreatingChat=false;this.showCreateChatError()}));this.isCreatingChat=false;void h.Messenger.openCopilot(n)},showCreateChatError(){BX.UI.Notification.Center.notify({content:this.loc("IM_CONTENT_COPILOT_EMPTY_STATE_ERROR_CREATING_CHAT")})},getCopilotService(){if(!this.copilotService){this.copilotService=new C.CopilotService}return this.copilotService},loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div class="bx-im-content-copilot-empty-state__container">\n\t\t\t<div class="bx-im-content-copilot-empty-state__content">\n\t\t\t\t<div class="bx-im-content-copilot-empty-state__icon"></div>\n\t\t\t\t<div class="bx-im-content-copilot-empty-state__text">{{ preparedText }}</div>\n\t\t\t\t<ChatButton\n\t\t\t\t\tclass="--black-loader"\n\t\t\t\t\t:size="ButtonSize.XL"\n\t\t\t\t\t:customColorScheme="buttonColorScheme"\n\t\t\t\t\t:text="loc('IM_CONTENT_COPILOT_EMPTY_STATE_ASK_QUESTION')"\n\t\t\t\t\t:isRounded="true"\n\t\t\t\t\t:isLoading="isCreatingChat"\n\t\t\t\t\t@click="onCreateChatClick"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<CopilotRolesDialog \n\t\t\t\tv-if="showRolesDialog"\n\t\t\t\t@selectRole="createChat"\n\t\t\t\t@close="showRolesDialog = false"\n\t\t\t/>\n\t\t</div>\n\t`};const A={name:"CopilotTextarea",components:{ChatTextarea:p.ChatTextarea},props:{dialogId:{type:String,default:""}},computed:{CopilotDraftManager:()=>u.CopilotDraftManager},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<ChatTextarea\n\t\t\t:dialogId="dialogId"\n\t\t\t:placeholder="this.loc('IM_CONTENT_COPILOT_TEXTAREA_PLACEHOLDER')"\n\t\t\t:withCreateMenu="false"\n\t\t\t:withMarket="false"\n\t\t\t:withEdit="false"\n\t\t\t:withUploadMenu="false"\n\t\t\t:withSmileSelector="false"\n\t\t\t:draftManagerClass="CopilotDraftManager"\n\t\t/>\n\t`};const B=Object.freeze({personal:"chat_copilot_tab_one_by_one",group:"chat_copilot_tab_multi"});class P extends v.MessageMenu{getMenuItems(){return[this.getCopyItem(),this.getFavoriteItem(),this.getForwardItem(),this.getSendFeedbackItem(),this.getDeleteItem()]}getSendFeedbackItem(){const t=new b.CopilotManager;if(!t.isCopilotBot(this.context.authorId)){return null}return{text:I.Loc.getMessage("IM_CONTENT_COPILOT_CONTEXT_MENU_FEEDBACK"),onclick:()=>{void this.openForm();this.menuInstance.close()}}}async openForm(){const t=Math.round(Math.random()*1e3);await I.Runtime.loadExtension(["ui.feedback.form"]);BX.UI.Feedback.Form.open({id:`im.copilot.feedback-${t}`,forms:[{zones:["es"],id:684,lang:"es",sec:"svvq1x"},{zones:["en"],id:686,lang:"en",sec:"tjwodz"},{zones:["de"],id:688,lang:"de",sec:"nrwksg"},{zones:["com.br"],id:690,lang:"com.br",sec:"kpte6m"},{zones:["ru","by","kz"],id:692,lang:"ru",sec:"jbujn0"}],presets:{sender_page:this.getCopilotChatContext(),language:I.Loc.getMessage("LANGUAGE_ID"),cp_answer:this.context.text}})}getCopilotChatContext(){const t=this.store.getters["chats/get"](this.context.dialogId);if(t.userCounter<=2){return B.personal}return B.group}}const w={name:"CopilotMessageList",components:{MessageList:v.MessageList,DialogStatus:T.DialogStatus},props:{dialogId:{type:String,required:true}},computed:{CopilotMessageMenu:()=>P},template:`\n\t\t<MessageList :dialogId="dialogId" :messageMenuClass="CopilotMessageMenu" />\n\t`};const N=m.BitrixVue.cloneComponent(_.ChatDialog,{name:"CopilotDialog",computed:{messageListComponent(){return w}}});const R={name:"CopilotContent",components:{EmptyState:O,ChatHeader:S,CopilotDialog:N,CopilotTextarea:A,ChatSidebar:o.ChatSidebar},directives:{"textarea-observer":{mounted(t,e){e.instance.textareaResizeManager.observeTextarea(t)},beforeUnmount(t,e){e.instance.textareaResizeManager.unobserveTextarea(t)}}},props:{entityId:{type:String,default:""},contextMessageId:{type:Number,default:0}},data(){return{textareaHeight:0,currentSidebarPanel:""}},computed:{layout(){return this.$store.getters["application/getLayout"]},dialog(){return this.$store.getters["chats/get"](this.entityId,true)},containerClasses(){const t=this.$store.getters["application/settings/get"](g.Settings.appearance.alignment);return[`--${t}-align`]},backgroundStyle(){const t=4;return n.ThemeManager.getBackgroundStyleById(t)},dialogContainerStyle(){const t=64;return{height:`calc(100% - ${t}px - ${this.textareaHeight}px)`}}},watch:{entityId(t,n){e.Logger.warn(`CopilotContent: switching from ${n||"empty"} to ${t}`);this.onChatChange()},textareaHeight(t,e){if(!this.dialog.inited||e===0){return}r.EventEmitter.emit(g.EventType.dialog.scrollToBottom,{chatId:this.dialog.chatId,animation:false})}},created(){if(this.entityId){this.onChatChange()}this.initTextareaResizeManager()},methods:{async onChatChange(){if(this.entityId===""){return}if(this.dialog.inited){e.Logger.warn(`CopilotContent: chat ${this.entityId} is already loaded`);a.Analytics.getInstance().onOpenChat(this.dialog);return}if(this.dialog.loading){e.Logger.warn(`CopilotContent: chat ${this.entityId} is loading`);return}if(this.layout.contextId){await this.loadChatWithContext();a.Analytics.getInstance().onOpenChat(this.dialog);return}await this.loadChat();a.Analytics.getInstance().onOpenChat(this.dialog)},onTextareaMount(){const t=this.$refs["textarea-container"];this.textareaHeight=t.clientHeight},loadChatWithContext(){e.Logger.warn(`CopilotContent: loading chat ${this.entityId} with context - ${this.layout.contextId}`);return this.getChatService().loadChatWithContext(this.entityId,this.layout.contextId).then((()=>{e.Logger.warn(`CopilotContent: chat ${this.entityId} is loaded with context of ${this.layout.contextId}`)})).catch((t=>{if(t.code==="ACCESS_ERROR"){this.showNotification(this.loc("IM_CONTENT_CHAT_ACCESS_ERROR"))}e.Logger.error(t);h.Messenger.openCopilot()}))},loadChat(){e.Logger.warn(`CopilotContent: loading chat ${this.entityId}`);return this.getChatService().loadChatWithMessages(this.entityId).then((()=>{e.Logger.warn(`CopilotContent: chat ${this.entityId} is loaded`)})).catch((t=>{const[e]=t;if(e.code==="ACCESS_DENIED"){this.showNotification(this.loc("IM_CONTENT_CHAT_ACCESS_ERROR"))}h.Messenger.openCopilot()}))},initTextareaResizeManager(){this.textareaResizeManager=new i.ResizeManager;this.textareaResizeManager.subscribe(i.ResizeManager.events.onHeightChange,(t=>{const{newHeight:e}=t.getData();this.textareaHeight=e}))},showNotification(t){BX.UI.Notification.Center.notify({content:t})},getChatService(){if(!this.chatService){this.chatService=new C.ChatService}return this.chatService},onChangeSidebarPanel({panel:t}){this.currentSidebarPanel=t},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-chat__container bx-im-content-copilot__container" :class="containerClasses" :style="backgroundStyle">\n\t\t\t<div v-if="entityId" class="bx-im-content-copilot__content">\n\t\t\t\t<ChatHeader :dialogId="entityId" :key="entityId" :currentSidebarPanel="currentSidebarPanel" />\n\t\t\t\t<div :style="dialogContainerStyle" class="bx-im-content-copilot__dialog_container">\n\t\t\t\t\t<div class="bx-im-content-copilot__dialog_content">\n\t\t\t\t\t\t<CopilotDialog :dialogId="entityId" :key="entityId" :textareaHeight="textareaHeight" />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div v-textarea-observer class="bx-im-content-copilot__textarea_container" ref="textarea-container">\n\t\t\t\t\t<CopilotTextarea :dialogId="entityId" :key="entityId" @mounted="onTextareaMount" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<EmptyState v-else />\n\t\t\t<ChatSidebar\n\t\t\t\tv-if="entityId.length > 0"\n\t\t\t\t:originDialogId="entityId"\n\t\t\t\t@changePanel="onChangeSidebarPanel"\n\t\t\t/>\n\t\t</div>\n\t`};t.CopilotContent=R})(this.BX.Messenger.v2.Component.Content=this.BX.Messenger.v2.Component.Content||{},BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Component,BX.Messenger.v2.Lib,BX,BX.Event,BX.Messenger.v2.Lib,BX.Messenger.v2.Component.EntitySelector,BX.Main,BX.Messenger.v2.Lib,BX.Messenger.v2.Const,BX.Messenger.v2.Provider.Service,BX.Messenger.v2.Component,BX.Messenger.v2.Lib,BX.Vue3,BX.Messenger.v2.Component.Dialog,BX.Messenger.v2.Component.Elements,BX,BX.Messenger.v2.Component,BX.Messenger.v2.Lib);
//# sourceMappingURL=copilot-content.bundle.map.js