{"version":3,"file":"model.bundle.js","sources":["../../shared/src/get-by-index.js","../src/nodes/node.js","../src/nodes/element-node.js","../src/nodes/root-node.js","../src/nodes/fragment-node.js","../src/nodes/text-node.js","../src/nodes/new-line-node.js","../src/nodes/tab-node.js","../src/scheme/node-schemes/node-scheme.js","../src/scheme/node-schemes/tag-scheme.js","../src/scheme/bbcode-scheme.js","../src/scheme/node-schemes/text-scheme.js","../src/scheme/node-schemes/new-line-scheme.js","../src/scheme/node-schemes/tab-scheme.js","../src/scheme/default-bbcode-scheme.js"],"sourcesContent":["import { Type } from 'main.core';\n\nexport function getByIndex<T>(array: Array<T>, index: number): ?T\n{\n\tif (!Type.isArray(array))\n\t{\n\t\tthrow new TypeError('array is not a array');\n\t}\n\n\tif (!Type.isInteger(index))\n\t{\n\t\tthrow new TypeError('index is not a integer');\n\t}\n\n\tconst preparedIndex = index < 0 ? array.length + index : index;\n\n\treturn array[preparedIndex];\n};\n","import { Type } from 'main.core';\nimport type { BBCodeEncoder } from 'ui.bbcode.encoder';\nimport { getByIndex } from '../../../shared';\nimport { typeof BBCodeElementNode } from './element-node';\nimport { typeof BBCodeTextNode } from './text-node';\nimport { typeof BBCodeNewLineNode } from './new-line-node';\nimport { typeof BBCodeTabNode } from './tab-node';\nimport { typeof BBCodeRootNode } from './root-node';\nimport { typeof BBCodeFragmentNode } from './fragment-node';\nimport { typeof BBCodeScheme } from '../scheme/bbcode-scheme';\nimport { type BBCodeNodeScheme } from '../scheme/node-schemes/node-scheme';\n\nexport type BBCodeSpecialCharNode = BBCodeNewLineNode | BBCodeTabNode;\nexport type BBCodeContentNode = BBCodeElementNode | BBCodeTextNode | BBCodeSpecialCharNode;\nexport type BBCodeParentNode = BBCodeRootNode | BBCodeElementNode | BBCodeFragmentNode;\n\nexport type BBCodeNodeOptions = {\n\tname?: string,\n\tparent?: BBCodeParentNode | null,\n\tchildren?: Array<BBCodeContentNode | BBCodeFragmentNode>,\n\tscheme: BBCodeScheme,\n};\n\nexport type SerializedBBCodeNode = {\n\tname: string,\n\tchildren: Array<SerializedBBCodeNode>,\n};\n\ntype PrivateMapKey = BBCodeNode | BBCodeContentNode | BBCodeRootNode | BBCodeFragmentNode;\ntype PrivateStorage = {[key: string]: any};\n\nexport const privateMap: WeakMap<PrivateMapKey, PrivateStorage> = new WeakMap();\nexport const nameSymbol: Symbol = Symbol('name');\n\nexport class BBCodeNode\n{\n\t[nameSymbol]: string = '#unknown';\n\tchildren: Array<BBCodeContentNode | BBCodeFragmentNode> = [];\n\n\tconstructor(options: BBCodeNodeOptions = {})\n\t{\n\t\tprivateMap.set(this, {\n\t\t\tdelayedChildren: [],\n\t\t});\n\n\t\tthis.setName(options.name);\n\t\tprivateMap.get(this).scheme = options.scheme;\n\t\tthis.setParent(options.parent);\n\t\tthis.setChildren(options.children);\n\t}\n\n\tstatic get ELEMENT_NODE(): number\n\t{\n\t\treturn 1;\n\t}\n\n\tstatic get TEXT_NODE(): number\n\t{\n\t\treturn 2;\n\t}\n\n\tstatic get ROOT_NODE(): number\n\t{\n\t\treturn 3;\n\t}\n\n\tstatic get FRAGMENT_NODE(): number\n\t{\n\t\treturn 4;\n\t}\n\n\tstatic freezeProperty(node: BBCodeNode, property: string, value: any, enumerable: boolean = true)\n\t{\n\t\tObject.defineProperty(node, property, {\n\t\t\tvalue,\n\t\t\twritable: false,\n\t\t\tconfigurable: false,\n\t\t\tenumerable,\n\t\t});\n\t}\n\n\tstatic makeNonEnumerableProperty(node: BBCodeNode, property: string)\n\t{\n\t\tObject.defineProperty(node, property, {\n\t\t\twritable: false,\n\t\t\tenumerable: false,\n\t\t\tconfigurable: false,\n\t\t});\n\t}\n\n\tstatic flattenChildren(children: Array<BBCodeContentNode | BBCodeFragmentNode>): Array<BBCodeContentNode>\n\t{\n\t\tif (Type.isArrayFilled(children))\n\t\t{\n\t\t\treturn children.flatMap((node: BBCodeContentNode | BBCodeFragmentNode) => {\n\t\t\t\tif (node.getType() === BBCodeNode.FRAGMENT_NODE)\n\t\t\t\t{\n\t\t\t\t\treturn node.getChildren();\n\t\t\t\t}\n\n\t\t\t\treturn node;\n\t\t\t});\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tsetScheme(scheme: BBCodeScheme, onUnknown: (node: BBCodeContentNode) => any)\n\t{\n\t\tprivateMap.get(this).scheme = scheme;\n\t}\n\n\tgetScheme(): BBCodeScheme\n\t{\n\t\treturn privateMap.get(this).scheme;\n\t}\n\n\tgetTagScheme(): BBCodeNodeScheme\n\t{\n\t\treturn this.getScheme().getTagScheme(this.getName());\n\t}\n\n\tgetEncoder(): BBCodeEncoder\n\t{\n\t\treturn this.getScheme().getEncoder();\n\t}\n\n\tprepareCase(value: string): string\n\t{\n\t\tconst scheme: BBCodeScheme = this.getScheme();\n\t\tconst currentCase = scheme.getOutputTagCase();\n\t\tif (currentCase === 'upper')\n\t\t{\n\t\t\treturn value.toUpperCase();\n\t\t}\n\n\t\treturn value.toLowerCase();\n\t}\n\n\tsetName(name: string)\n\t{\n\t\tif (Type.isString(name))\n\t\t{\n\t\t\tthis[nameSymbol] = name.toLowerCase();\n\t\t}\n\t}\n\n\tgetName(): string\n\t{\n\t\treturn this[nameSymbol];\n\t}\n\n\tgetDisplayedName(): string\n\t{\n\t\treturn this.prepareCase(this.getName());\n\t}\n\n\tsetParent(parent: BBCodeParentNode | null = null)\n\t{\n\t\tconst mounted = !this.hasParent() && parent;\n\t\tprivateMap.get(this).parent = parent;\n\n\t\tif (mounted)\n\t\t{\n\t\t\tthis.onNodeDidMount();\n\t\t}\n\t}\n\n\tgetParent(): BBCodeParentNode | null\n\t{\n\t\treturn privateMap.get(this).parent;\n\t}\n\n\tgetType(): number\n\t{\n\t\treturn privateMap.get(this).type;\n\t}\n\n\thasParent(): boolean\n\t{\n\t\treturn Boolean(privateMap.get(this).parent);\n\t}\n\n\tremove()\n\t{\n\t\tif (this.hasParent())\n\t\t{\n\t\t\tthis.getParent().removeChild(this);\n\t\t}\n\t}\n\n\tsetChildren(children: Array<BBCodeContentNode | BBCodeFragmentNode>)\n\t{\n\t\tif (Type.isArray(children))\n\t\t{\n\t\t\tthis.children = [];\n\t\t\tthis.appendChild(...children);\n\t\t}\n\t}\n\n\tgetChildren(): Array<BBCodeContentNode>\n\t{\n\t\treturn [...this.children];\n\t}\n\n\tgetLastChild(): ?BBCodeContentNode\n\t{\n\t\treturn getByIndex(this.getChildren(), -1);\n\t}\n\n\tgetLastChildOfType(type: number): ?BBCodeContentNode\n\t{\n\t\treturn this.getChildren().reverse().find((node: BBCodeContentNode) => {\n\t\t\treturn node.getType() === type;\n\t\t});\n\t}\n\n\tgetLastChildOfName(name: string): ?BBCodeContentNode\n\t{\n\t\treturn this.getChildren().reverse().find((node: BBCodeContentNode) => {\n\t\t\treturn node.getType() === BBCodeNode.ELEMENT_NODE && node.getName() === name;\n\t\t});\n\t}\n\n\tgetFirstChild(): ?BBCodeContentNode\n\t{\n\t\treturn getByIndex(this.getChildren(), 0);\n\t}\n\n\tgetFirstChildOfType(type: number): ?BBCodeContentNode\n\t{\n\t\treturn this.getChildren().find((node: BBCodeContentNode) => {\n\t\t\treturn node.getType() === type;\n\t\t});\n\t}\n\n\tgetFirstChildOfName(name: string): ?BBCodeContentNode\n\t{\n\t\treturn this.getChildren().find((node: BBCodeContentNode) => {\n\t\t\treturn node.getType() === BBCodeNode.ELEMENT_NODE && node.getName() === name;\n\t\t});\n\t}\n\n\tgetPreviewsSibling(): ?BBCodeContentNode\n\t{\n\t\tif (this.hasParent())\n\t\t{\n\t\t\tconst parentChildren: Array<BBCodeContentNode> = this.getParent().getChildren();\n\t\t\tconst currentIndex: number = parentChildren.indexOf(this);\n\t\t\tif (currentIndex > 0)\n\t\t\t{\n\t\t\t\treturn getByIndex(parentChildren, currentIndex - 1);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tgetPreviewsSiblings(): ?Array<BBCodeContentNode>\n\t{\n\t\tif (this.hasParent())\n\t\t{\n\t\t\tconst parentChildren: Array<BBCodeContentNode> = this.getParent().getChildren();\n\t\t\tconst currentIndex: number = parentChildren.indexOf(this);\n\n\t\t\treturn parentChildren.filter((child: BBCodeContentNode, index) => {\n\t\t\t\treturn index < currentIndex;\n\t\t\t});\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tgetNextSibling(): ?BBCodeContentNode\n\t{\n\t\tif (this.hasParent())\n\t\t{\n\t\t\tconst parentChildren: Array<BBCodeContentNode> = this.getParent().getChildren();\n\t\t\tconst currentIndex: number = parentChildren.indexOf(this);\n\t\t\tif (currentIndex !== -1 && currentIndex !== parentChildren.length)\n\t\t\t{\n\t\t\t\treturn getByIndex(parentChildren, currentIndex + 1);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tgetNextSiblings(): ?Array<BBCodeContentNode>\n\t{\n\t\tif (this.hasParent())\n\t\t{\n\t\t\tconst parentChildren: Array<BBCodeContentNode> = this.getParent().getChildren();\n\t\t\tconst currentIndex: number = parentChildren.indexOf(this);\n\n\t\t\treturn parentChildren.filter((child: BBCodeContentNode, index) => {\n\t\t\t\treturn index > currentIndex;\n\t\t\t});\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tgetChildrenCount(): number\n\t{\n\t\treturn this.children.length;\n\t}\n\n\thasChildren(): boolean\n\t{\n\t\treturn this.getChildrenCount() > 0;\n\t}\n\n\tisEmpty(): boolean\n\t{\n\t\treturn this.getChildrenCount() === 0;\n\t}\n\n\tadjustChildren()\n\t{\n\t\tthis.setChildren(this.getChildren());\n\t}\n\n\tsetDelayedChildren(children: Array<BBCodeContentNode>)\n\t{\n\t\tif (Type.isArray(children))\n\t\t{\n\t\t\tprivateMap.get(this).delayedChildren = children;\n\t\t}\n\t}\n\n\taddDelayedChildren(children: Array<BBCodeContentNode>)\n\t{\n\t\tif (Type.isArrayFilled(children))\n\t\t{\n\t\t\tthis.setDelayedChildren([\n\t\t\t\t...this.getDelayedChildren(),\n\t\t\t\t...children,\n\t\t\t]);\n\t\t}\n\t}\n\n\thasDelayedChildren(): boolean\n\t{\n\t\treturn privateMap.get(this).delayedChildren.length > 0;\n\t}\n\n\tgetDelayedChildren(): Array<BBCodeContentNode>\n\t{\n\t\treturn [...privateMap.get(this).delayedChildren];\n\t}\n\n\tappendChild(...children: Array<BBCodeContentNode | BBCodeFragmentNode>)\n\t{\n\t\tconst flattenedChildren: Array<BBCodeContentNode> = BBCodeNode.flattenChildren(children);\n\n\t\tflattenedChildren.forEach((node: BBCodeContentNode) => {\n\t\t\tnode.remove();\n\t\t\tnode.setParent(this);\n\t\t\tthis.children.push(node);\n\t\t});\n\t}\n\n\tprependChild(...children: Array<BBCodeContentNode | BBCodeFragmentNode>)\n\t{\n\t\tconst flattenedChildren: Array<BBCodeContentNode> = BBCodeNode.flattenChildren(children);\n\n\t\tflattenedChildren.forEach((node: BBCodeContentNode) => {\n\t\t\tnode.remove();\n\t\t\tnode.setParent(this);\n\t\t\tthis.children.unshift(node);\n\t\t});\n\t}\n\n\tinsertBefore(...nodes: Array<BBCodeContentNode>)\n\t{\n\t\tif (this.hasParent() && Type.isArrayFilled(nodes))\n\t\t{\n\t\t\tconst parent: BBCodeContentNode = this.getParent();\n\t\t\tconst parentChildren: Array<BBCodeContentNode> = parent.getChildren();\n\t\t\tconst currentNodeIndex: number = parentChildren.indexOf(this);\n\n\t\t\tconst deleteCount: number = 0;\n\t\t\tparentChildren.splice(currentNodeIndex, deleteCount, ...nodes);\n\n\t\t\tparent.setChildren(parentChildren);\n\t\t}\n\t}\n\n\tinsertAfter(...nodes: Array<BBCodeContentNode>)\n\t{\n\t\tif (this.hasParent() && Type.isArrayFilled(nodes))\n\t\t{\n\t\t\tconst parent: BBCodeContentNode = this.getParent();\n\t\t\tconst parentChildren: Array<BBCodeContentNode> = parent.getChildren();\n\t\t\tconst currentNodeIndex: number = parentChildren.indexOf(this);\n\n\t\t\tconst startIndex: number = currentNodeIndex + 1;\n\t\t\tconst deleteCount: number = 0;\n\t\t\tparentChildren.splice(startIndex, deleteCount, ...nodes);\n\n\t\t\tparent.setChildren(parentChildren);\n\t\t}\n\t}\n\n\tpropagateChild(...children: Array<BBCodeContentNode>)\n\t{\n\t\tif (this.hasParent())\n\t\t{\n\t\t\tthis.insertBefore(\n\t\t\t\t...children.filter((child: BBCodeContentNode) => {\n\t\t\t\t\treturn !['#linebreak', '#tab'].includes(child.getName());\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.addDelayedChildren(children);\n\t\t}\n\t}\n\n\tonNodeDidMount()\n\t{\n\t\tconst delayedChildren = this.getDelayedChildren();\n\t\tif (Type.isArrayFilled(delayedChildren))\n\t\t{\n\t\t\tthis.propagateChild(...delayedChildren);\n\t\t\tthis.setDelayedChildren([]);\n\t\t}\n\t}\n\n\tremoveChild(...children: Array<BBCodeContentNode>)\n\t{\n\t\tthis.children = this.children.reduce((acc: Array<BBCodeContentNode>, node: BBCodeContentNode) => {\n\t\t\tif (children.includes(node))\n\t\t\t{\n\t\t\t\tnode.setParent(null);\n\n\t\t\t\treturn acc;\n\t\t\t}\n\n\t\t\treturn [...acc, node];\n\t\t}, []);\n\t}\n\n\treplaceChild(targetNode: BBCodeContentNode, ...children: Array<BBCodeContentNode | BBCodeFragmentNode>)\n\t{\n\t\tthis.children = this.children.flatMap((node: BBCodeContentNode) => {\n\t\t\tif (node === targetNode)\n\t\t\t{\n\t\t\t\tnode.setParent(null);\n\n\t\t\t\tconst flattenedChildren: Array<BBCodeContentNode> = BBCodeNode.flattenChildren(children);\n\n\t\t\t\treturn flattenedChildren.map((child: BBCodeContentNode) => {\n\t\t\t\t\tchild.remove();\n\t\t\t\t\tchild.setParent(this);\n\n\t\t\t\t\treturn child;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn node;\n\t\t});\n\t}\n\n\treplace(...children: Array<BBCodeContentNode | BBCodeFragmentNode>)\n\t{\n\t\tif (this.hasParent())\n\t\t{\n\t\t\tconst parent = this.getParent();\n\t\t\tparent.replaceChild(this, ...children);\n\t\t}\n\t}\n\n\tclone(options: { deep: boolean } = {}): BBCodeNode\n\t{\n\t\tconst children = (() => {\n\t\t\tif (options.deep)\n\t\t\t{\n\t\t\t\treturn this.getChildren().map((child) => {\n\t\t\t\t\treturn child.clone(options);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn [];\n\t\t})();\n\n\t\treturn this.getScheme().createNode({\n\t\t\tname: this.getName(),\n\t\t\tparent: this.getParent(),\n\t\t\tchildren,\n\t\t});\n\t}\n\n\ttoPlainText(): string\n\t{\n\t\treturn this.getChildren().map((child) => {\n\t\t\treturn child.toPlainText();\n\t\t}).join('');\n\t}\n\n\tgetTextContent(): string\n\t{\n\t\treturn this.toPlainText();\n\t}\n\n\tgetPlainTextLength(): number\n\t{\n\t\treturn this.toPlainText().length;\n\t}\n\n\tremovePreviewsSiblings()\n\t{\n\t\tconst removePreviewsSiblings = (node: BBCodeContentNode) => {\n\t\t\tconst previewsSiblings = node.getPreviewsSiblings();\n\t\t\tif (Type.isArray(previewsSiblings))\n\t\t\t{\n\t\t\t\tpreviewsSiblings.forEach((sibling: BBCodeContentNode) => {\n\t\t\t\t\tsibling.remove();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst parent = node.getParent();\n\t\t\tif (parent)\n\t\t\t{\n\t\t\t\tremovePreviewsSiblings(parent);\n\t\t\t}\n\t\t};\n\n\t\tremovePreviewsSiblings(this);\n\t}\n\n\tremoveNextSiblings()\n\t{\n\t\tconst removeNextSiblings = (node: BBCodeContentNode) => {\n\t\t\tconst nextSiblings = node.getNextSiblings();\n\t\t\tif (Type.isArray(nextSiblings))\n\t\t\t{\n\t\t\t\tnextSiblings.forEach((sibling: BBCodeContentNode) => {\n\t\t\t\t\tsibling.remove();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst parent = node.getParent();\n\t\t\tif (parent)\n\t\t\t{\n\t\t\t\tremoveNextSiblings(parent);\n\t\t\t}\n\t\t};\n\n\t\tremoveNextSiblings(this);\n\t}\n\n\tfindByTextIndex(index: number): ?{ node: BBCodeTextNode, startIndex: number, endIndex: number }\n\t{\n\t\tlet currentIndex = 0;\n\t\tlet startIndex = 0;\n\t\tlet endIndex = 0;\n\n\t\tconst node = BBCodeNode.flattenAst(this).find((child: BBCodeContentNode) => {\n\t\t\tif (\n\t\t\t\tchild.getName() === '#text'\n\t\t\t\t|| child.getName() === '#linebreak'\n\t\t\t\t|| child.getName() === '#tab'\n\t\t\t)\n\t\t\t{\n\t\t\t\tstartIndex = currentIndex;\n\t\t\t\tendIndex = startIndex + child.getLength();\n\t\t\t\tcurrentIndex = endIndex;\n\n\t\t\t\treturn index >= startIndex && endIndex >= index;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t});\n\n\t\tif (node)\n\t\t{\n\t\t\treturn { node, startIndex, endIndex };\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tsplit(options: { offset: number, byWord?: boolean}): Array<BBCodeContentNode>\n\t{\n\t\tconst { offset, byWord = false } = options;\n\t\tconst plainTextLength = this.getPlainTextLength();\n\n\t\tconst leftTree = (() => {\n\t\t\tif (plainTextLength === offset)\n\t\t\t{\n\t\t\t\treturn this.clone({ deep: true });\n\t\t\t}\n\n\t\t\tif (offset <= 0 || offset > plainTextLength)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst tree = this.clone({ deep: true });\n\t\t\tconst { node, startIndex } = tree.findByTextIndex(offset);\n\t\t\tconst [leftNode, rightNode] = node.split({ offset: offset - startIndex, byWord });\n\t\t\tif (leftNode)\n\t\t\t{\n\t\t\t\tnode.replace(leftNode);\n\t\t\t\tleftNode.removeNextSiblings();\n\t\t\t}\n\t\t\telse if (rightNode)\n\t\t\t{\n\t\t\t\trightNode.removeNextSiblings();\n\t\t\t\trightNode.remove();\n\t\t\t}\n\n\t\t\treturn tree;\n\t\t})();\n\n\t\tconst rightTree = (() => {\n\t\t\tif (plainTextLength === offset)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (offset === 0)\n\t\t\t{\n\t\t\t\treturn this.clone({ deep: true });\n\t\t\t}\n\n\t\t\tconst tree = this.clone({ deep: true });\n\t\t\tconst { node, startIndex } = tree.findByTextIndex(offset);\n\t\t\tconst [leftNode, rightNode] = node.split({ offset: offset - startIndex, byWord });\n\t\t\tif (rightNode)\n\t\t\t{\n\t\t\t\tnode.replace(rightNode);\n\t\t\t\trightNode.removePreviewsSiblings();\n\t\t\t}\n\t\t\telse if (leftNode)\n\t\t\t{\n\t\t\t\tleftNode.removePreviewsSiblings();\n\t\t\t\tif (leftNode.hasParent())\n\t\t\t\t{\n\t\t\t\t\tconst parent = leftNode.getParent();\n\t\t\t\t\tleftNode.remove();\n\t\t\t\t\tif (parent.getChildrenCount() === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tparent.remove();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn tree;\n\t\t})();\n\n\t\treturn [leftTree, rightTree];\n\t}\n\n\tstatic flattenAst(ast): Array<any>\n\t{\n\t\tconst flat = [];\n\n\t\tconst traverse = (node: BBCodeContentNode) => {\n\t\t\tflat.push(node);\n\t\t\tif (node.hasChildren())\n\t\t\t{\n\t\t\t\tnode.getChildren().forEach((child: BBCodeContentNode) => {\n\t\t\t\t\ttraverse(child);\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tif (ast.hasChildren())\n\t\t{\n\t\t\tast.getChildren().forEach((child: BBCodeContentNode) => {\n\t\t\t\ttraverse(child);\n\t\t\t});\n\t\t}\n\n\t\treturn flat;\n\t}\n\n\ttoJSON(): SerializedBBCodeNode\n\t{\n\t\treturn {\n\t\t\tname: this.getName(),\n\t\t\tchildren: this.getChildren().map((child: BBCodeContentNode) => {\n\t\t\t\treturn child.toJSON();\n\t\t\t}),\n\t\t};\n\t}\n}\n","import { Type, type JsonObject, type JsonValue } from 'main.core';\nimport { BBCodeNode, type BBCodeNodeOptions, type BBCodeContentNode, type SerializedBBCodeNode, privateMap } from './node';\nimport { typeof BBCodeFragmentNode } from './fragment-node';\nimport { type BBCodeNodeStringifier } from '../scheme/node-schemes/node-scheme';\nimport { typeof BBCodeTagScheme } from '../scheme/node-schemes/tag-scheme';\nimport { typeof BBCodeScheme } from '../scheme/bbcode-scheme';\n\nexport type BBCodeElementNodeValue = string | number | boolean;\n\nexport type BBCodeElementNodeOptions = BBCodeNodeOptions & {\n\tattributes?: JsonObject,\n\tvalue?: BBCodeElementNodeValue,\n};\n\nexport type SerializedBBCodeElementNode = SerializedBBCodeNode & {\n\tattributes: JsonObject,\n\tvalue: BBCodeElementNodeValue,\n};\n\nexport type FilteredChildren = {\n\tresolved: Array<BBCodeContentNode>,\n\tunresolved: Array<BBCodeContentNode>,\n};\n\nconst voidSymbol: Symbol = Symbol('void');\n\nexport class BBCodeElementNode extends BBCodeNode\n{\n\tattributes: JsonObject = {};\n\tvalue: JsonValue = '';\n\t[voidSymbol]: boolean = false;\n\n\tconstructor(options: BBCodeElementNodeOptions = {})\n\t{\n\t\tsuper(options);\n\t\tprivateMap.get(this).type = BBCodeNode.ELEMENT_NODE;\n\n\t\tconst tagScheme: BBCodeTagScheme = this.getTagScheme();\n\n\t\tthis[voidSymbol] = tagScheme.isVoid();\n\n\t\tthis.setValue(options.value);\n\t\tthis.setAttributes(options.attributes);\n\t}\n\n\tsetScheme(scheme: BBCodeScheme, onUnknown: (node: BBCodeContentNode) => any)\n\t{\n\t\tthis.getChildren().forEach((node: BBCodeContentNode) => {\n\t\t\tnode.setScheme(scheme, onUnknown);\n\t\t});\n\n\t\tif (scheme.isAllowedTag(this.getName()))\n\t\t{\n\t\t\tsuper.setScheme(scheme);\n\n\t\t\tconst tagScheme: BBCodeTagScheme = this.getTagScheme();\n\t\t\tthis[voidSymbol] = tagScheme.isVoid();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsuper.setScheme(scheme);\n\t\t\tonUnknown(this, scheme);\n\t\t}\n\t}\n\n\tfilterChildren(children: Array<BBCodeContentNode>): FilteredChildren\n\t{\n\t\tconst filteredChildren: FilteredChildren = {\n\t\t\tresolved: [],\n\t\t\tunresolved: [],\n\t\t};\n\t\tconst scheme: BBCodeScheme = this.getScheme();\n\n\t\tchildren.forEach((child: BBCodeContentNode) => {\n\t\t\tif (scheme.isChildAllowed(this, child))\n\t\t\t{\n\t\t\t\tfilteredChildren.resolved.push(child);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfilteredChildren.unresolved.push(child);\n\t\t\t}\n\t\t});\n\n\t\treturn filteredChildren;\n\t}\n\n\tconvertChildren(children: Array<BBCodeContentNode>): Array<BBCodeContentNode>\n\t{\n\t\tconst tagScheme: BBCodeTagScheme = this.getTagScheme();\n\t\tconst childConverter = tagScheme.getChildConverter();\n\t\tif (childConverter)\n\t\t{\n\t\t\tconst scheme: BBCodeScheme = this.getScheme();\n\n\t\t\treturn children.map((child: BBCodeNode) => {\n\t\t\t\treturn childConverter(child, scheme);\n\t\t\t});\n\t\t}\n\n\t\treturn children;\n\t}\n\n\tsetValue(value: BBCodeElementNodeValue)\n\t{\n\t\tif (Type.isString(value) || Type.isNumber(value) || Type.isBoolean(value))\n\t\t{\n\t\t\tthis.value = value;\n\t\t}\n\t}\n\n\tgetValue(): BBCodeElementNodeValue\n\t{\n\t\treturn this.value;\n\t}\n\n\tisVoid(): boolean\n\t{\n\t\treturn this[voidSymbol];\n\t}\n\n\tcanBeEmpty(): boolean\n\t{\n\t\treturn this.getTagScheme().canBeEmpty();\n\t}\n\n\thasGroup(groupName: string): boolean\n\t{\n\t\treturn this.getTagScheme().hasGroup(groupName);\n\t}\n\n\tsetAttributes(attributes: JsonObject)\n\t{\n\t\tif (Type.isPlainObject(attributes))\n\t\t{\n\t\t\tconst entries = Object.entries(attributes).map(([key, value]) => {\n\t\t\t\treturn [key.toLowerCase(), value];\n\t\t\t});\n\n\t\t\tthis.attributes = Object.fromEntries(entries);\n\t\t}\n\t}\n\n\tsetAttribute(name: string, value: any)\n\t{\n\t\tif (Type.isStringFilled(name))\n\t\t{\n\t\t\tconst preparedName: string = name.toLowerCase();\n\t\t\tif (Type.isNil(value))\n\t\t\t{\n\t\t\t\tdelete this.attributes[preparedName];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.attributes[preparedName] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetAttribute(name: string): string | number | null\n\t{\n\t\tif (Type.isString(name))\n\t\t{\n\t\t\treturn this.attributes[name.toLowerCase()];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tgetAttributes(): JsonObject\n\t{\n\t\treturn { ...this.attributes };\n\t}\n\n\tappendChild(...children: Array<BBCodeContentNode | BBCodeFragmentNode>)\n\t{\n\t\tconst flattenedChildren: Array<BBCodeContentNode> = BBCodeNode.flattenChildren(children);\n\t\tconst filteredChildren: FilteredChildren = this.filterChildren(flattenedChildren);\n\t\tconst convertedChildren: Array<BBCodeContentNode> = this.convertChildren(filteredChildren.resolved);\n\n\t\tconvertedChildren.forEach((node: BBCodeContentNode) => {\n\t\t\tnode.remove();\n\t\t\tnode.setParent(this);\n\t\t\tthis.children.push(node);\n\t\t});\n\n\t\tif (Type.isArrayFilled(filteredChildren.unresolved))\n\t\t{\n\t\t\tif (this.getScheme().isAllowedUnresolvedNodesHoisting())\n\t\t\t{\n\t\t\t\tthis.propagateChild(...filteredChildren.unresolved);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfilteredChildren.unresolved.forEach((node: BBCodeContentNode) => {\n\t\t\t\t\tnode.remove();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tprependChild(...children: Array<BBCodeContentNode | BBCodeFragmentNode>)\n\t{\n\t\tconst flattenedChildren: Array<BBCodeContentNode> = BBCodeNode.flattenChildren(children);\n\t\tconst filteredChildren: FilteredChildren = this.filterChildren(flattenedChildren);\n\t\tconst convertedChildren: Array<BBCodeContentNode> = this.convertChildren(filteredChildren.resolved);\n\n\t\tconvertedChildren.forEach((node: BBCodeContentNode) => {\n\t\t\tnode.remove();\n\t\t\tnode.setParent(this);\n\t\t\tthis.children.unshift(node);\n\t\t});\n\n\t\tif (Type.isArrayFilled(filteredChildren.unresolved))\n\t\t{\n\t\t\tif (this.getScheme().isAllowedUnresolvedNodesHoisting())\n\t\t\t{\n\t\t\t\tthis.propagateChild(...filteredChildren.unresolved);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfilteredChildren.unresolved.forEach((node: BBCodeContentNode) => {\n\t\t\t\t\tnode.remove();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\treplaceChild(targetNode: BBCodeContentNode, ...children: Array<BBCodeContentNode | BBCodeFragmentNode>)\n\t{\n\t\tthis.children = this.children.flatMap((node: BBCodeContentNode) => {\n\t\t\tif (node === targetNode)\n\t\t\t{\n\t\t\t\tnode.setParent(null);\n\n\t\t\t\tconst flattenedChildren: Array<BBCodeContentNode> = BBCodeNode.flattenChildren(children);\n\t\t\t\tconst filteredChildren: FilteredChildren = this.filterChildren(flattenedChildren);\n\t\t\t\tconst convertedChildren: Array<BBCodeContentNode> = this.convertChildren(filteredChildren.resolved);\n\n\t\t\t\treturn convertedChildren.map((child: BBCodeContentNode) => {\n\t\t\t\t\tchild.remove();\n\t\t\t\t\tchild.setParent(this);\n\n\t\t\t\t\treturn child;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn node;\n\t\t});\n\t}\n\n\ttoStringValue(): string\n\t{\n\t\tconst value: BBCodeElementNodeValue = this.getValue();\n\t\tconst encodedValue: string = this.getEncoder().encodeAttribute(value);\n\n\t\treturn value ? `=${encodedValue}` : '';\n\t}\n\n\ttoStringAttributes(): string\n\t{\n\t\treturn Object\n\t\t\t.entries(this.getAttributes())\n\t\t\t.map(([key: string, attrValue: string]) => {\n\t\t\t\tconst preparedKey: string = this.prepareCase(key);\n\t\t\t\tconst encodedValue: string = this.getEncoder().encodeAttribute(attrValue);\n\n\t\t\t\treturn attrValue ? `${preparedKey}=${encodedValue}` : preparedKey;\n\t\t\t})\n\t\t\t.join(' ');\n\t}\n\n\tgetContent(): string\n\t{\n\t\treturn this.getChildren()\n\t\t\t.map((child: BBCodeContentNode) => {\n\t\t\t\treturn child.toString();\n\t\t\t})\n\t\t\t.join('');\n\t}\n\n\tgetOpeningTag(): string\n\t{\n\t\tconst displayedName: string = this.getDisplayedName();\n\t\tconst tagValue: BBCodeElementNodeValue = this.toStringValue();\n\t\tconst attributes: JsonObject = this.toStringAttributes();\n\t\tconst formattedAttributes: string = Type.isStringFilled(attributes) ? ` ${attributes}` : '';\n\n\t\treturn `[${displayedName}${tagValue}${formattedAttributes}]`;\n\t}\n\n\tgetClosingTag(): string\n\t{\n\t\treturn `[/${this.getDisplayedName()}]`;\n\t}\n\n\tclone(options: { deep: boolean } = {}): BBCodeElementNode\n\t{\n\t\tconst children = (() => {\n\t\t\tif (options.deep)\n\t\t\t{\n\t\t\t\treturn this.getChildren().map((child) => {\n\t\t\t\t\treturn child.clone(options);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn [];\n\t\t})();\n\n\t\treturn this.getScheme().createElement({\n\t\t\tname: this.getName(),\n\t\t\tvoid: this.isVoid(),\n\t\t\tvalue: this.getValue(),\n\t\t\tattributes: { ...this.getAttributes() },\n\t\t\tchildren,\n\t\t});\n\t}\n\n\tsplitByChildIndex(index: number): Array<BBCodeElementNode | null>\n\t{\n\t\tif (!Type.isNumber(index))\n\t\t{\n\t\t\tthrow new TypeError('index is not a number');\n\t\t}\n\n\t\tconst childrenCount = this.getChildrenCount();\n\t\tif (index < 0 || index > childrenCount)\n\t\t{\n\t\t\tthrow new TypeError(`index '${index}' is out of range ${0}-${childrenCount}`);\n\t\t}\n\n\t\tconst leftNode = (() => {\n\t\t\tif (index === childrenCount)\n\t\t\t{\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (index === 0)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst leftChildren = this.getChildren().filter((child, childIndex) => {\n\t\t\t\treturn childIndex < index;\n\t\t\t});\n\n\t\t\tconst node = this.clone();\n\t\t\tnode.setChildren(leftChildren);\n\n\t\t\treturn node;\n\t\t})();\n\n\t\tconst rightNode = (() => {\n\t\t\tif (index === 0)\n\t\t\t{\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (index === childrenCount)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst rightChildren = this.getChildren();\n\t\t\tconst node = this.clone();\n\t\t\tnode.setChildren(rightChildren);\n\n\t\t\treturn node;\n\t\t})();\n\n\t\tif (leftNode && rightNode)\n\t\t{\n\t\t\tthis.replace(leftNode, rightNode);\n\t\t}\n\n\t\treturn [leftNode, rightNode];\n\t}\n\n\tgetTagScheme(): BBCodeTagScheme\n\t{\n\t\treturn super.getTagScheme();\n\t}\n\n\ttoString(): string\n\t{\n\t\tconst tagScheme: BBCodeTagScheme = this.getTagScheme();\n\t\tconst stringifier: BBCodeNodeStringifier = tagScheme.getStringifier();\n\t\tif (Type.isFunction(stringifier))\n\t\t{\n\t\t\tconst scheme: BBCodeScheme = this.getScheme();\n\n\t\t\treturn stringifier(this, scheme);\n\t\t}\n\n\t\tconst openingTag: string = this.getOpeningTag();\n\t\tconst content: string = this.getContent();\n\n\t\tif (this.isVoid())\n\t\t{\n\t\t\treturn `${openingTag}${content}`;\n\t\t}\n\n\t\tconst closingTag: string = this.getClosingTag();\n\n\t\treturn `${openingTag}${content}${closingTag}`;\n\t}\n\n\ttoJSON(): SerializedBBCodeElementNode\n\t{\n\t\treturn {\n\t\t\t...super.toJSON(),\n\t\t\tvalue: this.getValue(),\n\t\t\tattributes: this.getAttributes(),\n\t\t\tvoid: this.isVoid(),\n\t\t};\n\t}\n}\n","import { BBCodeNode, privateMap, nameSymbol, type BBCodeContentNode } from './node';\nimport { BBCodeElementNode } from './element-node';\nimport { typeof BBCodeScheme } from '../scheme/bbcode-scheme';\n\nexport type RootNodeOptions = {\n\tchildren: Array<BBCodeNode>,\n};\n\nexport class BBCodeRootNode extends BBCodeElementNode\n{\n\tconstructor(options: RootNodeOptions)\n\t{\n\t\tsuper({ ...options, name: '#root' });\n\t\tprivateMap.get(this).type = BBCodeNode.ROOT_NODE;\n\t\tBBCodeRootNode.makeNonEnumerableProperty(this, 'value');\n\t\tBBCodeRootNode.makeNonEnumerableProperty(this, 'attributes');\n\t\tBBCodeRootNode.freezeProperty(this, nameSymbol, '#root');\n\t}\n\n\tsetScheme(scheme: BBCodeScheme, onUnknown: (node: BBCodeContentNode) => any)\n\t{\n\t\tBBCodeNode.flattenAst(this).forEach((node: BBCodeContentNode) => {\n\t\t\tnode.setScheme(scheme, onUnknown);\n\t\t});\n\n\t\tsuper.setScheme(scheme);\n\n\t\tBBCodeNode.flattenAst(this).forEach((node: BBCodeContentNode) => {\n\t\t\tnode.adjustChildren();\n\t\t});\n\t}\n\n\tgetParent(): null\n\t{\n\t\treturn null;\n\t}\n\n\tclone(options: { deep: boolean } = {}): BBCodeRootNode\n\t{\n\t\tconst children = (() => {\n\t\t\tif (options.deep)\n\t\t\t{\n\t\t\t\treturn this.getChildren().map((child) => {\n\t\t\t\t\treturn child.clone(options);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn [];\n\t\t})();\n\n\t\treturn this.getScheme().createRoot({\n\t\t\tchildren,\n\t\t});\n\t}\n\n\ttoString(): string\n\t{\n\t\treturn this.getChildren()\n\t\t\t.map((child: BBCodeContentNode) => {\n\t\t\t\treturn child.toString();\n\t\t\t})\n\t\t\t.join('');\n\t}\n\n\ttoJSON(): any\n\t{\n\t\treturn this.getChildren().map((node: BBCodeNode) => {\n\t\t\treturn node.toJSON();\n\t\t});\n\t}\n}\n","import { BBCodeNode, nameSymbol, privateMap } from './node';\nimport { BBCodeElementNode } from './element-node';\n\nexport type FragmentNodeOptions = {\n\tchildren: Array<BBCodeNode>,\n};\n\nexport class BBCodeFragmentNode extends BBCodeElementNode\n{\n\tconstructor(options: FragmentNodeOptions)\n\t{\n\t\tsuper({ ...options, name: '#fragment' });\n\t\tprivateMap.get(this).type = BBCodeNode.FRAGMENT_NODE;\n\t\tBBCodeFragmentNode.makeNonEnumerableProperty(this, 'value');\n\t\tBBCodeFragmentNode.makeNonEnumerableProperty(this, 'attributes');\n\t\tBBCodeFragmentNode.freezeProperty(this, nameSymbol, '#fragment');\n\t}\n\n\tclone(options: { deep: boolean } = {}): BBCodeFragmentNode\n\t{\n\t\tconst children = (() => {\n\t\t\tif (options.deep)\n\t\t\t{\n\t\t\t\treturn this.getChildren().map((child) => {\n\t\t\t\t\treturn child.clone(options);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn [];\n\t\t})();\n\n\t\treturn this.getScheme().createFragment({\n\t\t\tchildren,\n\t\t});\n\t}\n}\n","import { Type } from 'main.core';\nimport { BBCodeNode, privateMap, nameSymbol, type BBCodeNodeOptions } from './node';\n\nexport const contentSymbol = Symbol('content');\n\nexport type BBCodeTextNodeContent = string | number;\n\nexport type BBCodeTextNodeOptions = BBCodeTextNodeContent | BBCodeNodeOptions & {\n\tcontent?: string,\n};\n\nexport type BBCodeSerializedTextNode = {\n\tname: string,\n\tcontent: BBCodeTextNodeContent,\n};\n\nexport class BBCodeTextNode extends BBCodeNode\n{\n\t[nameSymbol]: string = '#text';\n\t[contentSymbol]: string = '';\n\n\tconstructor(options: BBCodeTextNodeOptions = {})\n\t{\n\t\tconst nodeOptions: BBCodeTextNodeOptions = Type.isString(options) ? { content: options } : options;\n\t\tsuper(nodeOptions);\n\t\tprivateMap.get(this).type = BBCodeNode.TEXT_NODE;\n\t\tthis.setContent(nodeOptions.content);\n\t\tBBCodeNode.makeNonEnumerableProperty(this, 'children');\n\t}\n\n\tstatic isTextNodeContent(value: any): boolean\n\t{\n\t\treturn Type.isString(value) || Type.isNumber(value);\n\t}\n\n\tsetName(name: string)\n\t{}\n\n\tsetContent(content: BBCodeTextNodeContent)\n\t{\n\t\tif (BBCodeTextNode.isTextNodeContent(content))\n\t\t{\n\t\t\tthis[contentSymbol] = content;\n\t\t}\n\t}\n\n\tgetContent(): BBCodeTextNodeContent\n\t{\n\t\treturn this[contentSymbol];\n\t}\n\n\tadjustChildren()\n\t{}\n\n\tgetLength(): number\n\t{\n\t\treturn String(this[contentSymbol]).length;\n\t}\n\n\tisEmpty(): boolean\n\t{\n\t\treturn this.getLength() === 0;\n\t}\n\n\tclone(options): BBCodeTextNode\n\t{\n\t\treturn this.getScheme().createText({\n\t\t\tcontent: this.getContent(),\n\t\t});\n\t}\n\n\tsplit(options: { offset: number, byWord?: boolean}): Array<BBCodeTextNode | null>\n\t{\n\t\tconst { offset: sourceOffset, byWord = false } = options;\n\n\t\tif (!Type.isNumber(sourceOffset))\n\t\t{\n\t\t\tthrow new TypeError('offset is not a number');\n\t\t}\n\n\t\tconst contentLength = this.getLength();\n\t\tif (sourceOffset < 0 || sourceOffset > contentLength)\n\t\t{\n\t\t\tthrow new TypeError(`offset '${sourceOffset}' is out of range ${0}-${contentLength}`);\n\t\t}\n\n\t\tconst content = this.getContent();\n\n\t\tconst offset = (() => {\n\t\t\tif (byWord && sourceOffset !== contentLength)\n\t\t\t{\n\t\t\t\tconst lastIndex = content.lastIndexOf(' ', sourceOffset);\n\t\t\t\tif (lastIndex !== -1)\n\t\t\t\t{\n\t\t\t\t\tif (sourceOffset > lastIndex)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn lastIndex + 1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn lastIndex;\n\t\t\t\t}\n\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\treturn sourceOffset;\n\t\t})();\n\n\t\tconst leftNode = (() => {\n\t\t\tif (offset === contentLength)\n\t\t\t{\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (offset === 0)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst node = this.clone();\n\t\t\tnode.setContent(content.slice(0, offset));\n\n\t\t\treturn node;\n\t\t})();\n\n\t\tconst rightNode = (() => {\n\t\t\tif (offset === 0)\n\t\t\t{\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (offset === contentLength)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst node = this.clone();\n\t\t\tnode.setContent(content.slice(offset, contentLength));\n\n\t\t\treturn node;\n\t\t})();\n\n\t\treturn [leftNode, rightNode];\n\t}\n\n\ttoString(): string\n\t{\n\t\treturn this.getEncoder().encodeText(this.getContent());\n\t}\n\n\ttoPlainText(): string\n\t{\n\t\treturn this.toString();\n\t}\n\n\ttoJSON(): BBCodeSerializedTextNode\n\t{\n\t\treturn {\n\t\t\tname: this.getName(),\n\t\t\tcontent: this.toString(),\n\t\t};\n\t}\n}\n","import { nameSymbol } from './node';\nimport { BBCodeTextNode, contentSymbol, type BBCodeTextNodeContent, type BBCodeTextNodeOptions } from './text-node';\n\nexport class BBCodeNewLineNode extends BBCodeTextNode\n{\n\t[nameSymbol]: string = '#linebreak';\n\t[contentSymbol]: string = '\\n';\n\n\tconstructor(options: BBCodeTextNodeOptions = {})\n\t{\n\t\tsuper(options);\n\t}\n\n\tsetContent(options: BBCodeTextNodeContent)\n\t{}\n\n\tclone(options): BBCodeNewLineNode\n\t{\n\t\treturn this.getScheme().createNewLine();\n\t}\n}\n","import { nameSymbol } from './node';\nimport { BBCodeTextNode, contentSymbol, type BBCodeTextNodeContent, type BBCodeTextNodeOptions } from './text-node';\n\nexport class BBCodeTabNode extends BBCodeTextNode\n{\n\t[nameSymbol]: string = '#tab';\n\t[contentSymbol]: string = '\\t';\n\n\tconstructor(options: BBCodeTextNodeOptions = {})\n\t{\n\t\tsuper(options);\n\t}\n\n\tsetContent(options: BBCodeTextNodeContent)\n\t{}\n\n\tclone(options): BBCodeTabNode\n\t{\n\t\treturn this.getScheme().createTab();\n\t}\n}\n","import { Type } from 'main.core';\nimport type { BBCodeContentNode } from '../../nodes/node';\nimport { typeof BBCodeScheme } from '../bbcode-scheme';\n\nexport type BBCodeNodeConverter = (node: BBCodeContentNode, scheme: BBCodeScheme) => BBCodeContentNode | Array<BBCodeContentNode> | null;\nexport type BBCodeNodeStringifier = (node: BBCodeContentNode, scheme: BBCodeScheme) => string;\nexport type BBCodeNodeSerializer = (node: BBCodeContentNode, scheme: BBCodeScheme) => any;\nexport type BBCodeNodeName = string;\nexport type BBCodeGroupName = string;\n\nexport type BBCodeNodeSchemeOptions = {\n\tname: BBCodeNodeName | Array<BBCodeNodeName>,\n\tgroup: BBCodeGroupName | Array<BBCodeGroupName>,\n\tstringify?: BBCodeNodeStringifier,\n\tserialize?: BBCodeNodeSerializer,\n\tallowedIn?: Array<BBCodeNodeName>,\n};\n\nexport class BBCodeNodeScheme\n{\n\tname: Array<BBCodeNodeName> = [];\n\tgroup: Array<BBCodeGroupName> = [];\n\tstringifier: BBCodeNodeStringifier | null = null;\n\tserializer: BBCodeNodeSerializer | null = null;\n\tallowedIn: Array<BBCodeNodeName> = [];\n\n\tconstructor(options: BBCodeNodeSchemeOptions)\n\t{\n\t\tif (!Type.isPlainObject(options))\n\t\t{\n\t\t\tthrow new TypeError('options is not a object');\n\t\t}\n\n\t\tif (\n\t\t\t!Type.isArrayFilled(this.name)\n\t\t\t&& !Type.isArrayFilled(options.name)\n\t\t\t&& !Type.isStringFilled(options.name)\n\t\t)\n\t\t{\n\t\t\tthrow new TypeError('options.name is not specified');\n\t\t}\n\n\t\tthis.setGroup(options.group);\n\t\tthis.setName(options.name);\n\t\tthis.setAllowedIn(options.allowedIn);\n\t\tthis.setStringifier(options.stringify);\n\t\tthis.setSerializer(options.serialize);\n\t}\n\n\tsetName(name: BBCodeNodeSchemeOptions['name'])\n\t{\n\t\tif (Type.isStringFilled(name))\n\t\t{\n\t\t\tthis.name = [name];\n\t\t}\n\n\t\tif (Type.isArrayFilled(name))\n\t\t{\n\t\t\tthis.name = name;\n\t\t}\n\t}\n\n\tgetName(): Array<string>\n\t{\n\t\treturn [...this.name];\n\t}\n\n\tremoveName(...names: Array<BBCodeNodeName>)\n\t{\n\t\tthis.setName(\n\t\t\tthis.getName().filter((name: BBCodeNodeName) => {\n\t\t\t\treturn !names.includes(name);\n\t\t\t}),\n\t\t);\n\t}\n\n\tsetGroup(name: BBCodeNodeSchemeOptions['group'])\n\t{\n\t\tif (Type.isStringFilled(name))\n\t\t{\n\t\t\tthis.group = [name];\n\t\t}\n\n\t\tif (Type.isArrayFilled(name))\n\t\t{\n\t\t\tthis.group = name;\n\t\t}\n\t}\n\n\tremoveGroup(...groups: Array<BBCodeGroupName>)\n\t{\n\t\tthis.setGroup(\n\t\t\tthis.getGroup().filter((group: BBCodeGroupName) => {\n\t\t\t\treturn !groups.includes(group);\n\t\t\t}),\n\t\t);\n\t}\n\n\tgetGroup(): Array<BBCodeGroupName>\n\t{\n\t\treturn [...this.group];\n\t}\n\n\thasGroup(groupName: string): boolean\n\t{\n\t\treturn this.getGroup().includes(groupName);\n\t}\n\n\tsetStringifier(stringifier: BBCodeNodeStringifier | null)\n\t{\n\t\tif (Type.isFunction(stringifier) || Type.isNull(stringifier))\n\t\t{\n\t\t\tthis.stringifier = stringifier;\n\t\t}\n\t}\n\n\tgetStringifier(): BBCodeNodeStringifier | null\n\t{\n\t\treturn this.stringifier;\n\t}\n\n\tsetSerializer(serializer: BBCodeNodeSerializer | null)\n\t{\n\t\tif (Type.isFunction(serializer) || Type.isNull(serializer))\n\t\t{\n\t\t\tthis.serializer = serializer;\n\t\t}\n\t}\n\n\tgetSerializer(): BBCodeNodeSerializer | null\n\t{\n\t\treturn this.serializer;\n\t}\n\n\tsetAllowedIn(allowedParents: Array<BBCodeNodeName>)\n\t{\n\t\tif (Type.isArray(allowedParents))\n\t\t{\n\t\t\tthis.allowedIn = [...allowedParents];\n\t\t}\n\t}\n\n\tgetAllowedIn(): Array<BBCodeNodeName>\n\t{\n\t\treturn [...this.allowedIn];\n\t}\n\n\tisAllowedIn(tagName: string): boolean\n\t{\n\t\tconst allowedIn: Array<BBCodeNodeName> = this.getAllowedIn();\n\n\t\treturn (\n\t\t\t!Type.isArrayFilled(allowedIn)\n\t\t\t|| (\n\t\t\t\tType.isArrayFilled(allowedIn)\n\t\t\t\t&& allowedIn.includes(tagName)\n\t\t\t)\n\t\t);\n\t}\n}\n","import { Type } from 'main.core';\nimport {\n\tBBCodeNodeScheme,\n\ttype BBCodeNodeSchemeOptions,\n\ttype BBCodeNodeConverter,\n\ttype BBCodeNodeName,\n} from './node-scheme';\nimport { typeof BBCodeElementNode } from '../../nodes/element-node';\nimport { BBCodeNode, type BBCodeContentNode } from '../../nodes/node';\n\nexport type BBCodeTagSchemeOptions = BBCodeNodeSchemeOptions & {\n\tvoid?: boolean,\n\tcanBeEmpty?: boolean,\n\tconvertChild?: BBCodeNodeConverter,\n\tallowedChildren?: Array<BBCodeNodeName>,\n};\n\nconst canBeEmptySymbol = Symbol('@canBeEmpty');\nconst voidSymbol = Symbol('@void');\n\nexport class BBCodeTagScheme extends BBCodeNodeScheme\n{\n\t[voidSymbol]: boolean = false;\n\t[canBeEmptySymbol]: boolean = true;\n\tchildConverter: BBCodeNodeConverter | null = null;\n\tallowedChildren: Array<BBCodeNodeName> = [];\n\n\tconstructor(options: BBCodeTagSchemeOptions)\n\t{\n\t\tsuper(options);\n\t\tthis.setVoid(options.void);\n\t\tthis.setCanBeEmpty(options.canBeEmpty);\n\t\tthis.setChildConverter(options.convertChild);\n\t\tthis.setAllowedChildren(options.allowedChildren);\n\t}\n\n\tstatic defaultBlockStringifier(node: BBCodeElementNode): string\n\t{\n\t\tconst isAllowNewlineBeforeOpeningTag: boolean = (() => {\n\t\t\tconst previewsSibling: ?BBCodeContentNode = node.getPreviewsSibling();\n\n\t\t\treturn previewsSibling && previewsSibling.getName() !== '#linebreak';\n\t\t})();\n\t\tconst isAllowNewlineAfterOpeningTag: boolean = (() => {\n\t\t\tconst firstChild: ?BBCodeContentNode = node.getFirstChild();\n\n\t\t\treturn firstChild && firstChild.getName() !== '#linebreak';\n\t\t})();\n\t\tconst isAllowNewlineBeforeClosingTag: boolean = (() => {\n\t\t\tconst lastChild: ?BBCodeContentNode = node.getLastChild();\n\n\t\t\treturn lastChild && lastChild.getName() !== '#linebreak';\n\t\t})();\n\t\tconst isAllowNewlineAfterClosingTag: boolean = (() => {\n\t\t\tconst nextSibling: ?BBCodeContentNode = node.getNextSibling();\n\n\t\t\treturn (\n\t\t\t\tnextSibling\n\t\t\t\t&& nextSibling.getName() !== '#linebreak'\n\t\t\t\t&& !(\n\t\t\t\t\tnextSibling.getType() === BBCodeNode.ELEMENT_NODE\n\t\t\t\t\t&& !nextSibling.getTagScheme().getGroup().includes('#inline')\n\t\t\t\t)\n\t\t\t);\n\t\t})();\n\n\t\tconst openingTag: string = node.getOpeningTag();\n\t\tconst content: string = node.getContent();\n\t\tconst closingTag: string = node.getClosingTag();\n\n\t\treturn [\n\t\t\tisAllowNewlineBeforeOpeningTag ? '\\n' : '',\n\t\t\topeningTag,\n\t\t\tisAllowNewlineAfterOpeningTag ? '\\n' : '',\n\t\t\tcontent,\n\t\t\tisAllowNewlineBeforeClosingTag ? '\\n' : '',\n\t\t\tclosingTag,\n\t\t\tisAllowNewlineAfterClosingTag ? '\\n' : '',\n\t\t].join('');\n\t}\n\n\tsetName(name: Array<BBCodeNodeName>)\n\t{\n\t\tsuper.setName(name);\n\t}\n\n\tsetVoid(value: boolean)\n\t{\n\t\tif (Type.isBoolean(value))\n\t\t{\n\t\t\tthis[voidSymbol] = value;\n\t\t}\n\t}\n\n\tisVoid(): boolean\n\t{\n\t\treturn this[voidSymbol];\n\t}\n\n\tsetCanBeEmpty(value: boolean)\n\t{\n\t\tif (Type.isBoolean(value))\n\t\t{\n\t\t\tthis[canBeEmptySymbol] = value;\n\t\t}\n\t}\n\n\tcanBeEmpty(): boolean\n\t{\n\t\treturn this[canBeEmptySymbol];\n\t}\n\n\tsetChildConverter(converter: BBCodeNodeConverter | null)\n\t{\n\t\tif (Type.isFunction(converter) || Type.isNull(converter))\n\t\t{\n\t\t\tthis.childConverter = converter;\n\t\t}\n\t}\n\n\tgetChildConverter(): BBCodeNodeConverter | null\n\t{\n\t\treturn this.childConverter;\n\t}\n\n\tsetAllowedChildren(allowedChildren: Array<BBCodeNodeName>)\n\t{\n\t\tif (Type.isArray(allowedChildren))\n\t\t{\n\t\t\tthis.allowedChildren = allowedChildren;\n\t\t}\n\t}\n\n\tgetAllowedChildren(): Array<BBCodeNodeName>\n\t{\n\t\treturn this.allowedChildren;\n\t}\n\n\tisChildAllowed(tagName: string): boolean\n\t{\n\t\tconst allowedChildren: Array<BBCodeNodeName> = this.getAllowedChildren();\n\n\t\treturn (\n\t\t\t!Type.isArrayFilled(allowedChildren)\n\t\t\t|| (\n\t\t\t\tType.isArrayFilled(allowedChildren)\n\t\t\t\t&& allowedChildren.includes(tagName)\n\t\t\t)\n\t\t);\n\t}\n}\n","import { Type } from 'main.core';\nimport { BBCodeEncoder } from 'ui.bbcode.encoder';\nimport { BBCodeTagScheme } from './node-schemes/tag-scheme';\nimport { BBCodeNode, type BBCodeNodeOptions } from '../nodes/node';\nimport { BBCodeRootNode, type RootNodeOptions } from '../nodes/root-node';\nimport { BBCodeFragmentNode, type FragmentNodeOptions } from '../nodes/fragment-node';\nimport { BBCodeElementNode, type BBCodeElementNodeOptions } from '../nodes/element-node';\nimport { BBCodeTextNode, type BBCodeTextNodeOptions } from '../nodes/text-node';\nimport { BBCodeNewLineNode } from '../nodes/new-line-node';\nimport { BBCodeTabNode } from '../nodes/tab-node';\nimport { BBCodeNodeScheme } from './node-schemes/node-scheme';\nimport type { BBCodeGroupName, BBCodeNodeName } from './node-schemes/node-scheme';\n\nexport type OutputTagCases = $Values<BBCodeScheme.Case>;\n\nexport type ParentChildMap = Map<\n\tBBCodeNodeName | BBCodeGroupName,\n\t{\n\t\tallowedChildren: Array<BBCodeNodeName | BBCodeGroupName>,\n\t\tallowedIn: Array<BBCodeNodeName | BBCodeGroupName>,\n\t\taliases: Array<BBCodeNodeName | BBCodeGroupName>,\n\t},\n>;\n\nexport type BBCodeSchemeOptions = {\n\ttagSchemes: Array<BBCodeTagScheme>,\n\toutputTagCase?: OutputTagCases,\n\tunresolvedNodesHoisting?: boolean,\n\tencoder?: BBCodeEncoder,\n};\n\nexport class BBCodeScheme\n{\n\tstatic Case: {[key: string]: string} = {\n\t\tLOWER: 'lower',\n\t\tUPPER: 'upper',\n\t};\n\n\ttagSchemes: Array<BBCodeTagScheme> = [];\n\toutputTagCase: OutputTagCases = BBCodeScheme.Case.LOWER;\n\tunresolvedNodesHoisting: boolean = true;\n\tencoder: BBCodeEncoder = new BBCodeEncoder();\n\n\tstatic isNodeScheme(value: any): boolean\n\t{\n\t\treturn value instanceof BBCodeNodeScheme;\n\t}\n\n\tstatic getTagName(node: string | BBCodeNode): string | null\n\t{\n\t\tif (Type.isString(node))\n\t\t{\n\t\t\treturn node;\n\t\t}\n\n\t\tif (Type.isObject(node) && node instanceof BBCodeNode)\n\t\t{\n\t\t\treturn node.getName();\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tconstructor(options: BBCodeSchemeOptions = {})\n\t{\n\t\tif (!Type.isPlainObject(options))\n\t\t{\n\t\t\tthrow new TypeError('options is not a object');\n\t\t}\n\n\t\tthis.setTagSchemes(options.tagSchemes);\n\t\tthis.setOutputTagCase(options.outputTagCase);\n\t\tthis.setUnresolvedNodesHoisting(options.unresolvedNodesHoisting);\n\t\tthis.setEncoder(options.encoder);\n\t}\n\n\tsetTagSchemes(tagSchemes: Array<BBCodeTagScheme>)\n\t{\n\t\tif (Type.isArray(tagSchemes))\n\t\t{\n\t\t\tconst invalidSchemeIndex: number = tagSchemes.findIndex((scheme: BBCodeTagScheme): boolean => {\n\t\t\t\treturn !BBCodeScheme.isNodeScheme(scheme);\n\t\t\t});\n\n\t\t\tif (invalidSchemeIndex > -1)\n\t\t\t{\n\t\t\t\tthrow new TypeError(`tagScheme #${invalidSchemeIndex} is not TagScheme instance`);\n\t\t\t}\n\n\t\t\tthis.tagSchemes = [...tagSchemes];\n\t\t}\n\t}\n\n\tsetTagScheme(...tagSchemes: Array<BBCodeTagScheme>)\n\t{\n\t\tconst invalidSchemeIndex: number = tagSchemes.findIndex((scheme: BBCodeTagScheme): boolean => {\n\t\t\treturn !BBCodeScheme.isNodeScheme(scheme);\n\t\t});\n\n\t\tif (invalidSchemeIndex > -1)\n\t\t{\n\t\t\tthrow new TypeError(`tagScheme #${invalidSchemeIndex} is not TagScheme instance`);\n\t\t}\n\n\t\tconst newTagSchemesNames: Array<string> = tagSchemes.flatMap((scheme: BBCodeTagScheme) => {\n\t\t\treturn scheme.getName();\n\t\t});\n\n\t\tconst currentTagSchemes: Array<BBCodeTagScheme> = this.getTagSchemes();\n\t\tcurrentTagSchemes.forEach((scheme: BBCodeTagScheme) => {\n\t\t\tscheme.removeName(...newTagSchemesNames);\n\t\t});\n\n\t\tconst filteredCurrentTagSchemes: Array<BBCodeTagScheme> = currentTagSchemes.filter((scheme: BBCodeTagScheme) => {\n\t\t\treturn Type.isArrayFilled(scheme.getName());\n\t\t});\n\n\t\tthis.setTagSchemes([\n\t\t\t...filteredCurrentTagSchemes,\n\t\t\t...tagSchemes,\n\t\t]);\n\t}\n\n\tgetTagSchemes(): Array<BBCodeTagScheme>\n\t{\n\t\treturn [...this.tagSchemes];\n\t}\n\n\tgetTagScheme(node: string | BBCodeNode): ?BBCodeTagScheme\n\t{\n\t\tconst tagName: ?string = BBCodeScheme.getTagName(node);\n\t\tif (Type.isString(tagName))\n\t\t{\n\t\t\treturn this.getTagSchemes().find((scheme: BBCodeTagScheme): boolean => {\n\t\t\t\treturn scheme.getName().includes(tagName.toLowerCase());\n\t\t\t});\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tsetOutputTagCase(tagCase: $Values<BBCodeScheme.Case>)\n\t{\n\t\tif (!Type.isNil(tagCase))\n\t\t{\n\t\t\tconst allowedCases = Object.values(BBCodeScheme.Case);\n\t\t\tif (allowedCases.includes(tagCase))\n\t\t\t{\n\t\t\t\tthis.outputTagCase = tagCase;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new TypeError(`'${tagCase}' is not allowed`);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetOutputTagCase(): $Values<BBCodeScheme.Case>\n\t{\n\t\treturn this.outputTagCase;\n\t}\n\n\tsetUnresolvedNodesHoisting(value: boolean)\n\t{\n\t\tif (!Type.isNil(value))\n\t\t{\n\t\t\tif (Type.isBoolean(value))\n\t\t\t{\n\t\t\t\tthis.unresolvedNodesHoisting = value;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new TypeError(`'${value}' is not allowed value`);\n\t\t\t}\n\t\t}\n\t}\n\n\tisAllowedUnresolvedNodesHoisting(): boolean\n\t{\n\t\treturn this.unresolvedNodesHoisting;\n\t}\n\n\tsetEncoder(encoder: BBCodeEncoder)\n\t{\n\t\tif (encoder instanceof BBCodeEncoder)\n\t\t{\n\t\t\tthis.encoder = encoder;\n\t\t}\n\t}\n\n\tgetEncoder(): BBCodeEncoder\n\t{\n\t\treturn this.encoder;\n\t}\n\n\tgetAllowedTags(): Array<string>\n\t{\n\t\treturn this.getTagSchemes().flatMap((tagScheme: BBCodeTagScheme) => {\n\t\t\treturn tagScheme.getName();\n\t\t});\n\t}\n\n\tisAllowedTag(node: string | BBCodeNode): boolean\n\t{\n\t\tconst allowedTags: Array<string> = this.getAllowedTags();\n\t\tconst tagName: ?string = BBCodeScheme.getTagName(node);\n\n\t\treturn allowedTags.includes(String(tagName).toLowerCase());\n\t}\n\n\tisVoid(node: string | BBCodeNode): boolean\n\t{\n\t\tconst tagScheme: ?BBCodeTagScheme = this.getTagScheme(node);\n\t\tif (tagScheme)\n\t\t{\n\t\t\treturn tagScheme.isVoid();\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tisElement(node: BBCodeNode): boolean\n\t{\n\t\treturn node && node.getType() === BBCodeNode.ELEMENT_NODE;\n\t}\n\n\tisRoot(node: BBCodeNode): boolean\n\t{\n\t\treturn node && node.getName() === '#root';\n\t}\n\n\tisFragment(node: BBCodeNode): boolean\n\t{\n\t\treturn node && node.getName() === '#fragment';\n\t}\n\n\tisAnyText(node: BBCodeNode): boolean\n\t{\n\t\treturn node && node.getType() === BBCodeNode.TEXT_NODE;\n\t}\n\n\tisText(node: BBCodeNode): boolean\n\t{\n\t\treturn node && node.getName() === '#text';\n\t}\n\n\tisNewLine(node: BBCodeNode): boolean\n\t{\n\t\treturn node && node.getName() === '#linebreak';\n\t}\n\n\tisTab(node: BBCodeNode): boolean\n\t{\n\t\treturn node && node.getName() === '#tab';\n\t}\n\n\tgetParentChildMap(): ParentChildMap\n\t{\n\t\tconst tagSchemes: Array<BBCodeTagScheme> = this.getTagSchemes();\n\t\tconst map = new Map();\n\n\t\ttagSchemes.forEach((tagScheme: BBCodeTagScheme) => {\n\t\t\tconst groups: Array<BBCodeGroupName> = tagScheme.getGroup();\n\t\t\tconst schemeNames: Array<string> = [\n\t\t\t\t...tagScheme.getName(),\n\t\t\t\t...groups,\n\t\t\t\t...(tagScheme.isVoid() ? ['#void'] : []),\n\t\t\t];\n\n\t\t\tconst allowedChildren = tagScheme.getAllowedChildren();\n\t\t\tconst allowedIn = tagScheme.getAllowedIn();\n\n\t\t\tschemeNames.forEach((name) => {\n\t\t\t\tif (!map.has(name))\n\t\t\t\t{\n\t\t\t\t\tmap.set(\n\t\t\t\t\t\tname,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tallowedChildren: new Set(),\n\t\t\t\t\t\t\tallowedIn: new Set(),\n\t\t\t\t\t\t\taliases: new Set(),\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst entry: {\n\t\t\t\t\tallowedChildren: Set,\n\t\t\t\t\tallowedIn: Set,\n\t\t\t\t\taliases: Set,\n\t\t\t\t} = map.get(name);\n\n\t\t\t\tconst newEntry = {\n\t\t\t\t\tallowedChildren: new Set([...entry.allowedChildren, ...allowedChildren]),\n\t\t\t\t\tallowedIn: new Set([...entry.allowedIn, ...allowedIn]),\n\t\t\t\t\taliases: new Set([name, ...groups, ...(tagScheme.isVoid() ? ['#void'] : [])]),\n\t\t\t\t};\n\n\t\t\t\tmap.set(name, newEntry);\n\t\t\t});\n\t\t});\n\n\t\treturn map;\n\t}\n\n\tisChildAllowed(parent: string | BBCodeNode, child: string | BBCodeNode): boolean\n\t{\n\t\tconst parentName: ?string = BBCodeScheme.getTagName(parent);\n\t\tconst childName: ?string = BBCodeScheme.getTagName(child);\n\n\t\tif (\n\t\t\tType.isStringFilled(parentName)\n\t\t\t&& Type.isStringFilled(childName)\n\t\t)\n\t\t{\n\t\t\tif (parentName === '#fragment')\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst parentChildMap = this.getParentChildMap();\n\t\t\tconst parentMap = parentChildMap.get(parentName);\n\t\t\tconst childMap = parentChildMap.get(childName);\n\n\t\t\tif (\n\t\t\t\tType.isPlainObject(parentMap)\n\t\t\t\t&& Type.isPlainObject(childMap)\n\t\t\t)\n\t\t\t{\n\t\t\t\treturn (\n\t\t\t\t\t(\n\t\t\t\t\t\tparentMap.allowedChildren.size === 0\n\t\t\t\t\t\t|| [...childMap.aliases].some((name) => {\n\t\t\t\t\t\t\treturn parentMap.allowedChildren.has(name);\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t\t&& (\n\t\t\t\t\t\tchildMap.allowedIn.size === 0\n\t\t\t\t\t\t|| [...parentMap.aliases].some((name) => {\n\t\t\t\t\t\t\treturn childMap.allowedIn.has(name);\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tcreateRoot(options: RootNodeOptions = {}): BBCodeRootNode\n\t{\n\t\treturn new BBCodeRootNode({\n\t\t\t...options,\n\t\t\tscheme: this,\n\t\t});\n\t}\n\n\tcreateNode(options: BBCodeNodeOptions): BBCodeNode\n\t{\n\t\tif (!Type.isPlainObject(options))\n\t\t{\n\t\t\tthrow new TypeError('options is not a object');\n\t\t}\n\n\t\tif (!Type.isStringFilled(options.name))\n\t\t{\n\t\t\tthrow new TypeError('options.name is required');\n\t\t}\n\n\t\tif (!this.isAllowedTag(options.name))\n\t\t{\n\t\t\tthrow new TypeError(`Scheme for \"${options.name}\" tag is not specified.`);\n\t\t}\n\n\t\treturn new BBCodeNode({\n\t\t\t...options,\n\t\t\tscheme: this,\n\t\t});\n\t}\n\n\tcreateElement(options: BBCodeElementNodeOptions = {}): BBCodeElementNode\n\t{\n\t\tif (!Type.isPlainObject(options))\n\t\t{\n\t\t\tthrow new TypeError('options is not a object');\n\t\t}\n\n\t\tif (!Type.isStringFilled(options.name))\n\t\t{\n\t\t\tthrow new TypeError('options.name is required');\n\t\t}\n\n\t\tif (!this.isAllowedTag(options.name))\n\t\t{\n\t\t\tthrow new TypeError(`Scheme for \"${options.name}\" tag is not specified.`);\n\t\t}\n\n\t\treturn new BBCodeElementNode({\n\t\t\t...options,\n\t\t\tscheme: this,\n\t\t});\n\t}\n\n\tcreateText(options: BBCodeTextNodeOptions = {}): BBCodeTextNode\n\t{\n\t\tconst preparedOptions = Type.isPlainObject(options) ? options : { content: options };\n\n\t\treturn new BBCodeTextNode({\n\t\t\t...preparedOptions,\n\t\t\tscheme: this,\n\t\t});\n\t}\n\n\tcreateNewLine(options: BBCodeTextNodeOptions = {}): BBCodeNewLineNode\n\t{\n\t\tconst preparedOptions = Type.isPlainObject(options) ? options : { content: options };\n\n\t\treturn new BBCodeNewLineNode({\n\t\t\t...preparedOptions,\n\t\t\tscheme: this,\n\t\t});\n\t}\n\n\tcreateTab(options: BBCodeTextNodeOptions = {}): BBCodeTabNode\n\t{\n\t\tconst preparedOptions = Type.isPlainObject(options) ? options : { content: options };\n\n\t\treturn new BBCodeTabNode({\n\t\t\t...preparedOptions,\n\t\t\tscheme: this,\n\t\t});\n\t}\n\n\tcreateFragment(options: FragmentNodeOptions = {}): BBCodeFragmentNode\n\t{\n\t\treturn new BBCodeFragmentNode({\n\t\t\t...options,\n\t\t\tscheme: this,\n\t\t});\n\t}\n}\n","import { BBCodeNodeScheme } from './node-scheme';\n\nexport class BBCodeTextScheme extends BBCodeNodeScheme\n{\n\tconstructor(options)\n\t{\n\t\tsuper({ ...options, name: ['#text'] });\n\t}\n}\n","import { BBCodeNodeScheme } from './node-scheme';\n\nexport class BBCodeNewLineScheme extends BBCodeNodeScheme\n{\n\tconstructor(options = {})\n\t{\n\t\tsuper({ ...options, name: ['#linebreak'] });\n\t}\n}\n","import { BBCodeNodeScheme } from './node-scheme';\n\nexport class BBCodeTabScheme extends BBCodeNodeScheme\n{\n\tconstructor(options)\n\t{\n\t\tsuper({ ...options, name: ['#tab'] });\n\t}\n}\n","import { Type } from 'main.core';\nimport { BBCodeScheme } from './bbcode-scheme';\nimport { BBCodeTagScheme } from './node-schemes/tag-scheme';\nimport { typeof BBCodeElementNode } from '../nodes/element-node';\nimport type { BBCodeSchemeOptions } from './bbcode-scheme';\n\nexport type DefaultBBCodeSchemeOptions = BBCodeSchemeOptions & {\n\tfileTag: 'disk' | 'file' | 'none',\n};\n\nexport class DefaultBBCodeScheme extends BBCodeScheme\n{\n\tconstructor(options: DefaultBBCodeSchemeOptions = {})\n\t{\n\t\tconst tagSchemes = [\n\t\t\tnew BBCodeTagScheme({\n\t\t\t\tname: ['b', 'u', 'i', 's'],\n\t\t\t\tgroup: ['#inline', '#format'],\n\t\t\t\tallowedChildren: ['#text', '#linebreak', '#inline'],\n\t\t\t\tcanBeEmpty: false,\n\t\t\t}),\n\t\t\tnew BBCodeTagScheme({\n\t\t\t\tname: ['span'],\n\t\t\t\tgroup: ['#inline'],\n\t\t\t\tallowedChildren: ['#text', '#linebreak', '#inline'],\n\t\t\t\tcanBeEmpty: false,\n\t\t\t}),\n\t\t\tnew BBCodeTagScheme({\n\t\t\t\tname: ['img'],\n\t\t\t\tgroup: ['#inlineBlock'],\n\t\t\t\tallowedChildren: ['#text'],\n\t\t\t\tcanBeEmpty: false,\n\t\t\t}),\n\t\t\tnew BBCodeTagScheme({\n\t\t\t\tname: ['url'],\n\t\t\t\tgroup: ['#inline'],\n\t\t\t\tallowedChildren: ['#text', '#format', 'img'],\n\t\t\t\tcanBeEmpty: false,\n\t\t\t}),\n\t\t\tnew BBCodeTagScheme({\n\t\t\t\tname: 'p',\n\t\t\t\tgroup: ['#block'],\n\t\t\t\tallowedChildren: ['#text', '#linebreak', '#inline', '#inlineBlock'],\n\t\t\t\tstringify: BBCodeTagScheme.defaultBlockStringifier,\n\t\t\t\tallowedIn: ['#root', '#shadowRoot'],\n\t\t\t}),\n\t\t\tnew BBCodeTagScheme({\n\t\t\t\tname: 'list',\n\t\t\t\tgroup: ['#block'],\n\t\t\t\tallowedChildren: ['*'],\n\t\t\t\tstringify: BBCodeTagScheme.defaultBlockStringifier,\n\t\t\t\tallowedIn: ['#root', '#shadowRoot'],\n\t\t\t\tcanBeEmpty: false,\n\t\t\t}),\n\t\t\tnew BBCodeTagScheme({\n\t\t\t\tname: ['*'],\n\t\t\t\tallowedChildren: ['#text', '#linebreak', '#inline', '#inlineBlock'],\n\t\t\t\tstringify: (node: BBCodeElementNode) => {\n\t\t\t\t\tconst openingTag: string = node.getOpeningTag();\n\t\t\t\t\tconst content: string = node.getContent().trim();\n\n\t\t\t\t\treturn `${openingTag}${content}`;\n\t\t\t\t},\n\t\t\t\tallowedIn: ['list'],\n\t\t\t}),\n\t\t\tnew BBCodeTagScheme({\n\t\t\t\tname: 'table',\n\t\t\t\tgroup: ['#block'],\n\t\t\t\tallowedChildren: ['tr'],\n\t\t\t\tstringify: BBCodeTagScheme.defaultBlockStringifier,\n\t\t\t\tallowedIn: ['#root', 'quote', 'spoiler'],\n\t\t\t\tcanBeEmpty: false,\n\t\t\t}),\n\t\t\tnew BBCodeTagScheme({\n\t\t\t\tname: 'tr',\n\t\t\t\tallowedChildren: ['th', 'td'],\n\t\t\t\tallowedIn: ['table'],\n\t\t\t\tcanBeEmpty: false,\n\t\t\t}),\n\t\t\tnew BBCodeTagScheme({\n\t\t\t\tname: ['th', 'td'],\n\t\t\t\tgroup: ['#shadowRoot'],\n\t\t\t\tallowedChildren: ['#text', '#linebreak', '#inline', '#inlineBlock', '#block'],\n\t\t\t\tallowedIn: ['tr'],\n\t\t\t}),\n\t\t\tnew BBCodeTagScheme({\n\t\t\t\tname: 'quote',\n\t\t\t\tgroup: ['#block', '#shadowRoot'],\n\t\t\t\tallowedChildren: ['#text', '#linebreak', '#inline', '#inlineBlock', '#block'],\n\t\t\t\tallowedIn: ['#root', '#shadowRoot'],\n\t\t\t}),\n\t\t\tnew BBCodeTagScheme({\n\t\t\t\tname: 'code',\n\t\t\t\tgroup: ['#block'],\n\t\t\t\tstringify: BBCodeTagScheme.defaultBlockStringifier,\n\t\t\t\tallowedChildren: ['#text', '#linebreak', '#tab'],\n\t\t\t\tallowedIn: ['#root', '#shadowRoot'],\n\t\t\t}),\n\t\t\tnew BBCodeTagScheme({\n\t\t\t\tname: 'video',\n\t\t\t\tgroup: ['#inlineBlock'],\n\t\t\t\tallowedChildren: ['#text'],\n\t\t\t\tallowedIn: ['#root', '#shadowRoot', 'p'],\n\t\t\t\tcanBeEmpty: false,\n\t\t\t}),\n\t\t\tnew BBCodeTagScheme({\n\t\t\t\tname: 'spoiler',\n\t\t\t\tgroup: ['#block', '#shadowRoot'],\n\t\t\t\tallowedChildren: ['#text', '#linebreak', '#inline', '#inlineBlock', '#block'],\n\t\t\t\tallowedIn: ['#root', '#shadowRoot'],\n\t\t\t}),\n\t\t\tnew BBCodeTagScheme({\n\t\t\t\tname: ['user', 'project', 'department'],\n\t\t\t\tgroup: ['#inline', '#mention'],\n\t\t\t\tallowedChildren: ['#text', '#format'],\n\t\t\t\tcanBeEmpty: false,\n\t\t\t}),\n\t\t\tnew BBCodeTagScheme({\n\t\t\t\tname: ['#root'],\n\t\t\t}),\n\t\t\tnew BBCodeTagScheme({\n\t\t\t\tname: ['#fragment'],\n\t\t\t}),\n\t\t\tnew BBCodeTagScheme({\n\t\t\t\tname: ['#text'],\n\t\t\t}),\n\t\t\tnew BBCodeTagScheme({\n\t\t\t\tname: ['#linebreak'],\n\t\t\t}),\n\t\t\tnew BBCodeTagScheme({\n\t\t\t\tname: ['#tab'],\n\t\t\t\tstringify: () => {\n\t\t\t\t\treturn '';\n\t\t\t\t},\n\t\t\t}),\n\t\t];\n\n\t\tif (options?.fileTag !== 'none')\n\t\t{\n\t\t\ttagSchemes.push(\n\t\t\t\tnew BBCodeTagScheme({\n\t\t\t\t\tname: options?.fileTag === 'file' ? 'file' : 'disk',\n\t\t\t\t\tgroup: ['#inline'],\n\t\t\t\t\tvoid: true,\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tsuper({\n\t\t\ttagSchemes,\n\t\t\toutputTagCase: BBCodeScheme.Case.LOWER,\n\t\t\tunresolvedNodesHoisting: true,\n\t\t});\n\n\t\tif (Type.isPlainObject(options))\n\t\t{\n\t\t\tthis.setTagSchemes(options.tagSchemes);\n\t\t\tthis.setOutputTagCase(options.outputTagCase);\n\t\t\tthis.setUnresolvedNodesHoisting(options.unresolvedNodesHoisting);\n\t\t}\n\t}\n}\n"],"names":["getByIndex","array","index","Type","isArray","TypeError","isInteger","preparedIndex","length","privateMap","WeakMap","nameSymbol","Symbol","BBCodeNode","constructor","options","children","set","delayedChildren","setName","name","get","scheme","setParent","parent","setChildren","ELEMENT_NODE","TEXT_NODE","ROOT_NODE","FRAGMENT_NODE","freezeProperty","node","property","value","enumerable","Object","defineProperty","writable","configurable","makeNonEnumerableProperty","flattenChildren","isArrayFilled","flatMap","getType","getChildren","setScheme","onUnknown","getScheme","getTagScheme","getName","getEncoder","prepareCase","currentCase","getOutputTagCase","toUpperCase","toLowerCase","isString","getDisplayedName","mounted","hasParent","onNodeDidMount","getParent","type","Boolean","remove","removeChild","appendChild","getLastChild","getLastChildOfType","reverse","find","getLastChildOfName","getFirstChild","getFirstChildOfType","getFirstChildOfName","getPreviewsSibling","parentChildren","currentIndex","indexOf","getPreviewsSiblings","filter","child","getNextSibling","getNextSiblings","getChildrenCount","hasChildren","isEmpty","adjustChildren","setDelayedChildren","addDelayedChildren","getDelayedChildren","hasDelayedChildren","flattenedChildren","forEach","push","prependChild","unshift","insertBefore","nodes","currentNodeIndex","deleteCount","splice","insertAfter","startIndex","propagateChild","includes","reduce","acc","replaceChild","targetNode","map","replace","clone","deep","createNode","toPlainText","join","getTextContent","getPlainTextLength","removePreviewsSiblings","previewsSiblings","sibling","removeNextSiblings","nextSiblings","findByTextIndex","endIndex","flattenAst","getLength","split","offset","byWord","plainTextLength","leftTree","tree","leftNode","rightNode","rightTree","ast","flat","traverse","toJSON","voidSymbol","BBCodeElementNode","attributes","tagScheme","isVoid","setValue","setAttributes","isAllowedTag","filterChildren","filteredChildren","resolved","unresolved","isChildAllowed","convertChildren","childConverter","getChildConverter","isNumber","isBoolean","getValue","canBeEmpty","hasGroup","groupName","isPlainObject","entries","key","fromEntries","setAttribute","isStringFilled","preparedName","isNil","getAttribute","getAttributes","convertedChildren","isAllowedUnresolvedNodesHoisting","toStringValue","encodedValue","encodeAttribute","toStringAttributes","attrValue","preparedKey","getContent","toString","getOpeningTag","displayedName","tagValue","formattedAttributes","getClosingTag","createElement","void","splitByChildIndex","childrenCount","leftChildren","childIndex","rightChildren","stringifier","getStringifier","isFunction","openingTag","content","closingTag","BBCodeRootNode","createRoot","BBCodeFragmentNode","createFragment","contentSymbol","BBCodeTextNode","nodeOptions","setContent","isTextNodeContent","String","createText","sourceOffset","contentLength","lastIndex","lastIndexOf","slice","encodeText","BBCodeNewLineNode","createNewLine","BBCodeTabNode","createTab","BBCodeNodeScheme","group","serializer","allowedIn","setGroup","setAllowedIn","setStringifier","stringify","setSerializer","serialize","removeName","names","removeGroup","groups","getGroup","isNull","getSerializer","allowedParents","getAllowedIn","isAllowedIn","tagName","canBeEmptySymbol","BBCodeTagScheme","allowedChildren","setVoid","setCanBeEmpty","setChildConverter","convertChild","setAllowedChildren","defaultBlockStringifier","isAllowNewlineBeforeOpeningTag","previewsSibling","isAllowNewlineAfterOpeningTag","firstChild","isAllowNewlineBeforeClosingTag","lastChild","isAllowNewlineAfterClosingTag","nextSibling","converter","getAllowedChildren","BBCodeScheme","isNodeScheme","getTagName","isObject","tagSchemes","outputTagCase","Case","LOWER","unresolvedNodesHoisting","encoder","BBCodeEncoder","setTagSchemes","setOutputTagCase","setUnresolvedNodesHoisting","setEncoder","invalidSchemeIndex","findIndex","setTagScheme","newTagSchemesNames","currentTagSchemes","getTagSchemes","filteredCurrentTagSchemes","tagCase","allowedCases","values","getAllowedTags","allowedTags","isElement","isRoot","isFragment","isAnyText","isText","isNewLine","isTab","getParentChildMap","Map","schemeNames","has","Set","aliases","entry","newEntry","parentName","childName","parentChildMap","parentMap","childMap","size","some","preparedOptions","UPPER","BBCodeTextScheme","BBCodeNewLineScheme","BBCodeTabScheme","DefaultBBCodeScheme","trim","fileTag"],"mappings":";;;;;;CAEO,SAASA,UAAU,CAAIC,KAAe,EAAEC,KAAa,EAC5D;GACC,IAAI,CAACC,cAAI,CAACC,OAAO,CAACH,KAAK,CAAC,EACxB;KACC,MAAM,IAAII,SAAS,CAAC,sBAAsB,CAAC;;GAG5C,IAAI,CAACF,cAAI,CAACG,SAAS,CAACJ,KAAK,CAAC,EAC1B;KACC,MAAM,IAAIG,SAAS,CAAC,wBAAwB,CAAC;;GAG9C,MAAME,aAAa,GAAGL,KAAK,GAAG,CAAC,GAAGD,KAAK,CAACO,MAAM,GAAGN,KAAK,GAAGA,KAAK;GAE9D,OAAOD,KAAK,CAACM,aAAa,CAAC;CAC5B;;CCcO,MAAME,UAAkD,GAAG,IAAIC,OAAO,EAAE;AAC/E,CAAO,MAAMC,UAAkB,GAAGC,MAAM,CAAC,MAAM,CAAC;AAEhD,CAAO,MAAMC,UAAU,CACvB;GAICC,WAAW,CAACC,OAA0B,GAAG,EAAE,EAC3C;KAAA,KAJCJ,UAAU,IAAY,UAAU;KAAA,KACjCK,QAAQ,GAAkD,EAAE;KAI3DP,UAAU,CAACQ,GAAG,CAAC,IAAI,EAAE;OACpBC,eAAe,EAAE;MACjB,CAAC;KAEF,IAAI,CAACC,OAAO,CAACJ,OAAO,CAACK,IAAI,CAAC;KAC1BX,UAAU,CAACY,GAAG,CAAC,IAAI,CAAC,CAACC,MAAM,GAAGP,OAAO,CAACO,MAAM;KAC5C,IAAI,CAACC,SAAS,CAACR,OAAO,CAACS,MAAM,CAAC;KAC9B,IAAI,CAACC,WAAW,CAACV,OAAO,CAACC,QAAQ,CAAC;;GAGnC,WAAWU,YAAY,GACvB;KACC,OAAO,CAAC;;GAGT,WAAWC,SAAS,GACpB;KACC,OAAO,CAAC;;GAGT,WAAWC,SAAS,GACpB;KACC,OAAO,CAAC;;GAGT,WAAWC,aAAa,GACxB;KACC,OAAO,CAAC;;GAGT,OAAOC,cAAc,CAACC,IAAgB,EAAEC,QAAgB,EAAEC,KAAU,EAAEC,UAAmB,GAAG,IAAI,EAChG;KACCC,MAAM,CAACC,cAAc,CAACL,IAAI,EAAEC,QAAQ,EAAE;OACrCC,KAAK;OACLI,QAAQ,EAAE,KAAK;OACfC,YAAY,EAAE,KAAK;OACnBJ;MACA,CAAC;;GAGH,OAAOK,yBAAyB,CAACR,IAAgB,EAAEC,QAAgB,EACnE;KACCG,MAAM,CAACC,cAAc,CAACL,IAAI,EAAEC,QAAQ,EAAE;OACrCK,QAAQ,EAAE,KAAK;OACfH,UAAU,EAAE,KAAK;OACjBI,YAAY,EAAE;MACd,CAAC;;GAGH,OAAOE,eAAe,CAACxB,QAAuD,EAC9E;KACC,IAAIb,cAAI,CAACsC,aAAa,CAACzB,QAAQ,CAAC,EAChC;OACC,OAAOA,QAAQ,CAAC0B,OAAO,CAAEX,IAA4C,IAAK;SACzE,IAAIA,IAAI,CAACY,OAAO,EAAE,KAAK9B,UAAU,CAACgB,aAAa,EAC/C;WACC,OAAOE,IAAI,CAACa,WAAW,EAAE;;SAG1B,OAAOb,IAAI;QACX,CAAC;;KAGH,OAAO,EAAE;;GAGVc,SAAS,CAACvB,MAAoB,EAAEwB,SAA2C,EAC3E;KACCrC,UAAU,CAACY,GAAG,CAAC,IAAI,CAAC,CAACC,MAAM,GAAGA,MAAM;;GAGrCyB,SAAS,GACT;KACC,OAAOtC,UAAU,CAACY,GAAG,CAAC,IAAI,CAAC,CAACC,MAAM;;GAGnC0B,YAAY,GACZ;KACC,OAAO,IAAI,CAACD,SAAS,EAAE,CAACC,YAAY,CAAC,IAAI,CAACC,OAAO,EAAE,CAAC;;GAGrDC,UAAU,GACV;KACC,OAAO,IAAI,CAACH,SAAS,EAAE,CAACG,UAAU,EAAE;;GAGrCC,WAAW,CAAClB,KAAa,EACzB;KACC,MAAMX,MAAoB,GAAG,IAAI,CAACyB,SAAS,EAAE;KAC7C,MAAMK,WAAW,GAAG9B,MAAM,CAAC+B,gBAAgB,EAAE;KAC7C,IAAID,WAAW,KAAK,OAAO,EAC3B;OACC,OAAOnB,KAAK,CAACqB,WAAW,EAAE;;KAG3B,OAAOrB,KAAK,CAACsB,WAAW,EAAE;;GAG3BpC,OAAO,CAACC,IAAY,EACpB;KACC,IAAIjB,cAAI,CAACqD,QAAQ,CAACpC,IAAI,CAAC,EACvB;OACC,IAAI,CAACT,UAAU,CAAC,GAAGS,IAAI,CAACmC,WAAW,EAAE;;;GAIvCN,OAAO,GACP;KACC,OAAO,IAAI,CAACtC,UAAU,CAAC;;GAGxB8C,gBAAgB,GAChB;KACC,OAAO,IAAI,CAACN,WAAW,CAAC,IAAI,CAACF,OAAO,EAAE,CAAC;;GAGxC1B,SAAS,CAACC,MAA+B,GAAG,IAAI,EAChD;KACC,MAAMkC,OAAO,GAAG,CAAC,IAAI,CAACC,SAAS,EAAE,IAAInC,MAAM;KAC3Cf,UAAU,CAACY,GAAG,CAAC,IAAI,CAAC,CAACG,MAAM,GAAGA,MAAM;KAEpC,IAAIkC,OAAO,EACX;OACC,IAAI,CAACE,cAAc,EAAE;;;GAIvBC,SAAS,GACT;KACC,OAAOpD,UAAU,CAACY,GAAG,CAAC,IAAI,CAAC,CAACG,MAAM;;GAGnCmB,OAAO,GACP;KACC,OAAOlC,UAAU,CAACY,GAAG,CAAC,IAAI,CAAC,CAACyC,IAAI;;GAGjCH,SAAS,GACT;KACC,OAAOI,OAAO,CAACtD,UAAU,CAACY,GAAG,CAAC,IAAI,CAAC,CAACG,MAAM,CAAC;;GAG5CwC,MAAM,GACN;KACC,IAAI,IAAI,CAACL,SAAS,EAAE,EACpB;OACC,IAAI,CAACE,SAAS,EAAE,CAACI,WAAW,CAAC,IAAI,CAAC;;;GAIpCxC,WAAW,CAACT,QAAuD,EACnE;KACC,IAAIb,cAAI,CAACC,OAAO,CAACY,QAAQ,CAAC,EAC1B;OACC,IAAI,CAACA,QAAQ,GAAG,EAAE;OAClB,IAAI,CAACkD,WAAW,CAAC,GAAGlD,QAAQ,CAAC;;;GAI/B4B,WAAW,GACX;KACC,OAAO,CAAC,GAAG,IAAI,CAAC5B,QAAQ,CAAC;;GAG1BmD,YAAY,GACZ;KACC,OAAOnE,UAAU,CAAC,IAAI,CAAC4C,WAAW,EAAE,EAAE,CAAC,CAAC,CAAC;;GAG1CwB,kBAAkB,CAACN,IAAY,EAC/B;KACC,OAAO,IAAI,CAAClB,WAAW,EAAE,CAACyB,OAAO,EAAE,CAACC,IAAI,CAAEvC,IAAuB,IAAK;OACrE,OAAOA,IAAI,CAACY,OAAO,EAAE,KAAKmB,IAAI;MAC9B,CAAC;;GAGHS,kBAAkB,CAACnD,IAAY,EAC/B;KACC,OAAO,IAAI,CAACwB,WAAW,EAAE,CAACyB,OAAO,EAAE,CAACC,IAAI,CAAEvC,IAAuB,IAAK;OACrE,OAAOA,IAAI,CAACY,OAAO,EAAE,KAAK9B,UAAU,CAACa,YAAY,IAAIK,IAAI,CAACkB,OAAO,EAAE,KAAK7B,IAAI;MAC5E,CAAC;;GAGHoD,aAAa,GACb;KACC,OAAOxE,UAAU,CAAC,IAAI,CAAC4C,WAAW,EAAE,EAAE,CAAC,CAAC;;GAGzC6B,mBAAmB,CAACX,IAAY,EAChC;KACC,OAAO,IAAI,CAAClB,WAAW,EAAE,CAAC0B,IAAI,CAAEvC,IAAuB,IAAK;OAC3D,OAAOA,IAAI,CAACY,OAAO,EAAE,KAAKmB,IAAI;MAC9B,CAAC;;GAGHY,mBAAmB,CAACtD,IAAY,EAChC;KACC,OAAO,IAAI,CAACwB,WAAW,EAAE,CAAC0B,IAAI,CAAEvC,IAAuB,IAAK;OAC3D,OAAOA,IAAI,CAACY,OAAO,EAAE,KAAK9B,UAAU,CAACa,YAAY,IAAIK,IAAI,CAACkB,OAAO,EAAE,KAAK7B,IAAI;MAC5E,CAAC;;GAGHuD,kBAAkB,GAClB;KACC,IAAI,IAAI,CAAChB,SAAS,EAAE,EACpB;OACC,MAAMiB,cAAwC,GAAG,IAAI,CAACf,SAAS,EAAE,CAACjB,WAAW,EAAE;OAC/E,MAAMiC,YAAoB,GAAGD,cAAc,CAACE,OAAO,CAAC,IAAI,CAAC;OACzD,IAAID,YAAY,GAAG,CAAC,EACpB;SACC,OAAO7E,UAAU,CAAC4E,cAAc,EAAEC,YAAY,GAAG,CAAC,CAAC;;;KAIrD,OAAO,IAAI;;GAGZE,mBAAmB,GACnB;KACC,IAAI,IAAI,CAACpB,SAAS,EAAE,EACpB;OACC,MAAMiB,cAAwC,GAAG,IAAI,CAACf,SAAS,EAAE,CAACjB,WAAW,EAAE;OAC/E,MAAMiC,YAAoB,GAAGD,cAAc,CAACE,OAAO,CAAC,IAAI,CAAC;OAEzD,OAAOF,cAAc,CAACI,MAAM,CAAC,CAACC,KAAwB,EAAE/E,KAAK,KAAK;SACjE,OAAOA,KAAK,GAAG2E,YAAY;QAC3B,CAAC;;KAGH,OAAO,IAAI;;GAGZK,cAAc,GACd;KACC,IAAI,IAAI,CAACvB,SAAS,EAAE,EACpB;OACC,MAAMiB,cAAwC,GAAG,IAAI,CAACf,SAAS,EAAE,CAACjB,WAAW,EAAE;OAC/E,MAAMiC,YAAoB,GAAGD,cAAc,CAACE,OAAO,CAAC,IAAI,CAAC;OACzD,IAAID,YAAY,KAAK,CAAC,CAAC,IAAIA,YAAY,KAAKD,cAAc,CAACpE,MAAM,EACjE;SACC,OAAOR,UAAU,CAAC4E,cAAc,EAAEC,YAAY,GAAG,CAAC,CAAC;;;KAIrD,OAAO,IAAI;;GAGZM,eAAe,GACf;KACC,IAAI,IAAI,CAACxB,SAAS,EAAE,EACpB;OACC,MAAMiB,cAAwC,GAAG,IAAI,CAACf,SAAS,EAAE,CAACjB,WAAW,EAAE;OAC/E,MAAMiC,YAAoB,GAAGD,cAAc,CAACE,OAAO,CAAC,IAAI,CAAC;OAEzD,OAAOF,cAAc,CAACI,MAAM,CAAC,CAACC,KAAwB,EAAE/E,KAAK,KAAK;SACjE,OAAOA,KAAK,GAAG2E,YAAY;QAC3B,CAAC;;KAGH,OAAO,IAAI;;GAGZO,gBAAgB,GAChB;KACC,OAAO,IAAI,CAACpE,QAAQ,CAACR,MAAM;;GAG5B6E,WAAW,GACX;KACC,OAAO,IAAI,CAACD,gBAAgB,EAAE,GAAG,CAAC;;GAGnCE,OAAO,GACP;KACC,OAAO,IAAI,CAACF,gBAAgB,EAAE,KAAK,CAAC;;GAGrCG,cAAc,GACd;KACC,IAAI,CAAC9D,WAAW,CAAC,IAAI,CAACmB,WAAW,EAAE,CAAC;;GAGrC4C,kBAAkB,CAACxE,QAAkC,EACrD;KACC,IAAIb,cAAI,CAACC,OAAO,CAACY,QAAQ,CAAC,EAC1B;OACCP,UAAU,CAACY,GAAG,CAAC,IAAI,CAAC,CAACH,eAAe,GAAGF,QAAQ;;;GAIjDyE,kBAAkB,CAACzE,QAAkC,EACrD;KACC,IAAIb,cAAI,CAACsC,aAAa,CAACzB,QAAQ,CAAC,EAChC;OACC,IAAI,CAACwE,kBAAkB,CAAC,CACvB,GAAG,IAAI,CAACE,kBAAkB,EAAE,EAC5B,GAAG1E,QAAQ,CACX,CAAC;;;GAIJ2E,kBAAkB,GAClB;KACC,OAAOlF,UAAU,CAACY,GAAG,CAAC,IAAI,CAAC,CAACH,eAAe,CAACV,MAAM,GAAG,CAAC;;GAGvDkF,kBAAkB,GAClB;KACC,OAAO,CAAC,GAAGjF,UAAU,CAACY,GAAG,CAAC,IAAI,CAAC,CAACH,eAAe,CAAC;;GAGjDgD,WAAW,CAAC,GAAGlD,QAAuD,EACtE;KACC,MAAM4E,iBAA2C,GAAG/E,UAAU,CAAC2B,eAAe,CAACxB,QAAQ,CAAC;KAExF4E,iBAAiB,CAACC,OAAO,CAAE9D,IAAuB,IAAK;OACtDA,IAAI,CAACiC,MAAM,EAAE;OACbjC,IAAI,CAACR,SAAS,CAAC,IAAI,CAAC;OACpB,IAAI,CAACP,QAAQ,CAAC8E,IAAI,CAAC/D,IAAI,CAAC;MACxB,CAAC;;GAGHgE,YAAY,CAAC,GAAG/E,QAAuD,EACvE;KACC,MAAM4E,iBAA2C,GAAG/E,UAAU,CAAC2B,eAAe,CAACxB,QAAQ,CAAC;KAExF4E,iBAAiB,CAACC,OAAO,CAAE9D,IAAuB,IAAK;OACtDA,IAAI,CAACiC,MAAM,EAAE;OACbjC,IAAI,CAACR,SAAS,CAAC,IAAI,CAAC;OACpB,IAAI,CAACP,QAAQ,CAACgF,OAAO,CAACjE,IAAI,CAAC;MAC3B,CAAC;;GAGHkE,YAAY,CAAC,GAAGC,KAA+B,EAC/C;KACC,IAAI,IAAI,CAACvC,SAAS,EAAE,IAAIxD,cAAI,CAACsC,aAAa,CAACyD,KAAK,CAAC,EACjD;OACC,MAAM1E,MAAyB,GAAG,IAAI,CAACqC,SAAS,EAAE;OAClD,MAAMe,cAAwC,GAAGpD,MAAM,CAACoB,WAAW,EAAE;OACrE,MAAMuD,gBAAwB,GAAGvB,cAAc,CAACE,OAAO,CAAC,IAAI,CAAC;OAE7D,MAAMsB,WAAmB,GAAG,CAAC;OAC7BxB,cAAc,CAACyB,MAAM,CAACF,gBAAgB,EAAEC,WAAW,EAAE,GAAGF,KAAK,CAAC;OAE9D1E,MAAM,CAACC,WAAW,CAACmD,cAAc,CAAC;;;GAIpC0B,WAAW,CAAC,GAAGJ,KAA+B,EAC9C;KACC,IAAI,IAAI,CAACvC,SAAS,EAAE,IAAIxD,cAAI,CAACsC,aAAa,CAACyD,KAAK,CAAC,EACjD;OACC,MAAM1E,MAAyB,GAAG,IAAI,CAACqC,SAAS,EAAE;OAClD,MAAMe,cAAwC,GAAGpD,MAAM,CAACoB,WAAW,EAAE;OACrE,MAAMuD,gBAAwB,GAAGvB,cAAc,CAACE,OAAO,CAAC,IAAI,CAAC;OAE7D,MAAMyB,UAAkB,GAAGJ,gBAAgB,GAAG,CAAC;OAC/C,MAAMC,WAAmB,GAAG,CAAC;OAC7BxB,cAAc,CAACyB,MAAM,CAACE,UAAU,EAAEH,WAAW,EAAE,GAAGF,KAAK,CAAC;OAExD1E,MAAM,CAACC,WAAW,CAACmD,cAAc,CAAC;;;GAIpC4B,cAAc,CAAC,GAAGxF,QAAkC,EACpD;KACC,IAAI,IAAI,CAAC2C,SAAS,EAAE,EACpB;OACC,IAAI,CAACsC,YAAY,CAChB,GAAGjF,QAAQ,CAACgE,MAAM,CAAEC,KAAwB,IAAK;SAChD,OAAO,CAAC,CAAC,YAAY,EAAE,MAAM,CAAC,CAACwB,QAAQ,CAACxB,KAAK,CAAChC,OAAO,EAAE,CAAC;QACxD,CAAC,CACF;MACD,MAED;OACC,IAAI,CAACwC,kBAAkB,CAACzE,QAAQ,CAAC;;;GAInC4C,cAAc,GACd;KACC,MAAM1C,eAAe,GAAG,IAAI,CAACwE,kBAAkB,EAAE;KACjD,IAAIvF,cAAI,CAACsC,aAAa,CAACvB,eAAe,CAAC,EACvC;OACC,IAAI,CAACsF,cAAc,CAAC,GAAGtF,eAAe,CAAC;OACvC,IAAI,CAACsE,kBAAkB,CAAC,EAAE,CAAC;;;GAI7BvB,WAAW,CAAC,GAAGjD,QAAkC,EACjD;KACC,IAAI,CAACA,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAAC0F,MAAM,CAAC,CAACC,GAA6B,EAAE5E,IAAuB,KAAK;OAChG,IAAIf,QAAQ,CAACyF,QAAQ,CAAC1E,IAAI,CAAC,EAC3B;SACCA,IAAI,CAACR,SAAS,CAAC,IAAI,CAAC;SAEpB,OAAOoF,GAAG;;OAGX,OAAO,CAAC,GAAGA,GAAG,EAAE5E,IAAI,CAAC;MACrB,EAAE,EAAE,CAAC;;GAGP6E,YAAY,CAACC,UAA6B,EAAE,GAAG7F,QAAuD,EACtG;KACC,IAAI,CAACA,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAAC0B,OAAO,CAAEX,IAAuB,IAAK;OAClE,IAAIA,IAAI,KAAK8E,UAAU,EACvB;SACC9E,IAAI,CAACR,SAAS,CAAC,IAAI,CAAC;SAEpB,MAAMqE,iBAA2C,GAAG/E,UAAU,CAAC2B,eAAe,CAACxB,QAAQ,CAAC;SAExF,OAAO4E,iBAAiB,CAACkB,GAAG,CAAE7B,KAAwB,IAAK;WAC1DA,KAAK,CAACjB,MAAM,EAAE;WACdiB,KAAK,CAAC1D,SAAS,CAAC,IAAI,CAAC;WAErB,OAAO0D,KAAK;UACZ,CAAC;;OAGH,OAAOlD,IAAI;MACX,CAAC;;GAGHgF,OAAO,CAAC,GAAG/F,QAAuD,EAClE;KACC,IAAI,IAAI,CAAC2C,SAAS,EAAE,EACpB;OACC,MAAMnC,MAAM,GAAG,IAAI,CAACqC,SAAS,EAAE;OAC/BrC,MAAM,CAACoF,YAAY,CAAC,IAAI,EAAE,GAAG5F,QAAQ,CAAC;;;GAIxCgG,KAAK,CAACjG,OAA0B,GAAG,EAAE,EACrC;KACC,MAAMC,QAAQ,GAAG,CAAC,MAAM;OACvB,IAAID,OAAO,CAACkG,IAAI,EAChB;SACC,OAAO,IAAI,CAACrE,WAAW,EAAE,CAACkE,GAAG,CAAE7B,KAAK,IAAK;WACxC,OAAOA,KAAK,CAAC+B,KAAK,CAACjG,OAAO,CAAC;UAC3B,CAAC;;OAGH,OAAO,EAAE;MACT,GAAG;KAEJ,OAAO,IAAI,CAACgC,SAAS,EAAE,CAACmE,UAAU,CAAC;OAClC9F,IAAI,EAAE,IAAI,CAAC6B,OAAO,EAAE;OACpBzB,MAAM,EAAE,IAAI,CAACqC,SAAS,EAAE;OACxB7C;MACA,CAAC;;GAGHmG,WAAW,GACX;KACC,OAAO,IAAI,CAACvE,WAAW,EAAE,CAACkE,GAAG,CAAE7B,KAAK,IAAK;OACxC,OAAOA,KAAK,CAACkC,WAAW,EAAE;MAC1B,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;;GAGZC,cAAc,GACd;KACC,OAAO,IAAI,CAACF,WAAW,EAAE;;GAG1BG,kBAAkB,GAClB;KACC,OAAO,IAAI,CAACH,WAAW,EAAE,CAAC3G,MAAM;;GAGjC+G,sBAAsB,GACtB;KACC,MAAMA,sBAAsB,GAAIxF,IAAuB,IAAK;OAC3D,MAAMyF,gBAAgB,GAAGzF,IAAI,CAACgD,mBAAmB,EAAE;OACnD,IAAI5E,cAAI,CAACC,OAAO,CAACoH,gBAAgB,CAAC,EAClC;SACCA,gBAAgB,CAAC3B,OAAO,CAAE4B,OAA0B,IAAK;WACxDA,OAAO,CAACzD,MAAM,EAAE;UAChB,CAAC;;OAGH,MAAMxC,MAAM,GAAGO,IAAI,CAAC8B,SAAS,EAAE;OAC/B,IAAIrC,MAAM,EACV;SACC+F,sBAAsB,CAAC/F,MAAM,CAAC;;MAE/B;KAED+F,sBAAsB,CAAC,IAAI,CAAC;;GAG7BG,kBAAkB,GAClB;KACC,MAAMA,kBAAkB,GAAI3F,IAAuB,IAAK;OACvD,MAAM4F,YAAY,GAAG5F,IAAI,CAACoD,eAAe,EAAE;OAC3C,IAAIhF,cAAI,CAACC,OAAO,CAACuH,YAAY,CAAC,EAC9B;SACCA,YAAY,CAAC9B,OAAO,CAAE4B,OAA0B,IAAK;WACpDA,OAAO,CAACzD,MAAM,EAAE;UAChB,CAAC;;OAGH,MAAMxC,MAAM,GAAGO,IAAI,CAAC8B,SAAS,EAAE;OAC/B,IAAIrC,MAAM,EACV;SACCkG,kBAAkB,CAAClG,MAAM,CAAC;;MAE3B;KAEDkG,kBAAkB,CAAC,IAAI,CAAC;;GAGzBE,eAAe,CAAC1H,KAAa,EAC7B;KACC,IAAI2E,YAAY,GAAG,CAAC;KACpB,IAAI0B,UAAU,GAAG,CAAC;KAClB,IAAIsB,QAAQ,GAAG,CAAC;KAEhB,MAAM9F,IAAI,GAAGlB,UAAU,CAACiH,UAAU,CAAC,IAAI,CAAC,CAACxD,IAAI,CAAEW,KAAwB,IAAK;OAC3E,IACCA,KAAK,CAAChC,OAAO,EAAE,KAAK,OAAO,IACxBgC,KAAK,CAAChC,OAAO,EAAE,KAAK,YAAY,IAChCgC,KAAK,CAAChC,OAAO,EAAE,KAAK,MAAM,EAE9B;SACCsD,UAAU,GAAG1B,YAAY;SACzBgD,QAAQ,GAAGtB,UAAU,GAAGtB,KAAK,CAAC8C,SAAS,EAAE;SACzClD,YAAY,GAAGgD,QAAQ;SAEvB,OAAO3H,KAAK,IAAIqG,UAAU,IAAIsB,QAAQ,IAAI3H,KAAK;;OAGhD,OAAO,KAAK;MACZ,CAAC;KAEF,IAAI6B,IAAI,EACR;OACC,OAAO;SAAEA,IAAI;SAAEwE,UAAU;SAAEsB;QAAU;;KAGtC,OAAO,IAAI;;GAGZG,KAAK,CAACjH,OAA4C,EAClD;KACC,MAAM;OAAEkH,MAAM;OAAEC,MAAM,GAAG;MAAO,GAAGnH,OAAO;KAC1C,MAAMoH,eAAe,GAAG,IAAI,CAACb,kBAAkB,EAAE;KAEjD,MAAMc,QAAQ,GAAG,CAAC,MAAM;OACvB,IAAID,eAAe,KAAKF,MAAM,EAC9B;SACC,OAAO,IAAI,CAACjB,KAAK,CAAC;WAAEC,IAAI,EAAE;UAAM,CAAC;;OAGlC,IAAIgB,MAAM,IAAI,CAAC,IAAIA,MAAM,GAAGE,eAAe,EAC3C;SACC,OAAO,IAAI;;OAGZ,MAAME,IAAI,GAAG,IAAI,CAACrB,KAAK,CAAC;SAAEC,IAAI,EAAE;QAAM,CAAC;OACvC,MAAM;SAAElF,IAAI;SAAEwE;QAAY,GAAG8B,IAAI,CAACT,eAAe,CAACK,MAAM,CAAC;OACzD,MAAM,CAACK,QAAQ,EAAEC,SAAS,CAAC,GAAGxG,IAAI,CAACiG,KAAK,CAAC;SAAEC,MAAM,EAAEA,MAAM,GAAG1B,UAAU;SAAE2B;QAAQ,CAAC;OACjF,IAAII,QAAQ,EACZ;SACCvG,IAAI,CAACgF,OAAO,CAACuB,QAAQ,CAAC;SACtBA,QAAQ,CAACZ,kBAAkB,EAAE;QAC7B,MACI,IAAIa,SAAS,EAClB;SACCA,SAAS,CAACb,kBAAkB,EAAE;SAC9Ba,SAAS,CAACvE,MAAM,EAAE;;OAGnB,OAAOqE,IAAI;MACX,GAAG;KAEJ,MAAMG,SAAS,GAAG,CAAC,MAAM;OACxB,IAAIL,eAAe,KAAKF,MAAM,EAC9B;SACC,OAAO,IAAI;;OAGZ,IAAIA,MAAM,KAAK,CAAC,EAChB;SACC,OAAO,IAAI,CAACjB,KAAK,CAAC;WAAEC,IAAI,EAAE;UAAM,CAAC;;OAGlC,MAAMoB,IAAI,GAAG,IAAI,CAACrB,KAAK,CAAC;SAAEC,IAAI,EAAE;QAAM,CAAC;OACvC,MAAM;SAAElF,IAAI;SAAEwE;QAAY,GAAG8B,IAAI,CAACT,eAAe,CAACK,MAAM,CAAC;OACzD,MAAM,CAACK,QAAQ,EAAEC,SAAS,CAAC,GAAGxG,IAAI,CAACiG,KAAK,CAAC;SAAEC,MAAM,EAAEA,MAAM,GAAG1B,UAAU;SAAE2B;QAAQ,CAAC;OACjF,IAAIK,SAAS,EACb;SACCxG,IAAI,CAACgF,OAAO,CAACwB,SAAS,CAAC;SACvBA,SAAS,CAAChB,sBAAsB,EAAE;QAClC,MACI,IAAIe,QAAQ,EACjB;SACCA,QAAQ,CAACf,sBAAsB,EAAE;SACjC,IAAIe,QAAQ,CAAC3E,SAAS,EAAE,EACxB;WACC,MAAMnC,MAAM,GAAG8G,QAAQ,CAACzE,SAAS,EAAE;WACnCyE,QAAQ,CAACtE,MAAM,EAAE;WACjB,IAAIxC,MAAM,CAAC4D,gBAAgB,EAAE,KAAK,CAAC,EACnC;aACC5D,MAAM,CAACwC,MAAM,EAAE;;;;OAKlB,OAAOqE,IAAI;MACX,GAAG;KAEJ,OAAO,CAACD,QAAQ,EAAEI,SAAS,CAAC;;GAG7B,OAAOV,UAAU,CAACW,GAAG,EACrB;KACC,MAAMC,IAAI,GAAG,EAAE;KAEf,MAAMC,QAAQ,GAAI5G,IAAuB,IAAK;OAC7C2G,IAAI,CAAC5C,IAAI,CAAC/D,IAAI,CAAC;OACf,IAAIA,IAAI,CAACsD,WAAW,EAAE,EACtB;SACCtD,IAAI,CAACa,WAAW,EAAE,CAACiD,OAAO,CAAEZ,KAAwB,IAAK;WACxD0D,QAAQ,CAAC1D,KAAK,CAAC;UACf,CAAC;;MAEH;KAED,IAAIwD,GAAG,CAACpD,WAAW,EAAE,EACrB;OACCoD,GAAG,CAAC7F,WAAW,EAAE,CAACiD,OAAO,CAAEZ,KAAwB,IAAK;SACvD0D,QAAQ,CAAC1D,KAAK,CAAC;QACf,CAAC;;KAGH,OAAOyD,IAAI;;GAGZE,MAAM,GACN;KACC,OAAO;OACNxH,IAAI,EAAE,IAAI,CAAC6B,OAAO,EAAE;OACpBjC,QAAQ,EAAE,IAAI,CAAC4B,WAAW,EAAE,CAACkE,GAAG,CAAE7B,KAAwB,IAAK;SAC9D,OAAOA,KAAK,CAAC2D,MAAM,EAAE;QACrB;MACD;;CAEH;;CC1pBA,MAAMC,UAAkB,GAAGjI,MAAM,CAAC,MAAM,CAAC;AAEzC,CAAO,MAAMkI,iBAAiB,SAASjI,UAAU,CACjD;GAKCC,WAAW,CAACC,OAAiC,GAAG,EAAE,EAClD;KACC,KAAK,CAACA,OAAO,CAAC;KAAC,KANhBgI,UAAU,GAAe,EAAE;KAAA,KAC3B9G,KAAK,GAAc,EAAE;KAAA,KACpB4G,UAAU,IAAa,KAAK;KAK5BpI,UAAU,CAACY,GAAG,CAAC,IAAI,CAAC,CAACyC,IAAI,GAAGjD,UAAU,CAACa,YAAY;KAEnD,MAAMsH,SAA0B,GAAG,IAAI,CAAChG,YAAY,EAAE;KAEtD,IAAI,CAAC6F,UAAU,CAAC,GAAGG,SAAS,CAACC,MAAM,EAAE;KAErC,IAAI,CAACC,QAAQ,CAACnI,OAAO,CAACkB,KAAK,CAAC;KAC5B,IAAI,CAACkH,aAAa,CAACpI,OAAO,CAACgI,UAAU,CAAC;;GAGvClG,SAAS,CAACvB,MAAoB,EAAEwB,SAA2C,EAC3E;KACC,IAAI,CAACF,WAAW,EAAE,CAACiD,OAAO,CAAE9D,IAAuB,IAAK;OACvDA,IAAI,CAACc,SAAS,CAACvB,MAAM,EAAEwB,SAAS,CAAC;MACjC,CAAC;KAEF,IAAIxB,MAAM,CAAC8H,YAAY,CAAC,IAAI,CAACnG,OAAO,EAAE,CAAC,EACvC;OACC,KAAK,CAACJ,SAAS,CAACvB,MAAM,CAAC;OAEvB,MAAM0H,SAA0B,GAAG,IAAI,CAAChG,YAAY,EAAE;OACtD,IAAI,CAAC6F,UAAU,CAAC,GAAGG,SAAS,CAACC,MAAM,EAAE;MACrC,MAED;OACC,KAAK,CAACpG,SAAS,CAACvB,MAAM,CAAC;OACvBwB,SAAS,CAAC,IAAI,EAAExB,MAAM,CAAC;;;GAIzB+H,cAAc,CAACrI,QAAkC,EACjD;KACC,MAAMsI,gBAAkC,GAAG;OAC1CC,QAAQ,EAAE,EAAE;OACZC,UAAU,EAAE;MACZ;KACD,MAAMlI,MAAoB,GAAG,IAAI,CAACyB,SAAS,EAAE;KAE7C/B,QAAQ,CAAC6E,OAAO,CAAEZ,KAAwB,IAAK;OAC9C,IAAI3D,MAAM,CAACmI,cAAc,CAAC,IAAI,EAAExE,KAAK,CAAC,EACtC;SACCqE,gBAAgB,CAACC,QAAQ,CAACzD,IAAI,CAACb,KAAK,CAAC;QACrC,MAED;SACCqE,gBAAgB,CAACE,UAAU,CAAC1D,IAAI,CAACb,KAAK,CAAC;;MAExC,CAAC;KAEF,OAAOqE,gBAAgB;;GAGxBI,eAAe,CAAC1I,QAAkC,EAClD;KACC,MAAMgI,SAA0B,GAAG,IAAI,CAAChG,YAAY,EAAE;KACtD,MAAM2G,cAAc,GAAGX,SAAS,CAACY,iBAAiB,EAAE;KACpD,IAAID,cAAc,EAClB;OACC,MAAMrI,MAAoB,GAAG,IAAI,CAACyB,SAAS,EAAE;OAE7C,OAAO/B,QAAQ,CAAC8F,GAAG,CAAE7B,KAAiB,IAAK;SAC1C,OAAO0E,cAAc,CAAC1E,KAAK,EAAE3D,MAAM,CAAC;QACpC,CAAC;;KAGH,OAAON,QAAQ;;GAGhBkI,QAAQ,CAACjH,KAA6B,EACtC;KACC,IAAI9B,cAAI,CAACqD,QAAQ,CAACvB,KAAK,CAAC,IAAI9B,cAAI,CAAC0J,QAAQ,CAAC5H,KAAK,CAAC,IAAI9B,cAAI,CAAC2J,SAAS,CAAC7H,KAAK,CAAC,EACzE;OACC,IAAI,CAACA,KAAK,GAAGA,KAAK;;;GAIpB8H,QAAQ,GACR;KACC,OAAO,IAAI,CAAC9H,KAAK;;GAGlBgH,MAAM,GACN;KACC,OAAO,IAAI,CAACJ,UAAU,CAAC;;GAGxBmB,UAAU,GACV;KACC,OAAO,IAAI,CAAChH,YAAY,EAAE,CAACgH,UAAU,EAAE;;GAGxCC,QAAQ,CAACC,SAAiB,EAC1B;KACC,OAAO,IAAI,CAAClH,YAAY,EAAE,CAACiH,QAAQ,CAACC,SAAS,CAAC;;GAG/Cf,aAAa,CAACJ,UAAsB,EACpC;KACC,IAAI5I,cAAI,CAACgK,aAAa,CAACpB,UAAU,CAAC,EAClC;OACC,MAAMqB,OAAO,GAAGjI,MAAM,CAACiI,OAAO,CAACrB,UAAU,CAAC,CAACjC,GAAG,CAAC,CAAC,CAACuD,GAAG,EAAEpI,KAAK,CAAC,KAAK;SAChE,OAAO,CAACoI,GAAG,CAAC9G,WAAW,EAAE,EAAEtB,KAAK,CAAC;QACjC,CAAC;OAEF,IAAI,CAAC8G,UAAU,GAAG5G,MAAM,CAACmI,WAAW,CAACF,OAAO,CAAC;;;GAI/CG,YAAY,CAACnJ,IAAY,EAAEa,KAAU,EACrC;KACC,IAAI9B,cAAI,CAACqK,cAAc,CAACpJ,IAAI,CAAC,EAC7B;OACC,MAAMqJ,YAAoB,GAAGrJ,IAAI,CAACmC,WAAW,EAAE;OAC/C,IAAIpD,cAAI,CAACuK,KAAK,CAACzI,KAAK,CAAC,EACrB;SACC,OAAO,IAAI,CAAC8G,UAAU,CAAC0B,YAAY,CAAC;QACpC,MAED;SACC,IAAI,CAAC1B,UAAU,CAAC0B,YAAY,CAAC,GAAGxI,KAAK;;;;GAKxC0I,YAAY,CAACvJ,IAAY,EACzB;KACC,IAAIjB,cAAI,CAACqD,QAAQ,CAACpC,IAAI,CAAC,EACvB;OACC,OAAO,IAAI,CAAC2H,UAAU,CAAC3H,IAAI,CAACmC,WAAW,EAAE,CAAC;;KAG3C,OAAO,IAAI;;GAGZqH,aAAa,GACb;KACC,OAAO;OAAE,GAAG,IAAI,CAAC7B;MAAY;;GAG9B7E,WAAW,CAAC,GAAGlD,QAAuD,EACtE;KACC,MAAM4E,iBAA2C,GAAG/E,UAAU,CAAC2B,eAAe,CAACxB,QAAQ,CAAC;KACxF,MAAMsI,gBAAkC,GAAG,IAAI,CAACD,cAAc,CAACzD,iBAAiB,CAAC;KACjF,MAAMiF,iBAA2C,GAAG,IAAI,CAACnB,eAAe,CAACJ,gBAAgB,CAACC,QAAQ,CAAC;KAEnGsB,iBAAiB,CAAChF,OAAO,CAAE9D,IAAuB,IAAK;OACtDA,IAAI,CAACiC,MAAM,EAAE;OACbjC,IAAI,CAACR,SAAS,CAAC,IAAI,CAAC;OACpB,IAAI,CAACP,QAAQ,CAAC8E,IAAI,CAAC/D,IAAI,CAAC;MACxB,CAAC;KAEF,IAAI5B,cAAI,CAACsC,aAAa,CAAC6G,gBAAgB,CAACE,UAAU,CAAC,EACnD;OACC,IAAI,IAAI,CAACzG,SAAS,EAAE,CAAC+H,gCAAgC,EAAE,EACvD;SACC,IAAI,CAACtE,cAAc,CAAC,GAAG8C,gBAAgB,CAACE,UAAU,CAAC;QACnD,MAED;SACCF,gBAAgB,CAACE,UAAU,CAAC3D,OAAO,CAAE9D,IAAuB,IAAK;WAChEA,IAAI,CAACiC,MAAM,EAAE;UACb,CAAC;;;;GAKL+B,YAAY,CAAC,GAAG/E,QAAuD,EACvE;KACC,MAAM4E,iBAA2C,GAAG/E,UAAU,CAAC2B,eAAe,CAACxB,QAAQ,CAAC;KACxF,MAAMsI,gBAAkC,GAAG,IAAI,CAACD,cAAc,CAACzD,iBAAiB,CAAC;KACjF,MAAMiF,iBAA2C,GAAG,IAAI,CAACnB,eAAe,CAACJ,gBAAgB,CAACC,QAAQ,CAAC;KAEnGsB,iBAAiB,CAAChF,OAAO,CAAE9D,IAAuB,IAAK;OACtDA,IAAI,CAACiC,MAAM,EAAE;OACbjC,IAAI,CAACR,SAAS,CAAC,IAAI,CAAC;OACpB,IAAI,CAACP,QAAQ,CAACgF,OAAO,CAACjE,IAAI,CAAC;MAC3B,CAAC;KAEF,IAAI5B,cAAI,CAACsC,aAAa,CAAC6G,gBAAgB,CAACE,UAAU,CAAC,EACnD;OACC,IAAI,IAAI,CAACzG,SAAS,EAAE,CAAC+H,gCAAgC,EAAE,EACvD;SACC,IAAI,CAACtE,cAAc,CAAC,GAAG8C,gBAAgB,CAACE,UAAU,CAAC;QACnD,MAED;SACCF,gBAAgB,CAACE,UAAU,CAAC3D,OAAO,CAAE9D,IAAuB,IAAK;WAChEA,IAAI,CAACiC,MAAM,EAAE;UACb,CAAC;;;;GAKL4C,YAAY,CAACC,UAA6B,EAAE,GAAG7F,QAAuD,EACtG;KACC,IAAI,CAACA,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAAC0B,OAAO,CAAEX,IAAuB,IAAK;OAClE,IAAIA,IAAI,KAAK8E,UAAU,EACvB;SACC9E,IAAI,CAACR,SAAS,CAAC,IAAI,CAAC;SAEpB,MAAMqE,iBAA2C,GAAG/E,UAAU,CAAC2B,eAAe,CAACxB,QAAQ,CAAC;SACxF,MAAMsI,gBAAkC,GAAG,IAAI,CAACD,cAAc,CAACzD,iBAAiB,CAAC;SACjF,MAAMiF,iBAA2C,GAAG,IAAI,CAACnB,eAAe,CAACJ,gBAAgB,CAACC,QAAQ,CAAC;SAEnG,OAAOsB,iBAAiB,CAAC/D,GAAG,CAAE7B,KAAwB,IAAK;WAC1DA,KAAK,CAACjB,MAAM,EAAE;WACdiB,KAAK,CAAC1D,SAAS,CAAC,IAAI,CAAC;WAErB,OAAO0D,KAAK;UACZ,CAAC;;OAGH,OAAOlD,IAAI;MACX,CAAC;;GAGHgJ,aAAa,GACb;KACC,MAAM9I,KAA6B,GAAG,IAAI,CAAC8H,QAAQ,EAAE;KACrD,MAAMiB,YAAoB,GAAG,IAAI,CAAC9H,UAAU,EAAE,CAAC+H,eAAe,CAAChJ,KAAK,CAAC;KAErE,OAAOA,KAAK,GAAI,IAAG+I,YAAa,EAAC,GAAG,EAAE;;GAGvCE,kBAAkB,GAClB;KACC,OAAO/I,MAAM,CACXiI,OAAO,CAAC,IAAI,CAACQ,aAAa,EAAE,CAAC,CAC7B9D,GAAG,CAAC,CAAC,CAACuD,GAAW,EAAEc,SAAiB,CAAC,KAAK;OAC1C,MAAMC,WAAmB,GAAG,IAAI,CAACjI,WAAW,CAACkH,GAAG,CAAC;OACjD,MAAMW,YAAoB,GAAG,IAAI,CAAC9H,UAAU,EAAE,CAAC+H,eAAe,CAACE,SAAS,CAAC;OAEzE,OAAOA,SAAS,GAAI,GAAEC,WAAY,IAAGJ,YAAa,EAAC,GAAGI,WAAW;MACjE,CAAC,CACDhE,IAAI,CAAC,GAAG,CAAC;;GAGZiE,UAAU,GACV;KACC,OAAO,IAAI,CAACzI,WAAW,EAAE,CACvBkE,GAAG,CAAE7B,KAAwB,IAAK;OAClC,OAAOA,KAAK,CAACqG,QAAQ,EAAE;MACvB,CAAC,CACDlE,IAAI,CAAC,EAAE,CAAC;;GAGXmE,aAAa,GACb;KACC,MAAMC,aAAqB,GAAG,IAAI,CAAC/H,gBAAgB,EAAE;KACrD,MAAMgI,QAAgC,GAAG,IAAI,CAACV,aAAa,EAAE;KAC7D,MAAMhC,UAAsB,GAAG,IAAI,CAACmC,kBAAkB,EAAE;KACxD,MAAMQ,mBAA2B,GAAGvL,cAAI,CAACqK,cAAc,CAACzB,UAAU,CAAC,GAAI,IAAGA,UAAW,EAAC,GAAG,EAAE;KAE3F,OAAQ,IAAGyC,aAAc,GAAEC,QAAS,GAAEC,mBAAoB,GAAE;;GAG7DC,aAAa,GACb;KACC,OAAQ,KAAI,IAAI,CAAClI,gBAAgB,EAAG,GAAE;;GAGvCuD,KAAK,CAACjG,OAA0B,GAAG,EAAE,EACrC;KACC,MAAMC,QAAQ,GAAG,CAAC,MAAM;OACvB,IAAID,OAAO,CAACkG,IAAI,EAChB;SACC,OAAO,IAAI,CAACrE,WAAW,EAAE,CAACkE,GAAG,CAAE7B,KAAK,IAAK;WACxC,OAAOA,KAAK,CAAC+B,KAAK,CAACjG,OAAO,CAAC;UAC3B,CAAC;;OAGH,OAAO,EAAE;MACT,GAAG;KAEJ,OAAO,IAAI,CAACgC,SAAS,EAAE,CAAC6I,aAAa,CAAC;OACrCxK,IAAI,EAAE,IAAI,CAAC6B,OAAO,EAAE;OACpB4I,IAAI,EAAE,IAAI,CAAC5C,MAAM,EAAE;OACnBhH,KAAK,EAAE,IAAI,CAAC8H,QAAQ,EAAE;OACtBhB,UAAU,EAAE;SAAE,GAAG,IAAI,CAAC6B,aAAa;QAAI;OACvC5J;MACA,CAAC;;GAGH8K,iBAAiB,CAAC5L,KAAa,EAC/B;KACC,IAAI,CAACC,cAAI,CAAC0J,QAAQ,CAAC3J,KAAK,CAAC,EACzB;OACC,MAAM,IAAIG,SAAS,CAAC,uBAAuB,CAAC;;KAG7C,MAAM0L,aAAa,GAAG,IAAI,CAAC3G,gBAAgB,EAAE;KAC7C,IAAIlF,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAG6L,aAAa,EACtC;OACC,MAAM,IAAI1L,SAAS,CAAE,UAASH,KAAM,qBAAoB,CAAE,IAAG6L,aAAc,EAAC,CAAC;;KAG9E,MAAMzD,QAAQ,GAAG,CAAC,MAAM;OACvB,IAAIpI,KAAK,KAAK6L,aAAa,EAC3B;SACC,OAAO,IAAI;;OAGZ,IAAI7L,KAAK,KAAK,CAAC,EACf;SACC,OAAO,IAAI;;OAGZ,MAAM8L,YAAY,GAAG,IAAI,CAACpJ,WAAW,EAAE,CAACoC,MAAM,CAAC,CAACC,KAAK,EAAEgH,UAAU,KAAK;SACrE,OAAOA,UAAU,GAAG/L,KAAK;QACzB,CAAC;OAEF,MAAM6B,IAAI,GAAG,IAAI,CAACiF,KAAK,EAAE;OACzBjF,IAAI,CAACN,WAAW,CAACuK,YAAY,CAAC;OAE9B,OAAOjK,IAAI;MACX,GAAG;KAEJ,MAAMwG,SAAS,GAAG,CAAC,MAAM;OACxB,IAAIrI,KAAK,KAAK,CAAC,EACf;SACC,OAAO,IAAI;;OAGZ,IAAIA,KAAK,KAAK6L,aAAa,EAC3B;SACC,OAAO,IAAI;;OAGZ,MAAMG,aAAa,GAAG,IAAI,CAACtJ,WAAW,EAAE;OACxC,MAAMb,IAAI,GAAG,IAAI,CAACiF,KAAK,EAAE;OACzBjF,IAAI,CAACN,WAAW,CAACyK,aAAa,CAAC;OAE/B,OAAOnK,IAAI;MACX,GAAG;KAEJ,IAAIuG,QAAQ,IAAIC,SAAS,EACzB;OACC,IAAI,CAACxB,OAAO,CAACuB,QAAQ,EAAEC,SAAS,CAAC;;KAGlC,OAAO,CAACD,QAAQ,EAAEC,SAAS,CAAC;;GAG7BvF,YAAY,GACZ;KACC,OAAO,KAAK,CAACA,YAAY,EAAE;;GAG5BsI,QAAQ,GACR;KACC,MAAMtC,SAA0B,GAAG,IAAI,CAAChG,YAAY,EAAE;KACtD,MAAMmJ,WAAkC,GAAGnD,SAAS,CAACoD,cAAc,EAAE;KACrE,IAAIjM,cAAI,CAACkM,UAAU,CAACF,WAAW,CAAC,EAChC;OACC,MAAM7K,MAAoB,GAAG,IAAI,CAACyB,SAAS,EAAE;OAE7C,OAAOoJ,WAAW,CAAC,IAAI,EAAE7K,MAAM,CAAC;;KAGjC,MAAMgL,UAAkB,GAAG,IAAI,CAACf,aAAa,EAAE;KAC/C,MAAMgB,OAAe,GAAG,IAAI,CAAClB,UAAU,EAAE;KAEzC,IAAI,IAAI,CAACpC,MAAM,EAAE,EACjB;OACC,OAAQ,GAAEqD,UAAW,GAAEC,OAAQ,EAAC;;KAGjC,MAAMC,UAAkB,GAAG,IAAI,CAACb,aAAa,EAAE;KAE/C,OAAQ,GAAEW,UAAW,GAAEC,OAAQ,GAAEC,UAAW,EAAC;;GAG9C5D,MAAM,GACN;KACC,OAAO;OACN,GAAG,KAAK,CAACA,MAAM,EAAE;OACjB3G,KAAK,EAAE,IAAI,CAAC8H,QAAQ,EAAE;OACtBhB,UAAU,EAAE,IAAI,CAAC6B,aAAa,EAAE;OAChCiB,IAAI,EAAE,IAAI,CAAC5C,MAAM;MACjB;;CAEH;;CCxZO,MAAMwD,cAAc,SAAS3D,iBAAiB,CACrD;GACChI,WAAW,CAACC,OAAwB,EACpC;KACC,KAAK,CAAC;OAAE,GAAGA,OAAO;OAAEK,IAAI,EAAE;MAAS,CAAC;KACpCX,UAAU,CAACY,GAAG,CAAC,IAAI,CAAC,CAACyC,IAAI,GAAGjD,UAAU,CAACe,SAAS;KAChD6K,cAAc,CAAClK,yBAAyB,CAAC,IAAI,EAAE,OAAO,CAAC;KACvDkK,cAAc,CAAClK,yBAAyB,CAAC,IAAI,EAAE,YAAY,CAAC;KAC5DkK,cAAc,CAAC3K,cAAc,CAAC,IAAI,EAAEnB,UAAU,EAAE,OAAO,CAAC;;GAGzDkC,SAAS,CAACvB,MAAoB,EAAEwB,SAA2C,EAC3E;KACCjC,UAAU,CAACiH,UAAU,CAAC,IAAI,CAAC,CAACjC,OAAO,CAAE9D,IAAuB,IAAK;OAChEA,IAAI,CAACc,SAAS,CAACvB,MAAM,EAAEwB,SAAS,CAAC;MACjC,CAAC;KAEF,KAAK,CAACD,SAAS,CAACvB,MAAM,CAAC;KAEvBT,UAAU,CAACiH,UAAU,CAAC,IAAI,CAAC,CAACjC,OAAO,CAAE9D,IAAuB,IAAK;OAChEA,IAAI,CAACwD,cAAc,EAAE;MACrB,CAAC;;GAGH1B,SAAS,GACT;KACC,OAAO,IAAI;;GAGZmD,KAAK,CAACjG,OAA0B,GAAG,EAAE,EACrC;KACC,MAAMC,QAAQ,GAAG,CAAC,MAAM;OACvB,IAAID,OAAO,CAACkG,IAAI,EAChB;SACC,OAAO,IAAI,CAACrE,WAAW,EAAE,CAACkE,GAAG,CAAE7B,KAAK,IAAK;WACxC,OAAOA,KAAK,CAAC+B,KAAK,CAACjG,OAAO,CAAC;UAC3B,CAAC;;OAGH,OAAO,EAAE;MACT,GAAG;KAEJ,OAAO,IAAI,CAACgC,SAAS,EAAE,CAAC2J,UAAU,CAAC;OAClC1L;MACA,CAAC;;GAGHsK,QAAQ,GACR;KACC,OAAO,IAAI,CAAC1I,WAAW,EAAE,CACvBkE,GAAG,CAAE7B,KAAwB,IAAK;OAClC,OAAOA,KAAK,CAACqG,QAAQ,EAAE;MACvB,CAAC,CACDlE,IAAI,CAAC,EAAE,CAAC;;GAGXwB,MAAM,GACN;KACC,OAAO,IAAI,CAAChG,WAAW,EAAE,CAACkE,GAAG,CAAE/E,IAAgB,IAAK;OACnD,OAAOA,IAAI,CAAC6G,MAAM,EAAE;MACpB,CAAC;;CAEJ;;CC/DO,MAAM+D,kBAAkB,SAAS7D,iBAAiB,CACzD;GACChI,WAAW,CAACC,OAA4B,EACxC;KACC,KAAK,CAAC;OAAE,GAAGA,OAAO;OAAEK,IAAI,EAAE;MAAa,CAAC;KACxCX,UAAU,CAACY,GAAG,CAAC,IAAI,CAAC,CAACyC,IAAI,GAAGjD,UAAU,CAACgB,aAAa;KACpD8K,kBAAkB,CAACpK,yBAAyB,CAAC,IAAI,EAAE,OAAO,CAAC;KAC3DoK,kBAAkB,CAACpK,yBAAyB,CAAC,IAAI,EAAE,YAAY,CAAC;KAChEoK,kBAAkB,CAAC7K,cAAc,CAAC,IAAI,EAAEnB,UAAU,EAAE,WAAW,CAAC;;GAGjEqG,KAAK,CAACjG,OAA0B,GAAG,EAAE,EACrC;KACC,MAAMC,QAAQ,GAAG,CAAC,MAAM;OACvB,IAAID,OAAO,CAACkG,IAAI,EAChB;SACC,OAAO,IAAI,CAACrE,WAAW,EAAE,CAACkE,GAAG,CAAE7B,KAAK,IAAK;WACxC,OAAOA,KAAK,CAAC+B,KAAK,CAACjG,OAAO,CAAC;UAC3B,CAAC;;OAGH,OAAO,EAAE;MACT,GAAG;KAEJ,OAAO,IAAI,CAACgC,SAAS,EAAE,CAAC6J,cAAc,CAAC;OACtC5L;MACA,CAAC;;CAEJ;;CChCO,MAAM6L,aAAa,GAAGjM,MAAM,CAAC,SAAS,CAAC;AAa9C,CAAO,MAAMkM,cAAc,SAASjM,UAAU,CAC9C;GAICC,WAAW,CAACC,OAA8B,GAAG,EAAE,EAC/C;KACC,MAAMgM,WAAkC,GAAG5M,cAAI,CAACqD,QAAQ,CAACzC,OAAO,CAAC,GAAG;OAAEwL,OAAO,EAAExL;MAAS,GAAGA,OAAO;KAClG,KAAK,CAACgM,WAAW,CAAC;KAAC,KANnBpM,UAAU,IAAY,OAAO;KAAA,KAC7BkM,aAAa,IAAY,EAAE;KAM3BpM,UAAU,CAACY,GAAG,CAAC,IAAI,CAAC,CAACyC,IAAI,GAAGjD,UAAU,CAACc,SAAS;KAChD,IAAI,CAACqL,UAAU,CAACD,WAAW,CAACR,OAAO,CAAC;KACpC1L,UAAU,CAAC0B,yBAAyB,CAAC,IAAI,EAAE,UAAU,CAAC;;GAGvD,OAAO0K,iBAAiB,CAAChL,KAAU,EACnC;KACC,OAAO9B,cAAI,CAACqD,QAAQ,CAACvB,KAAK,CAAC,IAAI9B,cAAI,CAAC0J,QAAQ,CAAC5H,KAAK,CAAC;;GAGpDd,OAAO,CAACC,IAAY,EACpB;GAEA4L,UAAU,CAACT,OAA8B,EACzC;KACC,IAAIO,cAAc,CAACG,iBAAiB,CAACV,OAAO,CAAC,EAC7C;OACC,IAAI,CAACM,aAAa,CAAC,GAAGN,OAAO;;;GAI/BlB,UAAU,GACV;KACC,OAAO,IAAI,CAACwB,aAAa,CAAC;;GAG3BtH,cAAc,GACd;GAEAwC,SAAS,GACT;KACC,OAAOmF,MAAM,CAAC,IAAI,CAACL,aAAa,CAAC,CAAC,CAACrM,MAAM;;GAG1C8E,OAAO,GACP;KACC,OAAO,IAAI,CAACyC,SAAS,EAAE,KAAK,CAAC;;GAG9Bf,KAAK,CAACjG,OAAO,EACb;KACC,OAAO,IAAI,CAACgC,SAAS,EAAE,CAACoK,UAAU,CAAC;OAClCZ,OAAO,EAAE,IAAI,CAAClB,UAAU;MACxB,CAAC;;GAGHrD,KAAK,CAACjH,OAA4C,EAClD;KACC,MAAM;OAAEkH,MAAM,EAAEmF,YAAY;OAAElF,MAAM,GAAG;MAAO,GAAGnH,OAAO;KAExD,IAAI,CAACZ,cAAI,CAAC0J,QAAQ,CAACuD,YAAY,CAAC,EAChC;OACC,MAAM,IAAI/M,SAAS,CAAC,wBAAwB,CAAC;;KAG9C,MAAMgN,aAAa,GAAG,IAAI,CAACtF,SAAS,EAAE;KACtC,IAAIqF,YAAY,GAAG,CAAC,IAAIA,YAAY,GAAGC,aAAa,EACpD;OACC,MAAM,IAAIhN,SAAS,CAAE,WAAU+M,YAAa,qBAAoB,CAAE,IAAGC,aAAc,EAAC,CAAC;;KAGtF,MAAMd,OAAO,GAAG,IAAI,CAAClB,UAAU,EAAE;KAEjC,MAAMpD,MAAM,GAAG,CAAC,MAAM;OACrB,IAAIC,MAAM,IAAIkF,YAAY,KAAKC,aAAa,EAC5C;SACC,MAAMC,SAAS,GAAGf,OAAO,CAACgB,WAAW,CAAC,GAAG,EAAEH,YAAY,CAAC;SACxD,IAAIE,SAAS,KAAK,CAAC,CAAC,EACpB;WACC,IAAIF,YAAY,GAAGE,SAAS,EAC5B;aACC,OAAOA,SAAS,GAAG,CAAC;;WAGrB,OAAOA,SAAS;;SAGjB,OAAO,CAAC;;OAGT,OAAOF,YAAY;MACnB,GAAG;KAEJ,MAAM9E,QAAQ,GAAG,CAAC,MAAM;OACvB,IAAIL,MAAM,KAAKoF,aAAa,EAC5B;SACC,OAAO,IAAI;;OAGZ,IAAIpF,MAAM,KAAK,CAAC,EAChB;SACC,OAAO,IAAI;;OAGZ,MAAMlG,IAAI,GAAG,IAAI,CAACiF,KAAK,EAAE;OACzBjF,IAAI,CAACiL,UAAU,CAACT,OAAO,CAACiB,KAAK,CAAC,CAAC,EAAEvF,MAAM,CAAC,CAAC;OAEzC,OAAOlG,IAAI;MACX,GAAG;KAEJ,MAAMwG,SAAS,GAAG,CAAC,MAAM;OACxB,IAAIN,MAAM,KAAK,CAAC,EAChB;SACC,OAAO,IAAI;;OAGZ,IAAIA,MAAM,KAAKoF,aAAa,EAC5B;SACC,OAAO,IAAI;;OAGZ,MAAMtL,IAAI,GAAG,IAAI,CAACiF,KAAK,EAAE;OACzBjF,IAAI,CAACiL,UAAU,CAACT,OAAO,CAACiB,KAAK,CAACvF,MAAM,EAAEoF,aAAa,CAAC,CAAC;OAErD,OAAOtL,IAAI;MACX,GAAG;KAEJ,OAAO,CAACuG,QAAQ,EAAEC,SAAS,CAAC;;GAG7B+C,QAAQ,GACR;KACC,OAAO,IAAI,CAACpI,UAAU,EAAE,CAACuK,UAAU,CAAC,IAAI,CAACpC,UAAU,EAAE,CAAC;;GAGvDlE,WAAW,GACX;KACC,OAAO,IAAI,CAACmE,QAAQ,EAAE;;GAGvB1C,MAAM,GACN;KACC,OAAO;OACNxH,IAAI,EAAE,IAAI,CAAC6B,OAAO,EAAE;OACpBsJ,OAAO,EAAE,IAAI,CAACjB,QAAQ;MACtB;;CAEH;;CC/JO,MAAMoC,iBAAiB,SAASZ,cAAc,CACrD;GAIChM,WAAW,CAACC,OAA8B,GAAG,EAAE,EAC/C;KACC,KAAK,CAACA,OAAO,CAAC;KAAC,KALfJ,UAAU,IAAY,YAAY;KAAA,KAClCkM,aAAa,IAAY,IAAI;;GAO9BG,UAAU,CAACjM,OAA8B,EACzC;GAEAiG,KAAK,CAACjG,OAAO,EACb;KACC,OAAO,IAAI,CAACgC,SAAS,EAAE,CAAC4K,aAAa,EAAE;;CAEzC;;CCjBO,MAAMC,aAAa,SAASd,cAAc,CACjD;GAIChM,WAAW,CAACC,OAA8B,GAAG,EAAE,EAC/C;KACC,KAAK,CAACA,OAAO,CAAC;KAAC,KALfJ,UAAU,IAAY,MAAM;KAAA,KAC5BkM,aAAa,IAAY,IAAI;;GAO9BG,UAAU,CAACjM,OAA8B,EACzC;GAEAiG,KAAK,CAACjG,OAAO,EACb;KACC,OAAO,IAAI,CAACgC,SAAS,EAAE,CAAC8K,SAAS,EAAE;;CAErC;;CCFO,MAAMC,gBAAgB,CAC7B;GAOChN,WAAW,CAACC,OAAgC,EAC5C;KAAA,KAPAK,IAAI,GAA0B,EAAE;KAAA,KAChC2M,KAAK,GAA2B,EAAE;KAAA,KAClC5B,WAAW,GAAiC,IAAI;KAAA,KAChD6B,UAAU,GAAgC,IAAI;KAAA,KAC9CC,SAAS,GAA0B,EAAE;KAIpC,IAAI,CAAC9N,cAAI,CAACgK,aAAa,CAACpJ,OAAO,CAAC,EAChC;OACC,MAAM,IAAIV,SAAS,CAAC,yBAAyB,CAAC;;KAG/C,IACC,CAACF,cAAI,CAACsC,aAAa,CAAC,IAAI,CAACrB,IAAI,CAAC,IAC3B,CAACjB,cAAI,CAACsC,aAAa,CAAC1B,OAAO,CAACK,IAAI,CAAC,IACjC,CAACjB,cAAI,CAACqK,cAAc,CAACzJ,OAAO,CAACK,IAAI,CAAC,EAEtC;OACC,MAAM,IAAIf,SAAS,CAAC,+BAA+B,CAAC;;KAGrD,IAAI,CAAC6N,QAAQ,CAACnN,OAAO,CAACgN,KAAK,CAAC;KAC5B,IAAI,CAAC5M,OAAO,CAACJ,OAAO,CAACK,IAAI,CAAC;KAC1B,IAAI,CAAC+M,YAAY,CAACpN,OAAO,CAACkN,SAAS,CAAC;KACpC,IAAI,CAACG,cAAc,CAACrN,OAAO,CAACsN,SAAS,CAAC;KACtC,IAAI,CAACC,aAAa,CAACvN,OAAO,CAACwN,SAAS,CAAC;;GAGtCpN,OAAO,CAACC,IAAqC,EAC7C;KACC,IAAIjB,cAAI,CAACqK,cAAc,CAACpJ,IAAI,CAAC,EAC7B;OACC,IAAI,CAACA,IAAI,GAAG,CAACA,IAAI,CAAC;;KAGnB,IAAIjB,cAAI,CAACsC,aAAa,CAACrB,IAAI,CAAC,EAC5B;OACC,IAAI,CAACA,IAAI,GAAGA,IAAI;;;GAIlB6B,OAAO,GACP;KACC,OAAO,CAAC,GAAG,IAAI,CAAC7B,IAAI,CAAC;;GAGtBoN,UAAU,CAAC,GAAGC,KAA4B,EAC1C;KACC,IAAI,CAACtN,OAAO,CACX,IAAI,CAAC8B,OAAO,EAAE,CAAC+B,MAAM,CAAE5D,IAAoB,IAAK;OAC/C,OAAO,CAACqN,KAAK,CAAChI,QAAQ,CAACrF,IAAI,CAAC;MAC5B,CAAC,CACF;;GAGF8M,QAAQ,CAAC9M,IAAsC,EAC/C;KACC,IAAIjB,cAAI,CAACqK,cAAc,CAACpJ,IAAI,CAAC,EAC7B;OACC,IAAI,CAAC2M,KAAK,GAAG,CAAC3M,IAAI,CAAC;;KAGpB,IAAIjB,cAAI,CAACsC,aAAa,CAACrB,IAAI,CAAC,EAC5B;OACC,IAAI,CAAC2M,KAAK,GAAG3M,IAAI;;;GAInBsN,WAAW,CAAC,GAAGC,MAA8B,EAC7C;KACC,IAAI,CAACT,QAAQ,CACZ,IAAI,CAACU,QAAQ,EAAE,CAAC5J,MAAM,CAAE+I,KAAsB,IAAK;OAClD,OAAO,CAACY,MAAM,CAAClI,QAAQ,CAACsH,KAAK,CAAC;MAC9B,CAAC,CACF;;GAGFa,QAAQ,GACR;KACC,OAAO,CAAC,GAAG,IAAI,CAACb,KAAK,CAAC;;GAGvB9D,QAAQ,CAACC,SAAiB,EAC1B;KACC,OAAO,IAAI,CAAC0E,QAAQ,EAAE,CAACnI,QAAQ,CAACyD,SAAS,CAAC;;GAG3CkE,cAAc,CAACjC,WAAyC,EACxD;KACC,IAAIhM,cAAI,CAACkM,UAAU,CAACF,WAAW,CAAC,IAAIhM,cAAI,CAAC0O,MAAM,CAAC1C,WAAW,CAAC,EAC5D;OACC,IAAI,CAACA,WAAW,GAAGA,WAAW;;;GAIhCC,cAAc,GACd;KACC,OAAO,IAAI,CAACD,WAAW;;GAGxBmC,aAAa,CAACN,UAAuC,EACrD;KACC,IAAI7N,cAAI,CAACkM,UAAU,CAAC2B,UAAU,CAAC,IAAI7N,cAAI,CAAC0O,MAAM,CAACb,UAAU,CAAC,EAC1D;OACC,IAAI,CAACA,UAAU,GAAGA,UAAU;;;GAI9Bc,aAAa,GACb;KACC,OAAO,IAAI,CAACd,UAAU;;GAGvBG,YAAY,CAACY,cAAqC,EAClD;KACC,IAAI5O,cAAI,CAACC,OAAO,CAAC2O,cAAc,CAAC,EAChC;OACC,IAAI,CAACd,SAAS,GAAG,CAAC,GAAGc,cAAc,CAAC;;;GAItCC,YAAY,GACZ;KACC,OAAO,CAAC,GAAG,IAAI,CAACf,SAAS,CAAC;;GAG3BgB,WAAW,CAACC,OAAe,EAC3B;KACC,MAAMjB,SAAgC,GAAG,IAAI,CAACe,YAAY,EAAE;KAE5D,OACC,CAAC7O,cAAI,CAACsC,aAAa,CAACwL,SAAS,CAAC,IAE7B9N,cAAI,CAACsC,aAAa,CAACwL,SAAS,CAAC,IAC1BA,SAAS,CAACxH,QAAQ,CAACyI,OAAO,CAC7B;;CAGJ;;CC9IA,MAAMC,gBAAgB,GAAGvO,MAAM,CAAC,aAAa,CAAC;CAC9C,MAAMiI,YAAU,GAAGjI,MAAM,CAAC,OAAO,CAAC;AAElC,CAAO,MAAMwO,eAAe,SAAStB,gBAAgB,CACrD;GAMChN,WAAW,CAACC,OAA+B,EAC3C;KACC,KAAK,CAACA,OAAO,CAAC;KAAC,KAPf8H,YAAU,IAAa,KAAK;KAAA,KAC5BsG,gBAAgB,IAAa,IAAI;KAAA,KAClCxF,cAAc,GAA+B,IAAI;KAAA,KACjD0F,eAAe,GAA0B,EAAE;KAK1C,IAAI,CAACC,OAAO,CAACvO,OAAO,CAAC8K,IAAI,CAAC;KAC1B,IAAI,CAAC0D,aAAa,CAACxO,OAAO,CAACiJ,UAAU,CAAC;KACtC,IAAI,CAACwF,iBAAiB,CAACzO,OAAO,CAAC0O,YAAY,CAAC;KAC5C,IAAI,CAACC,kBAAkB,CAAC3O,OAAO,CAACsO,eAAe,CAAC;;GAGjD,OAAOM,uBAAuB,CAAC5N,IAAuB,EACtD;KACC,MAAM6N,8BAAuC,GAAG,CAAC,MAAM;OACtD,MAAMC,eAAmC,GAAG9N,IAAI,CAAC4C,kBAAkB,EAAE;OAErE,OAAOkL,eAAe,IAAIA,eAAe,CAAC5M,OAAO,EAAE,KAAK,YAAY;MACpE,GAAG;KACJ,MAAM6M,6BAAsC,GAAG,CAAC,MAAM;OACrD,MAAMC,UAA8B,GAAGhO,IAAI,CAACyC,aAAa,EAAE;OAE3D,OAAOuL,UAAU,IAAIA,UAAU,CAAC9M,OAAO,EAAE,KAAK,YAAY;MAC1D,GAAG;KACJ,MAAM+M,8BAAuC,GAAG,CAAC,MAAM;OACtD,MAAMC,SAA6B,GAAGlO,IAAI,CAACoC,YAAY,EAAE;OAEzD,OAAO8L,SAAS,IAAIA,SAAS,CAAChN,OAAO,EAAE,KAAK,YAAY;MACxD,GAAG;KACJ,MAAMiN,6BAAsC,GAAG,CAAC,MAAM;OACrD,MAAMC,WAA+B,GAAGpO,IAAI,CAACmD,cAAc,EAAE;OAE7D,OACCiL,WAAW,IACRA,WAAW,CAAClN,OAAO,EAAE,KAAK,YAAY,IACtC,EACFkN,WAAW,CAACxN,OAAO,EAAE,KAAK9B,UAAU,CAACa,YAAY,IAC9C,CAACyO,WAAW,CAACnN,YAAY,EAAE,CAAC4L,QAAQ,EAAE,CAACnI,QAAQ,CAAC,SAAS,CAAC,CAC7D;MAEF,GAAG;KAEJ,MAAM6F,UAAkB,GAAGvK,IAAI,CAACwJ,aAAa,EAAE;KAC/C,MAAMgB,OAAe,GAAGxK,IAAI,CAACsJ,UAAU,EAAE;KACzC,MAAMmB,UAAkB,GAAGzK,IAAI,CAAC4J,aAAa,EAAE;KAE/C,OAAO,CACNiE,8BAA8B,GAAG,IAAI,GAAG,EAAE,EAC1CtD,UAAU,EACVwD,6BAA6B,GAAG,IAAI,GAAG,EAAE,EACzCvD,OAAO,EACPyD,8BAA8B,GAAG,IAAI,GAAG,EAAE,EAC1CxD,UAAU,EACV0D,6BAA6B,GAAG,IAAI,GAAG,EAAE,CACzC,CAAC9I,IAAI,CAAC,EAAE,CAAC;;GAGXjG,OAAO,CAACC,IAA2B,EACnC;KACC,KAAK,CAACD,OAAO,CAACC,IAAI,CAAC;;GAGpBkO,OAAO,CAACrN,KAAc,EACtB;KACC,IAAI9B,cAAI,CAAC2J,SAAS,CAAC7H,KAAK,CAAC,EACzB;OACC,IAAI,CAAC4G,YAAU,CAAC,GAAG5G,KAAK;;;GAI1BgH,MAAM,GACN;KACC,OAAO,IAAI,CAACJ,YAAU,CAAC;;GAGxB0G,aAAa,CAACtN,KAAc,EAC5B;KACC,IAAI9B,cAAI,CAAC2J,SAAS,CAAC7H,KAAK,CAAC,EACzB;OACC,IAAI,CAACkN,gBAAgB,CAAC,GAAGlN,KAAK;;;GAIhC+H,UAAU,GACV;KACC,OAAO,IAAI,CAACmF,gBAAgB,CAAC;;GAG9BK,iBAAiB,CAACY,SAAqC,EACvD;KACC,IAAIjQ,cAAI,CAACkM,UAAU,CAAC+D,SAAS,CAAC,IAAIjQ,cAAI,CAAC0O,MAAM,CAACuB,SAAS,CAAC,EACxD;OACC,IAAI,CAACzG,cAAc,GAAGyG,SAAS;;;GAIjCxG,iBAAiB,GACjB;KACC,OAAO,IAAI,CAACD,cAAc;;GAG3B+F,kBAAkB,CAACL,eAAsC,EACzD;KACC,IAAIlP,cAAI,CAACC,OAAO,CAACiP,eAAe,CAAC,EACjC;OACC,IAAI,CAACA,eAAe,GAAGA,eAAe;;;GAIxCgB,kBAAkB,GAClB;KACC,OAAO,IAAI,CAAChB,eAAe;;GAG5B5F,cAAc,CAACyF,OAAe,EAC9B;KACC,MAAMG,eAAsC,GAAG,IAAI,CAACgB,kBAAkB,EAAE;KAExE,OACC,CAAClQ,cAAI,CAACsC,aAAa,CAAC4M,eAAe,CAAC,IAEnClP,cAAI,CAACsC,aAAa,CAAC4M,eAAe,CAAC,IAChCA,eAAe,CAAC5I,QAAQ,CAACyI,OAAO,CACnC;;CAGJ;;CCvHO,MAAMoB,YAAY,CACzB;GAWC,OAAOC,YAAY,CAACtO,KAAU,EAC9B;KACC,OAAOA,KAAK,YAAY6L,gBAAgB;;GAGzC,OAAO0C,UAAU,CAACzO,IAAyB,EAC3C;KACC,IAAI5B,cAAI,CAACqD,QAAQ,CAACzB,IAAI,CAAC,EACvB;OACC,OAAOA,IAAI;;KAGZ,IAAI5B,cAAI,CAACsQ,QAAQ,CAAC1O,IAAI,CAAC,IAAIA,IAAI,YAAYlB,UAAU,EACrD;OACC,OAAOkB,IAAI,CAACkB,OAAO,EAAE;;KAGtB,OAAO,IAAI;;GAGZnC,WAAW,CAACC,OAA4B,GAAG,EAAE,EAC7C;KAAA,KA1BA2P,UAAU,GAA2B,EAAE;KAAA,KACvCC,aAAa,GAAmBL,YAAY,CAACM,IAAI,CAACC,KAAK;KAAA,KACvDC,uBAAuB,GAAY,IAAI;KAAA,KACvCC,OAAO,GAAkB,IAAIC,+BAAa,EAAE;KAwB3C,IAAI,CAAC7Q,cAAI,CAACgK,aAAa,CAACpJ,OAAO,CAAC,EAChC;OACC,MAAM,IAAIV,SAAS,CAAC,yBAAyB,CAAC;;KAG/C,IAAI,CAAC4Q,aAAa,CAAClQ,OAAO,CAAC2P,UAAU,CAAC;KACtC,IAAI,CAACQ,gBAAgB,CAACnQ,OAAO,CAAC4P,aAAa,CAAC;KAC5C,IAAI,CAACQ,0BAA0B,CAACpQ,OAAO,CAAC+P,uBAAuB,CAAC;KAChE,IAAI,CAACM,UAAU,CAACrQ,OAAO,CAACgQ,OAAO,CAAC;;GAGjCE,aAAa,CAACP,UAAkC,EAChD;KACC,IAAIvQ,cAAI,CAACC,OAAO,CAACsQ,UAAU,CAAC,EAC5B;OACC,MAAMW,kBAA0B,GAAGX,UAAU,CAACY,SAAS,CAAEhQ,MAAuB,IAAc;SAC7F,OAAO,CAACgP,YAAY,CAACC,YAAY,CAACjP,MAAM,CAAC;QACzC,CAAC;OAEF,IAAI+P,kBAAkB,GAAG,CAAC,CAAC,EAC3B;SACC,MAAM,IAAIhR,SAAS,CAAE,cAAagR,kBAAmB,4BAA2B,CAAC;;OAGlF,IAAI,CAACX,UAAU,GAAG,CAAC,GAAGA,UAAU,CAAC;;;GAInCa,YAAY,CAAC,GAAGb,UAAkC,EAClD;KACC,MAAMW,kBAA0B,GAAGX,UAAU,CAACY,SAAS,CAAEhQ,MAAuB,IAAc;OAC7F,OAAO,CAACgP,YAAY,CAACC,YAAY,CAACjP,MAAM,CAAC;MACzC,CAAC;KAEF,IAAI+P,kBAAkB,GAAG,CAAC,CAAC,EAC3B;OACC,MAAM,IAAIhR,SAAS,CAAE,cAAagR,kBAAmB,4BAA2B,CAAC;;KAGlF,MAAMG,kBAAiC,GAAGd,UAAU,CAAChO,OAAO,CAAEpB,MAAuB,IAAK;OACzF,OAAOA,MAAM,CAAC2B,OAAO,EAAE;MACvB,CAAC;KAEF,MAAMwO,iBAAyC,GAAG,IAAI,CAACC,aAAa,EAAE;KACtED,iBAAiB,CAAC5L,OAAO,CAAEvE,MAAuB,IAAK;OACtDA,MAAM,CAACkN,UAAU,CAAC,GAAGgD,kBAAkB,CAAC;MACxC,CAAC;KAEF,MAAMG,yBAAiD,GAAGF,iBAAiB,CAACzM,MAAM,CAAE1D,MAAuB,IAAK;OAC/G,OAAOnB,cAAI,CAACsC,aAAa,CAACnB,MAAM,CAAC2B,OAAO,EAAE,CAAC;MAC3C,CAAC;KAEF,IAAI,CAACgO,aAAa,CAAC,CAClB,GAAGU,yBAAyB,EAC5B,GAAGjB,UAAU,CACb,CAAC;;GAGHgB,aAAa,GACb;KACC,OAAO,CAAC,GAAG,IAAI,CAAChB,UAAU,CAAC;;GAG5B1N,YAAY,CAACjB,IAAyB,EACtC;KACC,MAAMmN,OAAgB,GAAGoB,YAAY,CAACE,UAAU,CAACzO,IAAI,CAAC;KACtD,IAAI5B,cAAI,CAACqD,QAAQ,CAAC0L,OAAO,CAAC,EAC1B;OACC,OAAO,IAAI,CAACwC,aAAa,EAAE,CAACpN,IAAI,CAAEhD,MAAuB,IAAc;SACtE,OAAOA,MAAM,CAAC2B,OAAO,EAAE,CAACwD,QAAQ,CAACyI,OAAO,CAAC3L,WAAW,EAAE,CAAC;QACvD,CAAC;;KAGH,OAAO,IAAI;;GAGZ2N,gBAAgB,CAACU,OAAmC,EACpD;KACC,IAAI,CAACzR,cAAI,CAACuK,KAAK,CAACkH,OAAO,CAAC,EACxB;OACC,MAAMC,YAAY,GAAG1P,MAAM,CAAC2P,MAAM,CAACxB,YAAY,CAACM,IAAI,CAAC;OACrD,IAAIiB,YAAY,CAACpL,QAAQ,CAACmL,OAAO,CAAC,EAClC;SACC,IAAI,CAACjB,aAAa,GAAGiB,OAAO;QAC5B,MAED;SACC,MAAM,IAAIvR,SAAS,CAAE,IAAGuR,OAAQ,kBAAiB,CAAC;;;;GAKrDvO,gBAAgB,GAChB;KACC,OAAO,IAAI,CAACsN,aAAa;;GAG1BQ,0BAA0B,CAAClP,KAAc,EACzC;KACC,IAAI,CAAC9B,cAAI,CAACuK,KAAK,CAACzI,KAAK,CAAC,EACtB;OACC,IAAI9B,cAAI,CAAC2J,SAAS,CAAC7H,KAAK,CAAC,EACzB;SACC,IAAI,CAAC6O,uBAAuB,GAAG7O,KAAK;QACpC,MAED;SACC,MAAM,IAAI5B,SAAS,CAAE,IAAG4B,KAAM,wBAAuB,CAAC;;;;GAKzD6I,gCAAgC,GAChC;KACC,OAAO,IAAI,CAACgG,uBAAuB;;GAGpCM,UAAU,CAACL,OAAsB,EACjC;KACC,IAAIA,OAAO,YAAYC,+BAAa,EACpC;OACC,IAAI,CAACD,OAAO,GAAGA,OAAO;;;GAIxB7N,UAAU,GACV;KACC,OAAO,IAAI,CAAC6N,OAAO;;GAGpBgB,cAAc,GACd;KACC,OAAO,IAAI,CAACL,aAAa,EAAE,CAAChP,OAAO,CAAEsG,SAA0B,IAAK;OACnE,OAAOA,SAAS,CAAC/F,OAAO,EAAE;MAC1B,CAAC;;GAGHmG,YAAY,CAACrH,IAAyB,EACtC;KACC,MAAMiQ,WAA0B,GAAG,IAAI,CAACD,cAAc,EAAE;KACxD,MAAM7C,OAAgB,GAAGoB,YAAY,CAACE,UAAU,CAACzO,IAAI,CAAC;KAEtD,OAAOiQ,WAAW,CAACvL,QAAQ,CAACyG,MAAM,CAACgC,OAAO,CAAC,CAAC3L,WAAW,EAAE,CAAC;;GAG3D0F,MAAM,CAAClH,IAAyB,EAChC;KACC,MAAMiH,SAA2B,GAAG,IAAI,CAAChG,YAAY,CAACjB,IAAI,CAAC;KAC3D,IAAIiH,SAAS,EACb;OACC,OAAOA,SAAS,CAACC,MAAM,EAAE;;KAG1B,OAAO,KAAK;;GAGbgJ,SAAS,CAAClQ,IAAgB,EAC1B;KACC,OAAOA,IAAI,IAAIA,IAAI,CAACY,OAAO,EAAE,KAAK9B,UAAU,CAACa,YAAY;;GAG1DwQ,MAAM,CAACnQ,IAAgB,EACvB;KACC,OAAOA,IAAI,IAAIA,IAAI,CAACkB,OAAO,EAAE,KAAK,OAAO;;GAG1CkP,UAAU,CAACpQ,IAAgB,EAC3B;KACC,OAAOA,IAAI,IAAIA,IAAI,CAACkB,OAAO,EAAE,KAAK,WAAW;;GAG9CmP,SAAS,CAACrQ,IAAgB,EAC1B;KACC,OAAOA,IAAI,IAAIA,IAAI,CAACY,OAAO,EAAE,KAAK9B,UAAU,CAACc,SAAS;;GAGvD0Q,MAAM,CAACtQ,IAAgB,EACvB;KACC,OAAOA,IAAI,IAAIA,IAAI,CAACkB,OAAO,EAAE,KAAK,OAAO;;GAG1CqP,SAAS,CAACvQ,IAAgB,EAC1B;KACC,OAAOA,IAAI,IAAIA,IAAI,CAACkB,OAAO,EAAE,KAAK,YAAY;;GAG/CsP,KAAK,CAACxQ,IAAgB,EACtB;KACC,OAAOA,IAAI,IAAIA,IAAI,CAACkB,OAAO,EAAE,KAAK,MAAM;;GAGzCuP,iBAAiB,GACjB;KACC,MAAM9B,UAAkC,GAAG,IAAI,CAACgB,aAAa,EAAE;KAC/D,MAAM5K,GAAG,GAAG,IAAI2L,GAAG,EAAE;KAErB/B,UAAU,CAAC7K,OAAO,CAAEmD,SAA0B,IAAK;OAClD,MAAM2F,MAA8B,GAAG3F,SAAS,CAAC4F,QAAQ,EAAE;OAC3D,MAAM8D,WAA0B,GAAG,CAClC,GAAG1J,SAAS,CAAC/F,OAAO,EAAE,EACtB,GAAG0L,MAAM,EACT,IAAI3F,SAAS,CAACC,MAAM,EAAE,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CACxC;OAED,MAAMoG,eAAe,GAAGrG,SAAS,CAACqH,kBAAkB,EAAE;OACtD,MAAMpC,SAAS,GAAGjF,SAAS,CAACgG,YAAY,EAAE;OAE1C0D,WAAW,CAAC7M,OAAO,CAAEzE,IAAI,IAAK;SAC7B,IAAI,CAAC0F,GAAG,CAAC6L,GAAG,CAACvR,IAAI,CAAC,EAClB;WACC0F,GAAG,CAAC7F,GAAG,CACNG,IAAI,EACJ;aACCiO,eAAe,EAAE,IAAIuD,GAAG,EAAE;aAC1B3E,SAAS,EAAE,IAAI2E,GAAG,EAAE;aACpBC,OAAO,EAAE,IAAID,GAAG;YAChB,CACD;;SAGF,MAAME,KAIL,GAAGhM,GAAG,CAACzF,GAAG,CAACD,IAAI,CAAC;SAEjB,MAAM2R,QAAQ,GAAG;WAChB1D,eAAe,EAAE,IAAIuD,GAAG,CAAC,CAAC,GAAGE,KAAK,CAACzD,eAAe,EAAE,GAAGA,eAAe,CAAC,CAAC;WACxEpB,SAAS,EAAE,IAAI2E,GAAG,CAAC,CAAC,GAAGE,KAAK,CAAC7E,SAAS,EAAE,GAAGA,SAAS,CAAC,CAAC;WACtD4E,OAAO,EAAE,IAAID,GAAG,CAAC,CAACxR,IAAI,EAAE,GAAGuN,MAAM,EAAE,IAAI3F,SAAS,CAACC,MAAM,EAAE,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;UAC5E;SAEDnC,GAAG,CAAC7F,GAAG,CAACG,IAAI,EAAE2R,QAAQ,CAAC;QACvB,CAAC;MACF,CAAC;KAEF,OAAOjM,GAAG;;GAGX2C,cAAc,CAACjI,MAA2B,EAAEyD,KAA0B,EACtE;KACC,MAAM+N,UAAmB,GAAG1C,YAAY,CAACE,UAAU,CAAChP,MAAM,CAAC;KAC3D,MAAMyR,SAAkB,GAAG3C,YAAY,CAACE,UAAU,CAACvL,KAAK,CAAC;KAEzD,IACC9E,cAAI,CAACqK,cAAc,CAACwI,UAAU,CAAC,IAC5B7S,cAAI,CAACqK,cAAc,CAACyI,SAAS,CAAC,EAElC;OACC,IAAID,UAAU,KAAK,WAAW,EAC9B;SACC,OAAO,IAAI;;OAGZ,MAAME,cAAc,GAAG,IAAI,CAACV,iBAAiB,EAAE;OAC/C,MAAMW,SAAS,GAAGD,cAAc,CAAC7R,GAAG,CAAC2R,UAAU,CAAC;OAChD,MAAMI,QAAQ,GAAGF,cAAc,CAAC7R,GAAG,CAAC4R,SAAS,CAAC;OAE9C,IACC9S,cAAI,CAACgK,aAAa,CAACgJ,SAAS,CAAC,IAC1BhT,cAAI,CAACgK,aAAa,CAACiJ,QAAQ,CAAC,EAEhC;SACC,OACC,CACCD,SAAS,CAAC9D,eAAe,CAACgE,IAAI,KAAK,CAAC,IACjC,CAAC,GAAGD,QAAQ,CAACP,OAAO,CAAC,CAACS,IAAI,CAAElS,IAAI,IAAK;WACvC,OAAO+R,SAAS,CAAC9D,eAAe,CAACsD,GAAG,CAACvR,IAAI,CAAC;UAC1C,CAAC,MAGFgS,QAAQ,CAACnF,SAAS,CAACoF,IAAI,KAAK,CAAC,IAC1B,CAAC,GAAGF,SAAS,CAACN,OAAO,CAAC,CAACS,IAAI,CAAElS,IAAI,IAAK;WACxC,OAAOgS,QAAQ,CAACnF,SAAS,CAAC0E,GAAG,CAACvR,IAAI,CAAC;UACnC,CAAC,CACF;;;KAKJ,OAAO,KAAK;;GAGbsL,UAAU,CAAC3L,OAAwB,GAAG,EAAE,EACxC;KACC,OAAO,IAAI0L,cAAc,CAAC;OACzB,GAAG1L,OAAO;OACVO,MAAM,EAAE;MACR,CAAC;;GAGH4F,UAAU,CAACnG,OAA0B,EACrC;KACC,IAAI,CAACZ,cAAI,CAACgK,aAAa,CAACpJ,OAAO,CAAC,EAChC;OACC,MAAM,IAAIV,SAAS,CAAC,yBAAyB,CAAC;;KAG/C,IAAI,CAACF,cAAI,CAACqK,cAAc,CAACzJ,OAAO,CAACK,IAAI,CAAC,EACtC;OACC,MAAM,IAAIf,SAAS,CAAC,0BAA0B,CAAC;;KAGhD,IAAI,CAAC,IAAI,CAAC+I,YAAY,CAACrI,OAAO,CAACK,IAAI,CAAC,EACpC;OACC,MAAM,IAAIf,SAAS,CAAE,eAAcU,OAAO,CAACK,IAAK,yBAAwB,CAAC;;KAG1E,OAAO,IAAIP,UAAU,CAAC;OACrB,GAAGE,OAAO;OACVO,MAAM,EAAE;MACR,CAAC;;GAGHsK,aAAa,CAAC7K,OAAiC,GAAG,EAAE,EACpD;KACC,IAAI,CAACZ,cAAI,CAACgK,aAAa,CAACpJ,OAAO,CAAC,EAChC;OACC,MAAM,IAAIV,SAAS,CAAC,yBAAyB,CAAC;;KAG/C,IAAI,CAACF,cAAI,CAACqK,cAAc,CAACzJ,OAAO,CAACK,IAAI,CAAC,EACtC;OACC,MAAM,IAAIf,SAAS,CAAC,0BAA0B,CAAC;;KAGhD,IAAI,CAAC,IAAI,CAAC+I,YAAY,CAACrI,OAAO,CAACK,IAAI,CAAC,EACpC;OACC,MAAM,IAAIf,SAAS,CAAE,eAAcU,OAAO,CAACK,IAAK,yBAAwB,CAAC;;KAG1E,OAAO,IAAI0H,iBAAiB,CAAC;OAC5B,GAAG/H,OAAO;OACVO,MAAM,EAAE;MACR,CAAC;;GAGH6L,UAAU,CAACpM,OAA8B,GAAG,EAAE,EAC9C;KACC,MAAMwS,eAAe,GAAGpT,cAAI,CAACgK,aAAa,CAACpJ,OAAO,CAAC,GAAGA,OAAO,GAAG;OAAEwL,OAAO,EAAExL;MAAS;KAEpF,OAAO,IAAI+L,cAAc,CAAC;OACzB,GAAGyG,eAAe;OAClBjS,MAAM,EAAE;MACR,CAAC;;GAGHqM,aAAa,CAAC5M,OAA8B,GAAG,EAAE,EACjD;KACC,MAAMwS,eAAe,GAAGpT,cAAI,CAACgK,aAAa,CAACpJ,OAAO,CAAC,GAAGA,OAAO,GAAG;OAAEwL,OAAO,EAAExL;MAAS;KAEpF,OAAO,IAAI2M,iBAAiB,CAAC;OAC5B,GAAG6F,eAAe;OAClBjS,MAAM,EAAE;MACR,CAAC;;GAGHuM,SAAS,CAAC9M,OAA8B,GAAG,EAAE,EAC7C;KACC,MAAMwS,eAAe,GAAGpT,cAAI,CAACgK,aAAa,CAACpJ,OAAO,CAAC,GAAGA,OAAO,GAAG;OAAEwL,OAAO,EAAExL;MAAS;KAEpF,OAAO,IAAI6M,aAAa,CAAC;OACxB,GAAG2F,eAAe;OAClBjS,MAAM,EAAE;MACR,CAAC;;GAGHsL,cAAc,CAAC7L,OAA4B,GAAG,EAAE,EAChD;KACC,OAAO,IAAI4L,kBAAkB,CAAC;OAC7B,GAAG5L,OAAO;OACVO,MAAM,EAAE;MACR,CAAC;;CAEJ;CAxZagP,YAAY,CAEjBM,IAAI,GAA4B;GACtCC,KAAK,EAAE,OAAO;GACd2C,KAAK,EAAE;CACR,CAAC;;CClCK,MAAMC,gBAAgB,SAAS3F,gBAAgB,CACtD;GACChN,WAAW,CAACC,OAAO,EACnB;KACC,KAAK,CAAC;OAAE,GAAGA,OAAO;OAAEK,IAAI,EAAE,CAAC,OAAO;MAAG,CAAC;;CAExC;;CCNO,MAAMsS,mBAAmB,SAAS5F,gBAAgB,CACzD;GACChN,WAAW,CAACC,OAAO,GAAG,EAAE,EACxB;KACC,KAAK,CAAC;OAAE,GAAGA,OAAO;OAAEK,IAAI,EAAE,CAAC,YAAY;MAAG,CAAC;;CAE7C;;CCNO,MAAMuS,eAAe,SAAS7F,gBAAgB,CACrD;GACChN,WAAW,CAACC,OAAO,EACnB;KACC,KAAK,CAAC;OAAE,GAAGA,OAAO;OAAEK,IAAI,EAAE,CAAC,MAAM;MAAG,CAAC;;CAEvC;;CCEO,MAAMwS,mBAAmB,SAAStD,YAAY,CACrD;GACCxP,WAAW,CAACC,OAAmC,GAAG,EAAE,EACpD;KACC,MAAM2P,UAAU,GAAG,CAClB,IAAItB,eAAe,CAAC;OACnBhO,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;OAC1B2M,KAAK,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;OAC7BsB,eAAe,EAAE,CAAC,OAAO,EAAE,YAAY,EAAE,SAAS,CAAC;OACnDrF,UAAU,EAAE;MACZ,CAAC,EACF,IAAIoF,eAAe,CAAC;OACnBhO,IAAI,EAAE,CAAC,MAAM,CAAC;OACd2M,KAAK,EAAE,CAAC,SAAS,CAAC;OAClBsB,eAAe,EAAE,CAAC,OAAO,EAAE,YAAY,EAAE,SAAS,CAAC;OACnDrF,UAAU,EAAE;MACZ,CAAC,EACF,IAAIoF,eAAe,CAAC;OACnBhO,IAAI,EAAE,CAAC,KAAK,CAAC;OACb2M,KAAK,EAAE,CAAC,cAAc,CAAC;OACvBsB,eAAe,EAAE,CAAC,OAAO,CAAC;OAC1BrF,UAAU,EAAE;MACZ,CAAC,EACF,IAAIoF,eAAe,CAAC;OACnBhO,IAAI,EAAE,CAAC,KAAK,CAAC;OACb2M,KAAK,EAAE,CAAC,SAAS,CAAC;OAClBsB,eAAe,EAAE,CAAC,OAAO,EAAE,SAAS,EAAE,KAAK,CAAC;OAC5CrF,UAAU,EAAE;MACZ,CAAC,EACF,IAAIoF,eAAe,CAAC;OACnBhO,IAAI,EAAE,GAAG;OACT2M,KAAK,EAAE,CAAC,QAAQ,CAAC;OACjBsB,eAAe,EAAE,CAAC,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,cAAc,CAAC;OACnEhB,SAAS,EAAEe,eAAe,CAACO,uBAAuB;OAClD1B,SAAS,EAAE,CAAC,OAAO,EAAE,aAAa;MAClC,CAAC,EACF,IAAImB,eAAe,CAAC;OACnBhO,IAAI,EAAE,MAAM;OACZ2M,KAAK,EAAE,CAAC,QAAQ,CAAC;OACjBsB,eAAe,EAAE,CAAC,GAAG,CAAC;OACtBhB,SAAS,EAAEe,eAAe,CAACO,uBAAuB;OAClD1B,SAAS,EAAE,CAAC,OAAO,EAAE,aAAa,CAAC;OACnCjE,UAAU,EAAE;MACZ,CAAC,EACF,IAAIoF,eAAe,CAAC;OACnBhO,IAAI,EAAE,CAAC,GAAG,CAAC;OACXiO,eAAe,EAAE,CAAC,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,cAAc,CAAC;OACnEhB,SAAS,EAAGtM,IAAuB,IAAK;SACvC,MAAMuK,UAAkB,GAAGvK,IAAI,CAACwJ,aAAa,EAAE;SAC/C,MAAMgB,OAAe,GAAGxK,IAAI,CAACsJ,UAAU,EAAE,CAACwI,IAAI,EAAE;SAEhD,OAAQ,GAAEvH,UAAW,GAAEC,OAAQ,EAAC;QAChC;OACD0B,SAAS,EAAE,CAAC,MAAM;MAClB,CAAC,EACF,IAAImB,eAAe,CAAC;OACnBhO,IAAI,EAAE,OAAO;OACb2M,KAAK,EAAE,CAAC,QAAQ,CAAC;OACjBsB,eAAe,EAAE,CAAC,IAAI,CAAC;OACvBhB,SAAS,EAAEe,eAAe,CAACO,uBAAuB;OAClD1B,SAAS,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,SAAS,CAAC;OACxCjE,UAAU,EAAE;MACZ,CAAC,EACF,IAAIoF,eAAe,CAAC;OACnBhO,IAAI,EAAE,IAAI;OACViO,eAAe,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;OAC7BpB,SAAS,EAAE,CAAC,OAAO,CAAC;OACpBjE,UAAU,EAAE;MACZ,CAAC,EACF,IAAIoF,eAAe,CAAC;OACnBhO,IAAI,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;OAClB2M,KAAK,EAAE,CAAC,aAAa,CAAC;OACtBsB,eAAe,EAAE,CAAC,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,cAAc,EAAE,QAAQ,CAAC;OAC7EpB,SAAS,EAAE,CAAC,IAAI;MAChB,CAAC,EACF,IAAImB,eAAe,CAAC;OACnBhO,IAAI,EAAE,OAAO;OACb2M,KAAK,EAAE,CAAC,QAAQ,EAAE,aAAa,CAAC;OAChCsB,eAAe,EAAE,CAAC,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,cAAc,EAAE,QAAQ,CAAC;OAC7EpB,SAAS,EAAE,CAAC,OAAO,EAAE,aAAa;MAClC,CAAC,EACF,IAAImB,eAAe,CAAC;OACnBhO,IAAI,EAAE,MAAM;OACZ2M,KAAK,EAAE,CAAC,QAAQ,CAAC;OACjBM,SAAS,EAAEe,eAAe,CAACO,uBAAuB;OAClDN,eAAe,EAAE,CAAC,OAAO,EAAE,YAAY,EAAE,MAAM,CAAC;OAChDpB,SAAS,EAAE,CAAC,OAAO,EAAE,aAAa;MAClC,CAAC,EACF,IAAImB,eAAe,CAAC;OACnBhO,IAAI,EAAE,OAAO;OACb2M,KAAK,EAAE,CAAC,cAAc,CAAC;OACvBsB,eAAe,EAAE,CAAC,OAAO,CAAC;OAC1BpB,SAAS,EAAE,CAAC,OAAO,EAAE,aAAa,EAAE,GAAG,CAAC;OACxCjE,UAAU,EAAE;MACZ,CAAC,EACF,IAAIoF,eAAe,CAAC;OACnBhO,IAAI,EAAE,SAAS;OACf2M,KAAK,EAAE,CAAC,QAAQ,EAAE,aAAa,CAAC;OAChCsB,eAAe,EAAE,CAAC,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,cAAc,EAAE,QAAQ,CAAC;OAC7EpB,SAAS,EAAE,CAAC,OAAO,EAAE,aAAa;MAClC,CAAC,EACF,IAAImB,eAAe,CAAC;OACnBhO,IAAI,EAAE,CAAC,MAAM,EAAE,SAAS,EAAE,YAAY,CAAC;OACvC2M,KAAK,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC;OAC9BsB,eAAe,EAAE,CAAC,OAAO,EAAE,SAAS,CAAC;OACrCrF,UAAU,EAAE;MACZ,CAAC,EACF,IAAIoF,eAAe,CAAC;OACnBhO,IAAI,EAAE,CAAC,OAAO;MACd,CAAC,EACF,IAAIgO,eAAe,CAAC;OACnBhO,IAAI,EAAE,CAAC,WAAW;MAClB,CAAC,EACF,IAAIgO,eAAe,CAAC;OACnBhO,IAAI,EAAE,CAAC,OAAO;MACd,CAAC,EACF,IAAIgO,eAAe,CAAC;OACnBhO,IAAI,EAAE,CAAC,YAAY;MACnB,CAAC,EACF,IAAIgO,eAAe,CAAC;OACnBhO,IAAI,EAAE,CAAC,MAAM,CAAC;OACdiN,SAAS,EAAE,MAAM;SAChB,OAAO,EAAE;;MAEV,CAAC,CACF;KAED,IAAI,CAAAtN,OAAO,oBAAPA,OAAO,CAAE+S,OAAO,MAAK,MAAM,EAC/B;OACCpD,UAAU,CAAC5K,IAAI,CACd,IAAIsJ,eAAe,CAAC;SACnBhO,IAAI,EAAE,CAAAL,OAAO,oBAAPA,OAAO,CAAE+S,OAAO,MAAK,MAAM,GAAG,MAAM,GAAG,MAAM;SACnD/F,KAAK,EAAE,CAAC,SAAS,CAAC;SAClBlC,IAAI,EAAE;QACN,CAAC,CACF;;KAGF,KAAK,CAAC;OACL6E,UAAU;OACVC,aAAa,EAAEL,YAAY,CAACM,IAAI,CAACC,KAAK;OACtCC,uBAAuB,EAAE;MACzB,CAAC;KAEF,IAAI3Q,cAAI,CAACgK,aAAa,CAACpJ,OAAO,CAAC,EAC/B;OACC,IAAI,CAACkQ,aAAa,CAAClQ,OAAO,CAAC2P,UAAU,CAAC;OACtC,IAAI,CAACQ,gBAAgB,CAACnQ,OAAO,CAAC4P,aAAa,CAAC;OAC5C,IAAI,CAACQ,0BAA0B,CAACpQ,OAAO,CAAC+P,uBAAuB,CAAC;;;CAGnE;;;;;;;;;;;;;;;;;;;;"}